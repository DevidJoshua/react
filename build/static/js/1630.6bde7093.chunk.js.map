{"version":3,"file":"static/js/1630.6bde7093.chunk.js","mappings":"8fAIMA,EAAWC,EAAAA,EAAAA,SAGXC,EAAS,WAGFC,EAAsB,mBACtBC,EAAsB,IAAMF,EAE5BG,EAAgB,SAACC,GAAD,iBAAaJ,EAAb,kBAA6BI,EAAK,IAAMA,EAAK,KAC7DC,EAAiB,4BAAWL,IAC5BM,EAAuB,qBAEvBC,EAAmB,WACnBC,EAAkB,kBAClBC,EAAkB,gBAElBC,EAAgB,oBAEhBC,EAAgB,iBAChBC,EAAiB,kBACjBC,EAAgB,iBAChBC,EAAS,uHACTC,EAAa,SAACC,GAAD,MAAa,CACrC,CACEC,OAAQ,IACRC,SAAU,MACVC,KAAM,SAAAC,GAAC,OACL,iBAAKC,UAAU,YAAf,WACE,mBAAQC,KAAK,SAASD,UAAU,gDAAgD,cAAY,WAA5F,UACE,iBAAMA,UAAU,UAAhB,gCAEF,gBAAKA,UAAU,gBAAgBE,KAAK,OAApC,UACE,SAAC,KAAD,CAAMF,UAAU,gBAAgBG,GAAE,UAAK1B,GAAL,OAAgBG,EAAhB,YAAuCmB,EAAEK,KAAKC,OAAhF,2BAIR,CAAET,OAAQ,WAAYC,SAAU,SAChC,CAAED,OAAQ,QAASC,SAAU,mBAC7B,CACED,OAAQ,OACRC,SAAU,UACVC,KAAM,SAAAQ,GAIJ,IAAMC,GAAQC,IAAAA,IAAMF,EAAEF,KAAKC,OAAS,IAAI,SAACI,EAAGC,GAAJ,OAAUD,EAAEE,SAAS,IAAIC,KAAK,MACtE,OAAQ,oCAAUL,SA4BxB,MACE3B,oBAAAA,EACAC,oBAAAA,EACAgC,cAtE2B,SAAC9B,GAAD,iBAAaJ,EAAb,mBAA8BI,IAuEzDD,cAAAA,EAEAG,qBAAAA,EACA6B,gBAtE6B,gBAuE7B5B,iBAAAA,EACAC,gBAAAA,EAGAE,cAAAA,EAEAE,eAAAA,EACAC,cAAAA,EACAF,cAAAA,EACAG,OAAAA,EACAC,WAAAA,EACAV,eAAAA,I,yJC5FI+B,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACJ,WAAaC,GAAQ,IAAD,yBAClB,cAAMA,IACDC,MAAQ,CACXC,SAASxB,EAAAA,EAAAA,IAAWsB,EAAMrB,UAHV,EAoCnB,OA/BA,8BAED,WACE,IAAMwB,EAAmB,CACvBC,YAAa7B,EAAAA,GACbE,OAAQA,EAAAA,IAEFyB,EAAYG,KAAKJ,MAAjBC,QACR,OACE,SAAC,IAAD,CACEI,UAAWpC,EAAAA,GACXqC,WAAY,CAAC,CAAEC,MAAO,UAAWC,KAAM/C,EAAAA,EAAAA,aAAyB,CAAE8C,MAAOtC,EAAAA,GAAkBuC,KAAM,KAAMC,UAAU,IACjHC,mBAAoBzC,EAAAA,GACpB0C,gBAAc,EAJhB,UAME,gBAAK5B,UAAU,MAAf,UACE,gBAAKA,UAAU,YAAf,UACE,SAAC,KAAD,CACE6B,mBAAoBV,EAAiBC,YACrC3B,OAAQ0B,EAAiB1B,OACzByB,QAASA,EACTY,YAAYhD,EAAAA,EAAAA,MACZG,qBAAsBA,EAAAA,GACtB8C,UAAW7C,EAAAA,GACX8C,iBAAe,EACfC,iBAAkB,gBAM7B,EArCGlB,CAAamB,EAAAA,WA4CnB,WAAeC,EAAAA,EAAAA,KALS,SAAClB,EAAOmB,GAC9B,MAAO,CACLC,eAAgBpB,EAAMqB,UAAUC,mBAGpC,CAAwCxB","sources":["Pages/Category/Manifest.js","Pages/Category/PageList.js"],"sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport _ from 'lodash'\nimport AppConfig from '../../core/Config/AppConfig'\nconst basePath = AppConfig.basePath\n\nconst entityName = 'Category'\nconst entity = 'category'\nconst serviceEntity = 'Category'\n\nexport const redirectAfterCreate = '/' + entity + '/detail'\nexport const redirectAfterDelete = '/' + entity\nexport const detailPageUrl = (id) => (`/${entity}/detail/${id}`)\nexport const upsertPageUrl = (id) => (`/${entity}/upsert${id ? '/' + id : ''}`)\nexport const listallPageUrl = () => (`/${entity}`)\nexport const createNewButtonLabel = 'Buat Kategori Baru'\nexport const createPageTitle = 'Buat Kategori'\nexport const listallPageTitle = 'Kategori'\nexport const detailPageTitle = 'Detail Kategori'\nexport const upsertPageTitle = 'Form ' + entityName\n// export const createService = 'create' + serviceEntity\nexport const detailService = 'getDetail' + serviceEntity\n// export const updateService = 'update' + serviceEntity\nexport const upsertService = 'upsert' + serviceEntity\nexport const listallService = 'getAll' + serviceEntity + 's'\nexport const deleteService = 'delete' + serviceEntity\nexport const fields = '_id,title,toko_id{_id, name},parent_id{_id, title},created_at,updated_at,created_by{full_name},updated_by{full_name}'\nexport const getColumns = (history) => [\n  {\n    Header: ' ',\n    accessor: '_id',\n    Cell: p => (\n      <div className='btn-group'>\n        <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n          <span className='sr-only'>Toggle Dropdown</span>\n        </button>\n        <div className='dropdown-menu' role='menu'>\n          <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate}/${p.cell.value}`}>Detail</Link>\n        </div>\n      </div>)\n  },\n  { Header: 'Kategori', accessor: 'title' },\n  { Header: 'Induk', accessor: 'parent_id.title' },\n  {\n    Header: 'Toko',\n    accessor: 'toko_id',\n    Cell: d => {\n      // let data = Moment(d.cell.value)\n      // if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n      // else data = ''\n      const toko = (_.map(d.cell.value || [], (v, k) => v.name) || []).join(', ')\n      return (<span>{`${toko}`}</span>)\n    }\n  }\n  // {\n  //   Header: 'Tanggal Dibuat',\n  //   accessor: 'created_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  // {\n  //   Header: 'Tanggal Dirubah',\n  //   accessor: 'updated_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  // { Header: 'Dibuat Oleh', accessor: 'created_by.full_name' },\n  // { Header: 'Dirubah Oleh', accessor: 'updated_by.full_name' }\n  // { Header: 'created at', accessor: 'created_at' },\n  // { Header: 'updated at', accessor: 'updated_at' }\n]\nexport default {\n  redirectAfterCreate,\n  redirectAfterDelete,\n  detailPageUrl,\n  upsertPageUrl,\n  // createPageUrl,\n  createNewButtonLabel,\n  createPageTitle,\n  listallPageTitle,\n  detailPageTitle,\n  // updatePageTitle,\n  // createService,\n  detailService,\n  // updateService,\n  listallService,\n  deleteService,\n  upsertService,\n  fields,\n  getColumns,\n  listallPageUrl\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport ContentWrapper from '../../core/Components/Layout/ContentWrapper'\nimport { Table } from '../../core/features/TablePagination'\nimport { listallService, fields, listallPageTitle, upsertPageUrl, createNewButtonLabel, getColumns } from './Manifest'\nimport AppConfig from '../../core/Config/AppConfig'\nclass Comp extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      columns: getColumns(props.history)\n    }\n  }\n\n  render () {\n    const paginationConfig = {\n      serviceName: listallService,\n      fields: fields\n    }\n    const { columns } = this.state\n    return (\n      <ContentWrapper\n        pageTitle={listallPageTitle}\n        breadcrumb={[{ title: 'Beranda', link: AppConfig.appHomePage }, { title: listallPageTitle, link: null, isActive: true }]}\n        contentHeaderTitle={listallPageTitle}\n        isNeedLoggedin\n      >\n        <div className='row'>\n          <div className='col-md-12'>\n            <Table\n              listallServiceName={paginationConfig.serviceName}\n              fields={paginationConfig.fields}\n              columns={columns}\n              createHref={upsertPageUrl()}\n              createNewButtonLabel={createNewButtonLabel}\n              cardTitle={listallPageTitle}\n              withSearchField\n              widthSearchField={300}\n            />\n          </div>\n        </div>\n      </ContentWrapper>\n    )\n  }\n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    userPrivileges: state.myprofile.user_privileges\n  }\n}\nexport default connect(mapStateToProps)(Comp)\n"],"names":["basePath","AppConfig","entity","redirectAfterCreate","redirectAfterDelete","upsertPageUrl","id","listallPageUrl","createNewButtonLabel","listallPageTitle","detailPageTitle","upsertPageTitle","detailService","upsertService","listallService","deleteService","fields","getColumns","history","Header","accessor","Cell","p","className","type","role","to","cell","value","d","toko","_","v","k","name","join","detailPageUrl","createPageTitle","Comp","props","state","columns","paginationConfig","serviceName","this","pageTitle","breadcrumb","title","link","isActive","contentHeaderTitle","isNeedLoggedin","listallServiceName","createHref","cardTitle","withSearchField","widthSearchField","Component","connect","ownProps","userPrivileges","myprofile","user_privileges"],"sourceRoot":""}