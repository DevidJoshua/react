{"version":3,"file":"static/js/8611.4d7b3964.chunk.js","mappings":"4eAGMA,EAAWC,EAAAA,EAAAA,SAEXC,EAAaD,EAAAA,EAAAA,QACbE,EAAS,aAGFC,EAAsB,qBACtBC,EAAsB,IAAMF,EAE5BG,EAAgB,SAACC,GAAD,iBAAaJ,EAAb,kBAA6BI,EAAK,IAAMA,EAAK,KAC7DC,EAAiB,4BAAWL,IAC5BM,EAAuB,YAEvBC,EAAmB,cACnBC,EAAkB,cAClBC,EAAkB,QAAUV,EAC5BW,EAAgB,uBAEhBC,EAAgB,0BAChBC,EAAiB,wBACjBC,EAAgB,uBAChBC,EAAS,ibACTC,EAAa,SAACC,GAAD,MAAa,CACrC,CACEC,OAAQ,IACRC,SAAU,MACVC,KAAM,SAAAC,GAAC,OACL,iBAAKC,UAAU,YAAf,WACE,mBAAQC,KAAK,SAASD,UAAU,gDAAgD,cAAY,WAA5F,UACE,iBAAMA,UAAU,UAAhB,gCAEF,gBAAKA,UAAU,gBAAgBE,KAAK,OAApC,UAEE,SAAC,KAAD,CAAMF,UAAU,gBAAgBG,GAAE,UAAK3B,GAAL,OAAgBI,EAAhB,YAAuCmB,EAAEK,KAAKC,OAAhF,2BAIR,CAAET,OAAQ,OAAQC,SAAU,QAC5B,CAAED,OAAQ,UAAWC,SAAU,WAC/B,CAAED,OAAQ,WAAYC,SAAU,YAChC,CAAED,OAAQ,YAAaC,SAAU,aACjC,CAAED,OAAQ,UAAWC,SAAU,WAC/B,CAAED,OAAQ,SAAUC,SAAU,UAW9B,CAAED,OAAQ,UAAWC,SAAU,qBAMjC,MACEjB,oBAAAA,EACAC,oBAAAA,EACAyB,cAtD2B,SAACvB,GAAD,iBAAaJ,EAAb,mBAA8BI,IAuDzDD,cAAAA,EACAG,qBAAAA,EACAsB,gBArD6B,YAsD7BrB,iBAAAA,EACAC,gBAAAA,EACAC,gBAAAA,EACAoB,cApD2B,uBAqD3BlB,cAAAA,EACAD,cAAAA,EACAE,eAAAA,EACAC,cAAAA,EACAC,OAAAA,EACAC,WAAAA,EACAV,eAAAA,I,qbC5EIR,EAAWC,EAAAA,EAAAA,SAGXE,EAAS,WAGFC,EAAsB,SAAC6B,GAAD,MAAa,oBAA4BA,GAC/D5B,EAAsB,SAAC4B,GAAD,MAAa,sBAAwBA,GAC3DH,EAAgB,SAACvB,GAAD,iBAAaJ,EAAb,mBAA8BI,IAC9C2B,EAAgB,SAAC3B,GAAD,iBAAaJ,EAAb,mBAA8BI,IAC9C4B,EAAgB,4BAAWhC,EAAX,YAChBM,EAAuB,sBAEvBC,EAAmB,YACnBC,EAAkBT,kBAClBkC,EAAkB,kBAClBC,EAAgB,iBAEhBvB,EAAgB,oBAChBC,EAAiB,kBACjBC,EAAgB,iBAChBC,EAAS,8IACTC,EAAa,SAAC,GAAD,EAAGC,QAAH,IAAYc,EAAZ,EAAYA,OAAZ,MAAyB,CACjD,CACEb,OAAQ,IACRC,SAAU,MACVC,KAAM,SAAAC,GAAC,OACL,iBAAKC,UAAU,YAAf,WACE,mBAAQC,KAAK,SAASD,UAAU,gDAAgD,cAAY,WAA5F,UACE,iBAAMA,UAAU,UAAhB,gCAEF,gBAAKA,UAAU,gBAAgBE,KAAK,OAApC,UACE,SAAC,KAAD,CAAMF,UAAU,gBAAgBG,GAAE,UAAK3B,GAAL,OAAgBI,EAAoB6B,GAApC,YAA+CV,EAAEK,KAAKC,OAAxF,2BAIR,CAAET,OAAQ,OAAQC,SAAU,qBAC5B,CAAED,OAAQ,QAASC,SAAU,mBAkB/B,MACEjB,oBAAAA,EACAC,oBAAAA,EACAyB,cAAAA,EACAI,cAAAA,EACAC,cAAAA,EACA1B,qBAAAA,EACAsB,gBAlD6B,oBAmD7BrB,iBAAAA,EACAC,gBAAAA,EACAyB,gBAAAA,EACAJ,cAjD2B,iBAkD3BlB,cAAAA,EACAuB,cAAAA,EACAtB,eAAAA,EACAC,cAAAA,EACAC,OAAAA,EACAC,WAAAA,I,8KClEIoB,EAAmB,CACvBC,YAAazB,EAAAA,GACb0B,kBAAmBH,EAAAA,GACnBpB,OAAQA,EAAAA,IAGJwB,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAkFH,OAlFGA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,WAAAA,MACJ,SAAUC,EAAMC,EAAOlB,EAAMmB,EAAYC,EAASC,GAChD,OACE,iBAAKtB,UAAU,aAAf,WACE,kBAAOuB,QAASL,EAAhB,SAAuBC,KACvB,kBAAOlB,KAAMA,EAAMD,UAAU,eAAejB,GAAImC,EAAMM,YAAW,gBAAWL,GAASd,OAAOoB,EAAAA,EAAAA,GAAK,CAACX,EAAiBC,YAAaG,GAAOG,KAAYI,EAAAA,EAAAA,GAAK,CAACX,EAAiBC,YAAaG,GAAOE,IAAe,GAAIM,SAAU,SAAAC,GAAC,OAAIL,EAA4B,CAAEP,YAAaD,EAAiBC,YAAaa,UAAWV,EAAMW,WAAYF,EAAEG,OAAOzB,gBAGpV,oBAED,WACE,IAAQ0B,EAAUC,KAAKC,MAAfF,MAER,OACE,SAAC,IAAD,CACEG,UAAWtB,EAAAA,GACXuB,WAAY,CACV,CAAEhB,MAAO,UAAWiB,KAAM3D,EAAAA,EAAAA,aAC1B,CAAE0C,MAAOhC,EAAAA,GAAiBiD,MAAM9B,EAAAA,EAAAA,IAAcyB,EAAMM,OAAOC,KAAMC,UAAU,GAC3E,CAAEpB,MAAOP,EAAAA,GAAiBwB,KAAM,KAAMG,UAAU,IAElDC,mBAAoB5B,EAAAA,GACpB6B,gBAAc,EARhB,UAUE,gBAAKzC,UAAU,MAAf,UACE,gBAAKA,UAAU,YAAf,UACE,SAAC,KAAD,CACEjB,GAAIgD,EAAMM,OAAOC,IACjBI,YAAYpC,EAAAA,EAAAA,IAAcyB,EAAMM,OAAOC,KACvCK,UAAW/B,EAAAA,GACXE,iBAAkBA,EAClBlC,oBAAqBA,EAAAA,GACrBgE,MAAO,SAACtB,EAA6BF,EAAYC,GAgB/C,OACE,gBAAKrB,UAAU,MAAf,UACE,gBAAKA,UAAU,WAAf,UACE,gBAAKA,UAAU,aAAf,UACE,SAAC,KAAD,CACE6C,MAAM,OACN3B,KAAK,UACLnC,GAAG,UACH+D,WAAY,GACZC,gBAAiB,CACfhC,YAAaiC,EAAAA,GAAAA,eACbvD,OAAQuD,EAAAA,GAAAA,QAEVC,kBAAkB,MAClBC,kBAAkB,OAClBC,cAAc1B,EAAAA,EAAAA,GAAK,CAACX,EAAiBC,YAAa,WAAYM,KAAYI,EAAAA,EAAAA,GAAK,CAACX,EAAiBC,YAAa,WAAYK,IAAe,GACzIM,SAAU,SAAA0B,GAAG,OAAI9B,EAA4B,CAAEP,YAAaD,EAAiBC,YAAaa,UAAW,UAAWC,WAAYuB,0BAkBnJ,EAlFGnC,CAAaoC,EAAAA,WAoFnB,WAAeC,EAAAA,EAAAA,IAAWrC","sources":["Pages/TokoOnline/Manifest.js","Pages/TokoTeam/Manifest.js","Pages/TokoTeam/PageUpdate.js"],"sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport AppConfig from '../../core/Config/AppConfig'\nconst basePath = AppConfig.basePath\n\nconst entityName = AppConfig.appName\nconst entity = 'tokoonline'\nconst serviceEntity = 'TokoTokoOnline'\n\nexport const redirectAfterCreate = '/' + entity + '/detail'\nexport const redirectAfterDelete = '/' + entity\nexport const detailPageUrl = (id) => (`/${entity}/detail/${id}`)\nexport const upsertPageUrl = (id) => (`/${entity}/upsert${id ? '/' + id : ''}`)\nexport const listallPageUrl = () => (`/${entity}`)\nexport const createNewButtonLabel = 'Buat Baru'\nexport const createPageTitle = 'Buat Baru'\nexport const listallPageTitle = 'Daftar Toko'\nexport const detailPageTitle = 'Toko Detail'\nexport const upsertPageTitle = 'Form ' + entityName\nexport const upsertService = 'upsert' + serviceEntity\nexport const createService = 'create' + serviceEntity\nexport const detailService = 'getDetail' + serviceEntity\nexport const listallService = 'getAll' + serviceEntity + 's'\nexport const deleteService = 'delete' + serviceEntity\nexport const fields = '_id,name,pgateway_id{_id,title,keyid,mid,secretkey,configs},template,image_ids{_id, filename, filenameorigin, file_type},logo{_id, filename, filenameorigin, file_type},address,email,template,plink_merchant_secret_key,province,city,subcity,slug,plink_merchant_id,plink_merchant_key_id,status,website,facebook,instagram,youtube,description,created_at,updated_at,owner{_id,full_name,email},created_by{full_name},updated_by{full_name}'\nexport const getColumns = (history) => [\n  {\n    Header: ' ',\n    accessor: '_id',\n    Cell: p => (\n      <div className='btn-group'>\n        <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n          <span className='sr-only'>Toggle Dropdown</span>\n        </button>\n        <div className='dropdown-menu' role='menu'>\n          {/* <Link className='dropdown-item' to={upsertPageUrl(p.cell.value)}>Detail</Link> */}\n          <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate}/${p.cell.value}`}>Detail</Link>\n        </div>\n      </div>)\n  },\n  { Header: 'Nama', accessor: 'name' },\n  { Header: 'website', accessor: 'website' },\n  { Header: 'facebook', accessor: 'facebook' },\n  { Header: 'instagram', accessor: 'instagram' },\n  { Header: 'youtube', accessor: 'youtube' },\n  { Header: 'status', accessor: 'status' },\n  // {\n  //   Header: 'Tanggal Diperbaharui',\n  //   accessor: 'updated_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  { Header: 'Pemilik', accessor: 'owner.full_name' }\n//   { Header: 'updated by', accessor: 'updated_by.full_name' }\n  // { Header: 'created at', accessor: 'created_at' },\n  // { Header: 'updated at', accessor: 'updated_at' }\n]\n\nexport default {\n  redirectAfterCreate,\n  redirectAfterDelete,\n  detailPageUrl,\n  upsertPageUrl,\n  createNewButtonLabel,\n  createPageTitle,\n  listallPageTitle,\n  detailPageTitle,\n  upsertPageTitle,\n  createService,\n  detailService,\n  upsertService,\n  listallService,\n  deleteService,\n  fields,\n  getColumns,\n  listallPageUrl\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport AppConfig from '../../core/Config/AppConfig'\nconst basePath = AppConfig.basePath\n\nconst entityName = 'TokoTeam'\nconst entity = 'tokoteam'\nconst serviceEntity = 'TokoTeam'\n\nexport const redirectAfterCreate = (tokoId) => ('/' + entity + '/detail/' + tokoId)\nexport const redirectAfterDelete = (tokoId) => ('/tokoonline/detail/' + tokoId)\nexport const detailPageUrl = (id) => (`/${entity}/detail/${id}`)\nexport const updatePageUrl = (id) => (`/${entity}/update/${id}`)\nexport const createPageUrl = () => (`/${entity}/create`)\nexport const createNewButtonLabel = 'Create New ' + entityName\nexport const createPageTitle = 'Add a team member'\nexport const listallPageTitle = 'Toko Team'\nexport const detailPageTitle = entityName + ' Detail'\nexport const updatePageTitle = 'Update ' + entityName\nexport const updateService = 'update' + serviceEntity\nexport const createService = 'create' + serviceEntity\nexport const detailService = 'getDetail' + serviceEntity\nexport const listallService = 'getAll' + serviceEntity + 's'\nexport const deleteService = 'delete' + serviceEntity\nexport const fields = '_id,user_id{_id, full_name, email},toko_id{_id, name},role_id{_id, title},created_at,updated_at,created_by{full_name},updated_by{full_name}'\nexport const getColumns = ({ history, tokoId }) => [\n  {\n    Header: ' ',\n    accessor: '_id',\n    Cell: p => (\n      <div className='btn-group'>\n        <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n          <span className='sr-only'>Toggle Dropdown</span>\n        </button>\n        <div className='dropdown-menu' role='menu'>\n          <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate(tokoId)}/${p.cell.value}`}>Detail</Link>\n        </div>\n      </div>)\n  },\n  { Header: 'nama', accessor: 'user_id.full_name' },\n  { Header: 'email', accessor: 'user_id.email' }\n  // { Header: 'name', accessor: 'toko_id.name' },\n  // {\n  //   Header: 'updated_at',\n  //   accessor: 'updated_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  // { Header: 'created by', accessor: 'created_by.full_name' }\n//   { Header: 'updated by', accessor: 'updated_by.full_name' }\n  // { Header: 'created at', accessor: 'created_at' },\n  // { Header: 'updated at', accessor: 'updated_at' }\n]\n\nexport default {\n  redirectAfterCreate,\n  redirectAfterDelete,\n  detailPageUrl,\n  updatePageUrl,\n  createPageUrl,\n  createNewButtonLabel,\n  createPageTitle,\n  listallPageTitle,\n  detailPageTitle,\n  updatePageTitle,\n  createService,\n  detailService,\n  updateService,\n  listallService,\n  deleteService,\n  fields,\n  getColumns\n}\n","import React, { Component } from 'react'\nimport { Update as Updateform, Combobox } from '../../core/features/TablePagination'\nimport ContentWrapper from '../../core/Components/Layout/ContentWrapper'\nimport { injectIntl } from 'react-intl'\nimport { path } from 'ramda'\nimport AppConfig from '../../core/Config/AppConfig'\nimport TokoManifest from '../TokoOnline/Manifest'\nimport { updatePageTitle, detailPageTitle, detailPageUrl, redirectAfterCreate, fields, updateService, detailService } from './Manifest'\n\nconst paginationConfig = {\n  serviceName: detailService,\n  updateServiceName: updateService,\n  fields: fields\n}\n\nclass Comp extends Component {\n  addField (name, title, type, dataDetail, payload, tablepaginationOnChangeForm) {\n    return (\n      <div className='form-group'>\n        <label htmlFor={name}>{title}</label>\n        <input type={type} className='form-control' id={name} placeholder={`Enter ${title}`} value={path([paginationConfig.serviceName, name], payload) || path([paginationConfig.serviceName, name], dataDetail) || ''} onChange={e => tablepaginationOnChangeForm({ serviceName: paginationConfig.serviceName, fieldName: name, fieldValue: e.target.value })} />\n      </div>\n    )\n  }\n\n  render () {\n    const { match } = this.props\n\n    return (\n      <ContentWrapper\n        pageTitle={updatePageTitle}\n        breadcrumb={[\n          { title: 'Beranda', link: AppConfig.appHomePage },\n          { title: detailPageTitle, link: detailPageUrl(match.params._id), isActive: true },\n          { title: updatePageTitle, link: null, isActive: true }\n        ]}\n        contentHeaderTitle={updatePageTitle}\n        isNeedLoggedin\n      >\n        <div className='row'>\n          <div className='col-md-12'>\n            <Updateform\n              id={match.params._id}\n              cancelHref={detailPageUrl(match.params._id)}\n              formTitle={updatePageTitle}\n              paginationConfig={paginationConfig}\n              redirectAfterCreate={redirectAfterCreate}\n              child={(tablepaginationOnChangeForm, dataDetail, payload) => {\n                // console.log('haloooooooo===>', dataDetail)\n                // console.log('haloooooooo payload===>', payload)\n                // tablepaginationOnChangeFormFunc = tablepaginationOnChangeForm\n                // currentDataDetail = dataDetail\n                // if (startDate) startDate.value = path([paginationConfig.serviceName, 'start_date'], currentDataDetail)\n                // if (title) title.value = path([paginationConfig.serviceName, 'title'], payload) // || path([paginationConfig.serviceName, 'title'], currentDataDetail)\n\n                // tablepaginationOnChangeForm({ serviceName: paginationConfig.serviceName, fieldName: 'code', fieldValue: path([paginationConfig.serviceName, 'code'], dataDetail) || '' })\n                // let startDate = moment(path([paginationConfig.serviceName, 'start_date'], payload) || path([paginationConfig.serviceName, 'start_date'], dataDetail))\n                // if (startDate && startDate.isValid()) startDate = startDate.format('YYYY-MM-DD HH:mm:ss')\n                // else startDate = ''\n                // let endDate = moment(path([paginationConfig.serviceName, 'end_date'], payload) || path([paginationConfig.serviceName, 'end_date'], dataDetail))\n                // if (endDate && endDate.isValid()) endDate = endDate.format('YYYY-MM-DD HH:mm:ss')\n                // else endDate = ''\n\n                return (\n                  <div className='row'>\n                    <div className='col-sm-6'>\n                      <div className='form-group'>\n                        <Combobox\n                          label='Toko'\n                          name='toko_id'\n                          id='toko_id'\n                          maxOptions={50}\n                          fetchDataConfig={{\n                            serviceName: TokoManifest.listallService,\n                            fields: TokoManifest.fields\n                          }}\n                          optionColumnValue='_id'\n                          optionColumnLabel='name'\n                          defaultValue={path([paginationConfig.serviceName, 'toko_id'], payload) || path([paginationConfig.serviceName, 'toko_id'], dataDetail) || []}\n                          onChange={val => tablepaginationOnChangeForm({ serviceName: paginationConfig.serviceName, fieldName: 'toko_id', fieldValue: val })}\n                        />\n                      </div>\n                      {/* {this.addField('user', 'Name', 'text', dataDetail, payload, tablepaginationOnChangeForm)}\n                      {this.addField('website', 'Website', 'text', dataDetail, payload, tablepaginationOnChangeForm)}\n                      {this.addField('facebook', 'Facebook', 'text', dataDetail, payload, tablepaginationOnChangeForm)}\n                      {this.addField('instagram', 'Instagram', 'text', dataDetail, payload, tablepaginationOnChangeForm)}\n                      {this.addField('youtube', 'Youtube', 'text', dataDetail, payload, tablepaginationOnChangeForm)}\n                      {this.addField('description', 'Description', 'text', dataDetail, payload, tablepaginationOnChangeForm)} */}\n                    </div>\n                  </div>\n                )\n              }}\n            />\n          </div>\n        </div>\n      </ContentWrapper>\n    )\n  }\n}\nexport default injectIntl(Comp)\n"],"names":["basePath","AppConfig","entityName","entity","redirectAfterCreate","redirectAfterDelete","upsertPageUrl","id","listallPageUrl","createNewButtonLabel","listallPageTitle","detailPageTitle","upsertPageTitle","upsertService","detailService","listallService","deleteService","fields","getColumns","history","Header","accessor","Cell","p","className","type","role","to","cell","value","detailPageUrl","createPageTitle","createService","tokoId","updatePageUrl","createPageUrl","updatePageTitle","updateService","paginationConfig","serviceName","updateServiceName","Comp","name","title","dataDetail","payload","tablepaginationOnChangeForm","htmlFor","placeholder","path","onChange","e","fieldName","fieldValue","target","match","this","props","pageTitle","breadcrumb","link","params","_id","isActive","contentHeaderTitle","isNeedLoggedin","cancelHref","formTitle","child","label","maxOptions","fetchDataConfig","TokoManifest","optionColumnValue","optionColumnLabel","defaultValue","val","Component","injectIntl"],"sourceRoot":""}