{"version":3,"file":"static/js/7581.68c96883.chunk.js","mappings":"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","sources":["Pages/Product/Manifest.js","Pages/TokoInventory/Manifest.js","Pages/TokoInventory/PageList.js"],"sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport _ from 'lodash'\nimport AppConfig from '../../core/Config/AppConfig'\nconst basePath = AppConfig.basePath\n\nconst entityName = 'Product'\nconst entity = 'product'\nconst serviceEntity = 'TokoProduct'\n\nexport const redirectAfterCreate = '/' + entity + '/detail'\nexport const redirectAfterDelete = '/' + entity\nexport const detailPageUrl = (id) => (`/${entity}/detail/${id}`)\nexport const upsertPageUrl = (id) => (`/${entity}/upsert${id ? '/' + id : ''}`)\nexport const listallPageUrl = () => (`/${entity}`)\n\nexport const createNewButtonLabel = 'Buat Baru'\nexport const createPageTitle = 'Buat Baru'\nexport const listallPageTitle = entityName + 's'\nexport const detailPageTitle = entityName + ' Detail'\nexport const upsertPageTitle = 'Form ' + entityName\nexport const upsertService = 'upsert' + serviceEntity\nexport const createService = 'create' + serviceEntity\nexport const detailService = 'getDetail' + serviceEntity\nexport const listallService = 'getAll' + serviceEntity + 's'\nexport const deleteService = 'delete' + serviceEntity\nexport const fields = '_id,content1,estimated_delivery_unit_time_instock,estimated_delivery_unit_time_preorder,estimated_delivery_time_instock,estimated_delivery_time_preorder,instock_label,preorder_policy,product_availability,stock_amount,weight,isneed_shipping,name,code,description,price,tag_id{_id, name},toko_id{_id, name},category_id{_id, title},image_id{_id, filename, filenameorigin, file_type},image_ids{_id, filename, filenameorigin, file_type},created_at,updated_at,created_by{full_name},updated_by{full_name}'\nexport const getColumns = (history) => [\n  {\n    Header: ' ',\n    accessor: '_id',\n    Cell: p => (\n      <div className='btn-group'>\n        <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n          <span className='sr-only'>Toggle Dropdown</span>\n        </button>\n        <div className='dropdown-menu' role='menu'>\n          <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate}/${p.cell.value}`}>Detail</Link>\n        </div>\n      </div>)\n  },\n  { Header: 'Nama', accessor: 'name' },\n  { Header: 'Kode', accessor: 'code' },\n  { Header: 'Harga', accessor: 'price' },\n  { Header: 'Kategori', accessor: p => (<span>{(_.map(p.category_id, v => v.title) || []).join(', ')}</span>) },\n  { Header: 'Toko', accessor: p => (<span>{(_.map(p.toko_id, v => v.name) || []).join(', ')}</span>) },\n  // { Header: 'Gambar', accessor: p => (<span>{(p.image_id || {}).filename}.{(p.image_id || {}).file_type}</span>) },\n  //   {\n  //     Header: 'created_at',\n  //     accessor: 'created_at',\n  //     Cell: d => {\n  //       let data = Moment(d.cell.value)\n  //       if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //       else data = ''\n  //       return (<span>{`${data}`}</span>)\n  //     }\n  //   },\n  // {\n  //   Header: 'Tanggal Diperbaharui',\n  //   accessor: 'updated_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  { Header: 'Dibuat Oleh', accessor: 'created_by.full_name' }\n//   { Header: 'updated by', accessor: 'updated_by.full_name' }\n  // { Header: 'created at', accessor: 'created_at' },\n  // { Header: 'updated at', accessor: 'updated_at' }\n]\n\nexport default {\n  redirectAfterCreate,\n  redirectAfterDelete,\n  detailPageUrl,\n  upsertPageUrl,\n  createNewButtonLabel,\n  createPageTitle,\n  listallPageTitle,\n  detailPageTitle,\n  upsertPageTitle,\n  createService,\n  detailService,\n  upsertService,\n  listallService,\n  deleteService,\n  fields,\n  getColumns,\n  listallPageUrl\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst entityName = 'TokoProductVariation'\nconst entity = 'tokoproductvariation'\nconst serviceEntity = 'TokoProductVariation'\n\nexport const redirectAfterCreate = '/inventory/detail'\nexport const redirectAfterDelete = '/' + entity\nexport const detailPageUrl = (id) => (`/inventory/detail/${id}`)\nexport const updatePageUrl = (id) => (`/${entity}/update/${id}`)\nexport const createPageUrl = () => (`/${entity}/create`)\nexport const createNewButtonLabel = 'Create New ' + entityName\nexport const createPageTitle = 'Create New ' + entityName\nexport const listallPageTitle = 'Data Inventaris'\nexport const detailPageTitle = 'Data Detail Inventaris'\nexport const updatePageTitle = 'Update ' + entityName\nexport const updateService = 'update' + serviceEntity\nexport const createService = 'create' + serviceEntity\nexport const detailService = 'getDetail' + serviceEntity\nexport const listallService = 'getAllTokoProductVariations'\nexport const deleteService = 'delete' + serviceEntity\nexport const fields = '_id,sku,product_id{_id,name,product_availability,preorder_policy,code,image_id{filename,file_type}},inventories{_id,quantity,created_at,updated_at,created_by{full_name},updated_by{full_name}},created_at,updated_at,created_by{full_name},updated_by{full_name}'\nexport const getColumns = ({ history, stateParams, formUpdateStock, submitUpdateStock, productUpdatePageUrl }) => [\n  // {\n  //   Header: 'Act',\n  //   accessor: '_id',\n  //   Cell: p => (\n  //     <div className='btn-group'>\n  //       <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n  //         <span className='sr-only'>Toggle Dropdown</span>\n  //       </button>\n  //       <div className='dropdown-menu' role='menu'>\n  //         <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate}/${p.cell.value}`}>Detail</Link>\n  //       </div>\n  //     </div>)\n  // },\n  {\n    Header: ' ',\n    accessor: p => (\n      <div className='btn-group'>\n        <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n          <span className='sr-only'>Toggle Dropdown</span>\n        </button>\n        <div className='dropdown-menu' role='menu'>\n          <Link className='dropdown-item' to={`${productUpdatePageUrl(p.product_id._id)}`}>Ubah Produk</Link>\n        </div>\n      </div>)\n    // Cell: p => (\n    //   <div className='input-group mb-3'>\n    //     <input type='text' className='form-control rounded-0' />\n    //     <span className='input-group-append'>\n    //       <button type='button' className='btn btn-info btn-flat'>Simpan</button>\n    //     </span>\n    //   </div>\n    // )\n  },\n  { Header: 'Kode Produk', accessor: 'product_id.code' },\n  { Header: 'Nama Produk', accessor: 'product_id.name' },\n  {\n    Header: 'Status produk jika stok habis',\n    accessor: p => {\n      const v = (p.product_id || {}).preorder_policy\n      return v === 'unavailable' ? 'Habis' : v\n    }\n  },\n  // {\n  //   Header: 'Stok',\n  //   accessor: p => {\n  //     return <span>{(formUpdateStock.stateStockProduct || {})['' + p.inventories[0]._id]}</span>\n  //   }\n  // },\n  {\n    Header: 'Ubah Stok',\n    accessor: p => formUpdateStock({ dataDetail: p, stateParams, submitUpdateStock })\n    // Cell: p => (\n    //   <div className='input-group mb-3'>\n    //     <input type='text' className='form-control rounded-0' />\n    //     <span className='input-group-append'>\n    //       <button type='button' className='btn btn-info btn-flat'>Simpan</button>\n    //     </span>\n    //   </div>\n    // )\n  }\n\n  // { Header: 'Nama Lengkap', accessor: 'full_name' },\n  // { Header: 'No Telepon', accessor: 'phone_number' },\n  // { Header: 'Email', accessor: 'email' },\n  // { Header: 'Total Pembayaran', accessor: 'total_amount' },\n  // { Header: 'ID Sesi', accessor: 'session_id' },\n  // { Header: 'Kode Invoice', accessor: 'invoice_code' },\n//   { Header: 'category', accessor: p => (<span>{(_.map(p.category_id, v => v.title) || []).join(', ')}</span>) },\n//   { Header: 'toko', accessor: p => (<span>{(_.map(p.toko_id, v => v.name) || []).join(', ')}</span>) },\n// { Header: 'picture', accessor: p => (<span>{p.image_id.filename}.{p.image_id.file_type}</span>) },\n//   {\n//     Header: 'created_at',\n//     accessor: 'created_at',\n//     Cell: d => {\n//       let data = Moment(d.cell.value)\n//       if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n//       else data = ''\n//       return (<span>{`${data}`}</span>)\n//     }\n//   },\n  // {\n  //   Header: 'Tanggal Transaksi',\n  //   accessor: 'updated_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  // { Header: 'created by', accessor: 'created_by.full_name' }\n//   { Header: 'updated by', accessor: 'updated_by.full_name' }\n  // { Header: 'created at', accessor: 'created_at' },\n  // { Header: 'updated at', accessor: 'updated_at' }\n]\n","import React from 'react'\nimport { path } from 'ramda'\nimport ContentWrapper from '../../core/Components/Layout/ContentWrapper'\nimport { Table } from '../../core/features/TablePagination'\nimport AppConfig from '../../core/Config/AppConfig'\nimport { listallService, fields, listallPageTitle, createNewButtonLabel, getColumns } from './Manifest'\nimport ProductManifest from '../Product/Manifest'\nimport Loader from '../../core/Components/Loader/Loader'\n\nimport { generateHmac, getAccessToken, callErrorToast } from '../../core/Utils/Utils'\n\nfunction formUpdateStock ({ dataDetail, stateParams: { stateStockProduct, setStateStockProduct, stateLoadingUpdateStock }, submitUpdateStock }) {\n  const p = dataDetail\n  const inventoryId = p.inventories[0]._id\n  return (\n    <div className='input-group mb-0'>\n      <input\n        id={`stock_field_${inventoryId}`} type='number' className='form-control rounded-0' value={(() => {\n          if (stateStockProduct['' + inventoryId] === undefined) return p.inventories[0].quantity\n          return stateStockProduct['' + inventoryId]\n        })()} onChange={(e) => setStateStockProduct({ ...stateStockProduct, ['' + inventoryId]: parseInt(e.target.value) })}\n      />\n      <span className='input-group-append'>\n        {(() => {\n          let isButtonDisabled = false\n          if (stateStockProduct['' + inventoryId] === undefined || (stateStockProduct['' + inventoryId] === p.inventories[0].quantity)) isButtonDisabled = true\n          if (stateLoadingUpdateStock['' + inventoryId]) {\n            return (\n              <button type='button' className='btn btn-info btn-flat' onClick={() => {}}>\n                <Loader size={15} loading type='rpmerah' />\n              </button>\n            )\n          }\n          return (\n            <button type='button' className='btn btn-info btn-flat' disabled={isButtonDisabled} onClick={() => submitUpdateStock({ value: stateStockProduct['' + inventoryId], id: inventoryId })}>\n              Simpan\n            </button>\n          )\n        })()}\n      </span>\n    </div>\n  )\n}\n\nfunction Comp (props) {\n  const [stateStockProduct, setStateStockProduct] = React.useState({})\n  const [stateLoadingUpdateStock, setStateLoadingUpdateStock] = React.useState({})\n  const stateParams = { stateStockProduct, setStateStockProduct, stateLoadingUpdateStock, setStateLoadingUpdateStock }\n  // const paginationConfig = {\n  //   serviceName: listallService,\n  //   fields: fields\n  // }\n\n  const submitUpdateStock = ({ value, id }) => {\n    console.log('submitUpdateStock===>', value)\n    console.log('submitUpdateStock id===>', id)\n    setStateLoadingUpdateStock({ ...stateLoadingUpdateStock, ['' + id]: true })\n    const graphqlData = `\n    mutation{\n      updateTokoInventory(_id: \"${id}\",  quantity: ${value}) {\n        error\n        status\n      }\n    }\n    `\n    // const graphqlData = `mutation{updateTokoInventory(_id: \"${id}\", quantity: 5){error,status})}`\n    const bodyQueryString = JSON.stringify({ query: graphqlData })\n    console.log('bodyQueryString=====>', bodyQueryString)\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json', hmac: generateHmac(bodyQueryString), AccessToken: getAccessToken() },\n      body: bodyQueryString\n    }\n    fetch(AppConfig.hostBackend + AppConfig.graphqlPath, requestOptions)\n      .then(response => response.json())\n      .then(response => {\n        // console.log('response updateTokoInventory===>', response.data.updateTokoInventory.status)\n        const status = path(['data', 'updateTokoInventory', 'status'], response)\n        setStateLoadingUpdateStock({ ...stateLoadingUpdateStock, ['' + id]: false })\n        if (status === 200) callErrorToast('success', 'success')\n        else callErrorToast('rubah stok gagal', 'error')\n        // response.json()\n        // return response.data.getAllTokoCartsBySessionId\n\n        // callErrorToast(element.message, 'error')\n        // callErrorToast('success', 'success')\n      })\n  }\n  console.log('renderrrrr table')\n  const columns = getColumns({ history: props.history, stateParams, formUpdateStock, submitUpdateStock, productUpdatePageUrl: ProductManifest.upsertPageUrl })\n  return (\n    <ContentWrapper\n      pageTitle={listallPageTitle}\n      breadcrumb={[{ title: 'Beranda', link: AppConfig.appHomePage }, { title: listallPageTitle, link: null, isActive: true }]}\n      contentHeaderTitle={listallPageTitle}\n      isNeedLoggedin\n    >\n      <div className='row'>\n        <div className='col-md-12'>\n          <Table\n            listallServiceName={listallService}\n            fields={fields}\n            columns={columns}\n            // createHref={upsertPageUrl()}\n            createNewButtonLabel={createNewButtonLabel}\n            cardTitle={listallPageTitle}\n          />\n        </div>\n      </div>\n    </ContentWrapper>\n  )\n  // }\n}\nexport default Comp\n"],"names":["basePath","AppConfig","entity","redirectAfterCreate","redirectAfterDelete","upsertPageUrl","id","listallPageUrl","createNewButtonLabel","listallPageTitle","entityName","detailPageTitle","upsertPageTitle","upsertService","detailService","listallService","deleteService","fields","getColumns","history","Header","accessor","Cell","p","className","type","role","to","cell","value","_","category_id","v","title","join","toko_id","name","detailPageUrl","createPageTitle","createService","serviceEntity","updatePageUrl","stateParams","formUpdateStock","submitUpdateStock","productUpdatePageUrl","product_id","_id","preorder_policy","dataDetail","stateStockProduct","setStateStockProduct","stateLoadingUpdateStock","inventoryId","inventories","undefined","quantity","onChange","e","parseInt","target","isButtonDisabled","onClick","size","loading","disabled","props","React","setStateLoadingUpdateStock","console","log","columns","graphqlData","bodyQueryString","JSON","stringify","query","requestOptions","method","headers","hmac","generateHmac","AccessToken","getAccessToken","body","fetch","then","response","json","status","path","callErrorToast","ProductManifest","pageTitle","breadcrumb","link","isActive","contentHeaderTitle","isNeedLoggedin","listallServiceName","cardTitle"],"sourceRoot":""}