{"version":3,"file":"static/js/4085.e072c782.chunk.js","mappings":"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","sources":["Pages/Pgateway/Manifest.js","Pages/Pgateway/PageUpdate.js","features/TextEditor/components/FieldTextArea.js"],"sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n// import _ from 'lodash'\nimport AppConfig from '../../core/Config/AppConfig'\nconst basePath = AppConfig.basePath\n\nconst entityName = 'Pgateway'\nconst entity = 'pgateway'\nconst serviceEntity = 'Pgateway'\n\nexport const redirectAfterCreate = '/' + entity + '/detail'\nexport const redirectAfterDelete = '/' + entity\nexport const detailPageUrl = (id) => (`/${entity}/detail/${id}`)\nexport const upsertPageUrl = (id) => (`/${entity}/upsert${id ? '/' + id : ''}`)\nexport const listallPageUrl = () => (`/${entity}`)\nexport const createNewButtonLabel = 'Buat Pgateway Baru'\nexport const createPageTitle = 'Buat Pgateway'\nexport const listallPageTitle = 'Pgateway'\nexport const detailPageTitle = 'Detail Pgateway'\nexport const upsertPageTitle = 'Form ' + entityName\n// export const createService = 'create' + serviceEntity\nexport const detailService = 'getDetail' + serviceEntity\n// export const updateService = 'update' + serviceEntity\nexport const upsertService = 'upsert' + serviceEntity\nexport const listallService = 'getAll' + serviceEntity + 's'\nexport const deleteService = 'delete' + serviceEntity\nexport const fields = '_id,backendCallbackUrl,frontendCallbackUrl,description,title,pgcode,keyid,mid,secretkey,configs,created_at,updated_at,created_by{full_name},updated_by{full_name}'\nexport const getColumns = (history) => [\n  {\n    Header: ' ',\n    accessor: '_id',\n    Cell: p => (\n      <div className='btn-group'>\n        <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n          <span className='sr-only'>Toggle Dropdown</span>\n        </button>\n        <div className='dropdown-menu' role='menu'>\n          <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate}/${p.cell.value}`}>Detail</Link>\n        </div>\n      </div>)\n  },\n  { Header: 'Title', accessor: 'title' },\n  { Header: 'pgcode', accessor: 'pgcode' },\n  { Header: 'keyid', accessor: 'keyid' },\n  { Header: 'mid', accessor: 'mid' },\n  { Header: 'secretkey', accessor: 'secretkey' },\n  { Header: 'configs', accessor: 'configs' }\n  // {\n  //   Header: 'Tanggal Dibuat',\n  //   accessor: 'created_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  // {\n  //   Header: 'Tanggal Dirubah',\n  //   accessor: 'updated_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  // { Header: 'Dibuat Oleh', accessor: 'created_by.full_name' },\n  // { Header: 'Dirubah Oleh', accessor: 'updated_by.full_name' }\n  // { Header: 'created at', accessor: 'created_at' },\n  // { Header: 'updated at', accessor: 'updated_at' }\n]\nexport default {\n  redirectAfterCreate,\n  redirectAfterDelete,\n  detailPageUrl,\n  upsertPageUrl,\n  // createPageUrl,\n  createNewButtonLabel,\n  createPageTitle,\n  listallPageTitle,\n  detailPageTitle,\n  // updatePageTitle,\n  // createService,\n  detailService,\n  // updateService,\n  listallService,\n  deleteService,\n  upsertService,\n  fields,\n  getColumns,\n  listallPageUrl\n}\n","import React from 'react'\nimport { Detail, CardWrapperCon } from '../../core/features/TablePagination'\nimport { FieldTextArea } from '../../features/TextEditor/components'\nimport ContentWrapper from '../../core/Components/Layout/ContentWrapper'\nimport { injectIntl } from 'react-intl'\nimport AppConfig from '../../core/Config/AppConfig'\nimport { upsertPageTitle, listallPageUrl, listallPageTitle, upsertService, fields, detailService, redirectAfterDelete } from './Manifest'\n\nconst FormUpdate = (props) => {\n  const {\n    tablepaginationOnChangeForm,\n    dataDetail,\n    payload,\n    upsertServiceName,\n    id,\n    tablepaginationResetForm,\n    formTitle\n  } = props\n  // useMemo(() => tablepaginationResetForm({ serviceName: upsertServiceName, defaultFormValue: { _id: id } }), [])\n  React.useEffect(() => {\n    const defaultFormValue = {}\n    if (id) defaultFormValue._id = id\n    tablepaginationResetForm({ isInitialReset: true, serviceName: upsertServiceName, defaultFormValue })\n    // if (id) tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: '_id', fieldValue: id, resetValue: id })\n  }, [tablepaginationResetForm, upsertServiceName, id])\n  // if (dataDetail) {\n  //   tablepaginationResetForm({ serviceName: upsertServiceName, defaultFormValue: { _id: id } })\n  // }\n  // if (dataDetail) {\n  // useMemo(() => {\n  //   return tablepaginationResetForm({ serviceName: upsertServiceName, defaultFormValue: { _id: dataDetail._id } })\n  // }, [upsertServiceName, tablepaginationResetForm, dataDetail])\n  // }\n  // const [payloadValueOriginal, setPayloadValueOriginal] = React.useState([])\n  console.log('payloadpayloadpayload===>', payload.title)\n  console.log('payloadpayloadpayload===>', dataDetail.title)\n  return (\n    <div className='row'>\n      <div className='col-sm-6'>\n        <CardWrapperCon formTitle={formTitle}>\n          <div className='form-group'>\n            <label htmlFor='title'>Judul PGateway</label>\n            <input type='text' className='form-control' id='title' placeholder='Masukkan judul' value={typeof payload.title !== 'undefined' ? payload.title : dataDetail.title || ''} onChange={e => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'title', fieldValue: e.target.value })} />\n          </div>\n          <div className='form-group'>\n            <label htmlFor='pgcode'>pgcode</label>\n            <input type='text' className='form-control' id='pgcode' placeholder='' value={typeof payload.pgcode !== 'undefined' ? payload.pgcode : dataDetail.pgcode || ''} onChange={e => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'pgcode', fieldValue: e.target.value })} />\n          </div>\n          <div className='form-group'>\n            <label htmlFor='keyid'>keyid</label>\n            <input type='text' className='form-control' id='keyid' placeholder='' value={typeof payload.keyid !== 'undefined' ? payload.keyid : dataDetail.keyid || ''} onChange={e => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'keyid', fieldValue: e.target.value })} />\n          </div>\n          <div className='form-group'>\n            <label htmlFor='mid'>mid</label>\n            <input type='text' className='form-control' id='mid' placeholder='' value={typeof payload.mid !== 'undefined' ? payload.mid : dataDetail.mid || ''} onChange={e => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'mid', fieldValue: e.target.value })} />\n          </div>\n          <div className='form-group'>\n            <label htmlFor='secretkey'>secretkey</label>\n            <input type='text' className='form-control' id='secretkey' placeholder='' value={typeof payload.secretkey !== 'undefined' ? payload.secretkey : dataDetail.secretkey || ''} onChange={e => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'secretkey', fieldValue: e.target.value })} />\n          </div>\n          <div className='form-group'>\n            <label htmlFor='backendCallbackUrl'>backendCallbackUrl</label>\n            <input type='text' className='form-control' id='backendCallbackUrl' placeholder='' value={typeof payload.backendCallbackUrl !== 'undefined' ? payload.backendCallbackUrl : dataDetail.backendCallbackUrl || ''} onChange={e => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'backendCallbackUrl', fieldValue: e.target.value })} />\n          </div>\n          <div className='form-group'>\n            <label htmlFor='frontendCallbackUrl'>frontendCallbackUrl</label>\n            <input type='text' className='form-control' id='frontendCallbackUrl' placeholder='' value={typeof payload.frontendCallbackUrl !== 'undefined' ? payload.frontendCallbackUrl : dataDetail.frontendCallbackUrl || ''} onChange={e => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'frontendCallbackUrl', fieldValue: e.target.value })} />\n          </div>\n          <div className='form-group'>\n            <label htmlFor='configs'>configs</label>\n            <FieldTextArea placeholder='Konfigurasi dalam bentuk json string' forProcess={typeof id !== 'undefined' ? 'update' : 'create'} dataId={id} defaultValue={typeof payload.configs !== 'undefined' ? payload.configs : dataDetail.configs} onChange={(v) => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'configs', fieldValue: v })} idElement='configs' />\n          </div>\n          <div className='form-group'>\n            <label htmlFor='description'>description</label>\n            <FieldTextArea forProcess={typeof id !== 'undefined' ? 'update' : 'create'} dataId={id} defaultValue={typeof payload.description !== 'undefined' ? payload.description : dataDetail.description} onChange={(v) => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'description', fieldValue: v })} idElement='description' />\n          </div>\n        </CardWrapperCon>\n      </div>\n    </div>\n  )\n}\nfunction Comp (props) {\n  console.log('raysaaaaaaaa')\n  const { match } = props\n  return (\n    <ContentWrapper\n      pageTitle={upsertPageTitle}\n      breadcrumb={[\n        { title: 'Beranda', link: AppConfig.appHomePage },\n        { title: listallPageTitle, link: listallPageUrl() },\n        { title: upsertPageTitle, link: null, isActive: true }\n      ]}\n      contentHeaderTitle={upsertPageTitle}\n      isNeedLoggedin\n    >\n      <div className='row'>\n        <div className='col-md-12'>\n          <Detail\n            detailServiceName={detailService}\n            upsertServiceName={upsertService}\n            fields={fields}\n            id={match.params._id}\n            formTitle={upsertPageTitle}\n            redirectAfterDelete={redirectAfterDelete}\n            withoutWrapper\n          >\n            <FormUpdate formTitle={upsertPageTitle} />\n          </Detail>\n        </div>\n      </div>\n    </ContentWrapper>\n  )\n}\nexport default injectIntl(Comp)\n","import React, { useEffect } from 'react'\n// import _ from 'lodash'\nimport AppConfig from '../../../core/Config/AppConfig'\nimport { getAccessToken } from '../../../core/Utils/Utils'\n\nfunction FieldTextArea (props) {\n  const { placeholder, textEditor, defaultValue, initValue, onChange, idElement, dataId } = props\n  // const [isFirstLoad, setIsFirstLoad] = React.useState(undefined)\n  useEffect(() => {\n    console.log('valuevaluevalue initValue=>', initValue)\n    console.log('valuevaluevalue id=>', dataId)\n    if (textEditor) {\n      let isReset = false\n      // if (initValue === defaultValue && ) {\n      //   isReset = true\n      // }\n      // setCurrentValue(defaultValue)\n      if (typeof dataId !== 'undefined' && typeof defaultValue !== 'undefined') {\n        console.log('valuevaluevalue reloadddd=>', defaultValue)\n        window.activateEditorV2({\n          idElement,\n          hostBackend: AppConfig.hostBackend,\n          at: getAccessToken(),\n          cb: (content) => {\n            onChange(content)\n          },\n          isReset,\n          defaultValue\n        })\n      }\n      if (typeof dataId === 'undefined') {\n        window.activateEditorV2({\n          idElement,\n          hostBackend: AppConfig.hostBackend,\n          at: getAccessToken(),\n          cb: (content) => {\n            onChange(content)\n          },\n          isReset,\n          defaultValue\n        })\n      }\n    }\n    // setIsFirstLoad(false)\n  // })\n  }, [defaultValue, dataId, idElement, onChange, textEditor, initValue])\n\n  // if (forProcess === 'update' && _.isEmpty(dataId)) return null\n  // if (forProcess === 'update' && (dataId === 'undefined' || _.isEmpty(dataId))) return null\n  // if (forProcess === 'update' && dataId === '') return null\n\n  if (typeof dataId !== 'undefined' && !dataId) return null\n\n  // console.log('FieldTextAreaFieldTextAreaFieldTextAreaFieldTextArea dataId=>', dataId)\n  // console.log('FieldTextAreaFieldTextAreaFieldTextAreaFieldTextArea defaultValue=>', defaultValue)\n  // console.log('FieldTextAreaFieldTextAreaFieldTextAreaFieldTextArea forProcess=>', forProcess)\n  // console.log('FieldTextAreaFieldTextAreaFieldTextAreaFieldTextArea renderrrr=>')\n  return (\n    <div className='row'>\n      <div className='col-12'>\n        <div style={{ position: 'relative' }}>\n          {textEditor && <div style={{ backgroundColor: 'black', position: 'absolute', width: '100%', height: '100%', top: 0 }}><center><span style={{ color: 'green', fontSize: 30, marginTop: 200 }}>Gambar sedang diupload...</span></center></div>}\n          <div id='texareaWrapper' style={{ width: '100%', height: '100%', backgroundColor: 'black', opacity: 1 }}>\n            <textarea className='textarea' id={idElement} placeholder={placeholder || 'Isi keterangan'} value={defaultValue} style={{ width: '100%' }} onChange={(e) => onChange(e.target.value)} />\n          </div>\n        </div>\n      </div>\n    </div>\n    // <textarea className='textarea' id={idElement} placeholder='Place some text here' style={{ width: '100%', height: 200, fontSize: 14, lineHeight: 18, border: '1px solid #dddddd', padding: 10 }} value={defaultValue} onChange={(e) => onChange(e.target.value)} />\n  )\n}\nexport default FieldTextArea\n"],"names":["basePath","AppConfig","entity","redirectAfterCreate","redirectAfterDelete","upsertPageUrl","id","listallPageUrl","createNewButtonLabel","listallPageTitle","detailPageTitle","upsertPageTitle","detailService","upsertService","listallService","deleteService","fields","getColumns","history","Header","accessor","Cell","p","className","type","role","to","cell","value","detailPageUrl","createPageTitle","FormUpdate","props","tablepaginationOnChangeForm","dataDetail","payload","upsertServiceName","tablepaginationResetForm","formTitle","React","defaultFormValue","_id","isInitialReset","serviceName","console","log","title","htmlFor","placeholder","onChange","e","fieldName","fieldValue","target","pgcode","keyid","mid","secretkey","backendCallbackUrl","frontendCallbackUrl","forProcess","dataId","defaultValue","configs","v","idElement","description","injectIntl","match","pageTitle","breadcrumb","link","isActive","contentHeaderTitle","isNeedLoggedin","detailServiceName","params","withoutWrapper","textEditor","initValue","useEffect","window","activateEditorV2","hostBackend","at","getAccessToken","cb","content","isReset","style","position","backgroundColor","width","height","top","color","fontSize","marginTop","opacity"],"sourceRoot":""}