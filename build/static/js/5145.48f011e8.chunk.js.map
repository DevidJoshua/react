{"version":3,"file":"static/js/5145.48f011e8.chunk.js","mappings":"0MAMe,SAASA,EAAeC,GAcjCA,EAZFC,gBADF,IAEEC,EAWEF,EAXFE,SAKAC,GAMEH,EAVFI,YAUEJ,EATFK,aASEL,EARFM,SAQEN,EAPFO,UAOEP,EANFG,WAEAK,GAIER,EALFS,YAKET,EAJFQ,UACAE,EAGEV,EAHFU,YAEAC,GACEX,EAFFY,aAEEZ,EADFW,OAUF,OACE,SAAC,IAAD,CACEE,mBAAoB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,CAAEC,MAAO,MAAOC,OAAQ,IACjEC,QAAS,EACTL,MAAOA,EACPM,YAAaT,EACbU,KAAMf,EAONgB,aArBqB,SAACC,EAAOC,GAE/BnB,EAASmB,IAoBPC,oBAlB4B,SAACC,GAC/Bb,EAAYc,OAAOD,EAAEE,OAAOV,QAC5Bb,EAAS,Q,iGCwCb,UA7Dc,SAACF,GACb,IAAI0B,GAAUC,EAAAA,EAAAA,MAEZC,EAsBE5B,EAtBF4B,QACAC,EAqBE7B,EArBF6B,WACAC,EAoBE9B,EApBF8B,qBACAC,EAmBE/B,EAnBF+B,eACAC,EAkBEhC,EAlBFgC,WACAC,EAiBEjC,EAjBFiC,WACAC,EAgBElC,EAhBFkC,UAEAC,EAcEnC,EAdFmC,mBACAC,EAaEpC,EAbFoC,eACAC,EAYErC,EAZFqC,SACAC,EAWEtC,EAXFsC,mBACAC,EAUEvC,EAVFuC,OACAC,EASExC,EATFwC,SACAC,EAQEzC,EARFyC,iBACAC,EAOE1C,EAPF0C,gBACAC,EAME3C,EANF2C,WACAC,EAKE5C,EALF4C,UACAC,EAIE7C,EAJF6C,aACAC,EAGE9C,EAHF8C,QACAC,EAEE/C,EAFF+C,mBACAC,EACEhD,EADFgD,cAIF,OACE,+BACE,UAAC,KAAD,CACEJ,YAAaA,EACbK,UAAWf,EACXC,qBAAsBA,EACtBC,eAAgBA,EAChBc,YAAaZ,EACbG,iBAAkBA,EAClBC,gBAAiBA,EACjBI,QAASA,EARX,WAUKb,GAAcJ,IAAgB,oBAAQsB,MAAO,CAAEC,YAAa,GAAKC,KAAK,SAASC,UAAU,eAAeC,QAAS,kBAAM7B,EAAQ8B,KAAK3B,IAAtG,WAAmH,cAAGyB,UAAU,gBAAhI,KAAiJ,SAAC,IAAD,CAAGG,GAAE,UAAK3B,GAAwB,mBACnNE,GAAcA,KACf,SAAC,UAAD,CACEgB,cAAeA,EACfD,mBAAoBA,EACpBnB,QAASA,EACTU,mBAAoBA,EACpBC,OAAQA,EACRb,QAASA,EACTK,eAAgBA,EAChBM,SAAUA,EACVM,WAAYA,EACZE,aAAcA,EACdC,QAASA,EAXX,SAaGN,GAAYA,W,2OClDFkB,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAiGlB,OAjGkBA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,SAAAA,MACnB,WACE,MAqBIC,KAAK3D,MApBP4D,EADF,EACEA,QACAC,EAFF,EAEEA,OACAC,EAHF,EAGEA,KACAC,EAJF,EAIEA,aACAC,EALF,EAKEA,cACAC,EANF,EAMEA,kBACA/C,EAPF,EAOEA,KACAgD,EARF,EAQEA,WACAjE,EATF,EASEA,gBACAG,EAVF,EAUEA,YACAD,EAXF,EAWEA,UACAM,EAZF,EAYEA,YACAP,EAbF,EAaEA,SACAK,EAdF,EAcEA,UACAF,EAfF,EAeEA,aACAC,EAhBF,EAgBEA,SACAE,EAjBF,EAiBEA,SACAE,EAlBF,EAkBEA,YACA8B,EAnBF,EAmBEA,SACA7B,EApBF,EAoBEA,MAGIwD,EAAoBC,EAAAA,SAAAA,IAAmB5B,GAAU,SAAA6B,GAErD,OAAID,EAAAA,eAAqBC,GAChBD,EAAAA,aAAmBC,EAAO,CAC/BN,aAAAA,EACAC,cAAAA,EACAC,kBAAAA,EACA/C,KAAAA,EACAgD,WAAAA,IAGGG,KAGT,OACE,iCACI7B,IACA,iCACE,UAAC,IAAD,CAAgB8B,UAAWC,EAAAA,EAA3B,WACIX,GAAWC,IAAU,gBAAKW,MAAM,qBAAqBC,KAAK,QAArC,UAA6C,wBAAKZ,EAAOa,KAAI,SAACC,EAAGC,GAAJ,OAAU,wBAAaD,EAAEE,SAAND,UACtGd,IACD,UAAC,IAAD,CAAOgB,GAAI,CAAEC,SAAU,KAAOC,KAAK,QAAQ,aAAW,gBAAtD,WACE,SAAC,IAAD,UACGjB,EAAaW,KAAI,SAACO,EAAaL,GAAd,OAChB,SAAC,KAAD,kBAAsBK,EAAYC,uBAAlC,aACGD,EAAYE,QAAQT,KAAI,SAACU,EAAQC,GAAT,OACvB,UAAC,KAAD,kBAAuBD,EAAOE,kBAA9B,cACGF,EAAOG,OAAO,WACf,0BACGH,EAAOI,SACJJ,EAAOK,aACL,gBACA,gBACF,QAPQJ,QAFLT,SAgBnB,SAAC,KAAD,kBAAeX,KAAf,aACG/C,EAAKwD,KAAI,SAACgB,EAAKd,GAEd,OADAV,EAAWwB,IAET,SAAC,KAAD,gBAAkBZ,GAAI,CAAE,mCAAoC,CAAEa,OAAQ,KAAWD,EAAIE,eAArF,aACGF,EAAIG,MAAMnB,KAAI,SAACoB,EAAMT,GACpB,OAAO,SAAC,KAAD,gBAAmBf,UAAU,KAAKyB,MAAM,OAAUD,EAAKE,gBAAvD,aAAwEF,EAAKP,OAAO,UAApEF,QAFZT,gBAUzB,SAAC,IAAD,CACE3E,gBAAiBA,EACjBC,SAAUA,EACVE,YAAaA,EACbC,aAAcA,EACdC,SAAUA,EACVC,UAAWA,EACXJ,UAAWA,EACXM,YAAaA,EACbD,SAAUA,EACVE,YAAaA,EACbC,MAAOA,EACPC,cAAY,OAGjB4B,IAAY,8BAAG2B,WAGrB,EAjGkBT,CAAuBuC,EAAAA,gB,oBCV5C,KAEEC,mBAAoB,IACpBC,gBAAiB,GACjBC,iBAAkB,I,+JCKpB,SAASC,EAAgBrG,GACvB,IAAQW,EAAoIX,EAApIW,MAAO2F,EAA6HtG,EAA7HsG,OAAQC,EAAqHvG,EAArHuG,OAAQ/D,EAA6GxC,EAA7GwC,SAAUgE,EAAmGxG,EAAnGwG,UAAW3C,EAAwF7D,EAAxF6D,OAAQjC,EAAgF5B,EAAhF4B,QAASkC,EAAuE9D,EAAvE8D,KAAMF,EAAiE5D,EAAjE4D,QAAoB6C,EAA6CzG,EAAxDO,UAA0CmG,EAAc1G,EAAxBQ,SACpH,GAeImG,EAAAA,EAAAA,UAAS,CACX/E,QAAAA,EACAkC,KAAAA,EACA8C,aAAc,CAAEzG,UAAW0G,EAAAA,EAAAA,iBAAyBrG,SAAUkG,GAAaG,EAAAA,EAAAA,iBAC3EC,kBAAkB,EAClBvG,UAAWkG,GAEbM,EAAAA,eArBE/C,EADF,EACEA,cACAC,EAFF,EAEEA,kBACAF,EAHF,EAGEA,aACAG,EAJF,EAIEA,WACAhD,EALF,EAKEA,KACAjB,EANF,EAMEA,gBACAG,EAPF,EAOEA,YACAK,EARF,EAQEA,YACAF,EATF,EASEA,UACAL,EAVF,EAUEA,SACAI,EAXF,EAWEA,SACAD,EAZF,EAYEA,aACAK,EAbF,EAaEA,YAbF,IAcEsG,MAAS7G,EAdX,EAcWA,UAAWK,EAdtB,EAcsBA,SAWtB,EAAsC4D,EAAAA,UAAe,GAArD,eAAO6C,EAAP,KAAoBC,EAApB,MAEAC,EAAAA,EAAAA,YAAU,iBACOC,IAAXd,GAAyBA,IAC7BY,GAAe,KACd,CAACZ,KAEJa,EAAAA,EAAAA,YAAU,WACJF,IACFC,GAAe,GACfV,EAAU,CACRhG,SAAWA,EAAW,EAAKqG,EAAAA,EAAAA,mBAA4BrG,EACvDL,UAAAA,EACAoG,OAAAA,OAIH,CAACC,EAAWrG,EAAWK,EAAU+F,EAAQU,KAE5CE,EAAAA,EAAAA,YAAU,WACRD,GAAe,KACd,CAAC/G,EAAWK,EAAU+F,IAGzB,IAAMpC,EAAoBC,EAAAA,SAAAA,IAAmB5B,GAAU,SAAA6B,GAErD,OAAID,EAAAA,eAAqBC,GAChBD,EAAAA,aAAmBC,EAAO,CAC/BzC,QAAAA,EACAgC,QAAAA,EACAC,OAAAA,EACAC,KAAAA,EACAC,aAAAA,EACAC,cAAAA,EACAC,kBAAAA,EACA/C,KAAAA,EACAgD,WAAAA,EACAjE,gBAAAA,EACAG,YAAAA,EACAD,UAAAA,EACAM,YAAAA,EACAP,SAAAA,EACAK,UAAAA,EACAF,aAAAA,EACAC,SAAAA,EACAE,SAAAA,EACAE,YAAAA,EACAC,MAAAA,IAGG0D,KAET,OACE,8BAEGF,IAwIP,WAAekD,EAAAA,EAAAA,KAxDS,SAACL,EAAOM,GAC9B,IAAQ1F,EAA+C0F,EAA/C1F,QAAoBkB,GAA2BwE,EAAtCC,UAAsCD,EAA3BxE,SAASE,EAAkBsE,EAAlBtE,cAE/Ba,GAAUmD,EAAMQ,gBAAgB3D,QAAU,IAAIyD,EAASG,UAAYH,EAAShF,oBAC5EsB,GAAWoD,EAAMQ,gBAAgB5D,SAAW,IAAI0D,EAASG,UAAYH,EAAShF,oBAC9EgE,GAAUU,EAAMQ,gBAAgBlB,QAAU,IAAIgB,EAASG,UAAYH,EAAShF,oBAC5EoF,GAAgBV,EAAMQ,gBAAgBE,cAAgB,IAAIJ,EAASG,UAAYH,EAAShF,oBAExFwB,GAAQkD,EAAMQ,gBAAgB1D,MAAQ,IAAIwD,EAASG,UAAYH,EAAShF,oBACxE/B,GAAayG,EAAMQ,gBAAgBjH,WAAa,IAAI+G,EAASG,UAAYH,EAAShF,oBAClF3B,GAASqG,EAAMQ,gBAAgB7G,OAAS,IAAI2G,EAASG,UAAYH,EAAShF,oBAC1E9B,GAAYwG,EAAMQ,gBAAgBhH,UAAY,IAAI8G,EAASG,UAAYH,EAAShF,qBAAuBgF,EAAS9G,SAChH+F,GAAUS,EAAMQ,gBAAgBjB,QAAU,IAAIe,EAASG,UAAYH,EAAShF,oBAC5EqF,EAAaX,EAAMQ,gBAAgBG,WAGnCC,EAAYZ,EAAMa,cAAcC,eAAehF,GAEjDiF,EAAe,GAEbC,EAAWhF,EAAgBA,EAAc,UAAYc,GAAQ,GAAKmE,IAAAA,UAAoBrG,GAAU+F,GAAe/F,GAAW,GAC1HsG,EAAQlF,EAAgBA,EAAc,OAASc,GAAQ,GAAKmE,IAAAA,UAAoBrG,GAAU+F,GAAe7D,GAAQ,GA0BvH,OAtBIiE,OAFaX,GAAbQ,GACEA,EAAUO,OAAS,EACNnB,EAAMa,cAAcC,eAAehF,GAKrCkF,EAGH,CACZT,UAAW,CAAEa,SAAUF,EAAOH,aAAcM,IAAAA,QAAUN,OAAcX,IACpEW,aAAcE,IAAAA,UAAoBF,GAClCzB,OAAAA,EACAgC,YAAaZ,EACb5D,KAAAA,EACAyC,OAAAA,EACA3C,QAASA,EACTrD,UAAAA,EACAC,SAAUA,EACVL,UAAW6G,EAAMQ,gBAAgBrH,UACjC0D,OAAAA,EACAlD,MAAAA,MAIuB,SAAA4H,GACzB,MAAO,CACLC,yBAA0B,SAAA1E,GAAI,OAAIyE,EAASE,EAAAA,GAAAA,gBAAuC3E,KAClF4E,yBAA0B,SAAA5E,GAAI,OAAIyE,EAASE,EAAAA,GAAAA,yBAAgD3E,KAC3F6E,0BAA2B,SAAA7E,GAAI,OAAIyE,EAASE,EAAAA,GAAAA,0BAAiD3E,QAGjG,EApIA,SAAmB9D,GACjB,IACEG,EA0BEH,EA1BFG,UACAK,EAyBER,EAzBFQ,SACAD,EAwBEP,EAxBFO,UACAqD,EAuBE5D,EAvBF4D,QAEAvB,GAqBErC,EAtBF8D,KAsBE9D,EArBFqC,UACAN,EAoBE/B,EApBF+B,eACAL,EAmBE1B,EAnBF0B,QACAa,EAkBEvC,EAlBFuC,OACAgE,EAiBEvG,EAjBFuG,OACAmC,EAgBE1I,EAhBF0I,yBACApG,EAeEtC,EAfFsC,mBACAE,EAcExC,EAdFwC,SACA8D,EAaEtG,EAbFsG,OACAmB,EAYEzH,EAZFyH,SACA9E,EAWE3C,EAXF2C,WACAE,EAUE7C,EAVF6C,aAEAE,GAQE/C,EATF+H,aASE/H,EARF+C,oBAGAwE,GAKEvH,EAPFgD,cAOEhD,EANF2H,WAME3H,EALFuH,WACAiB,EAIExI,EAJFwI,yBAEAF,GAEEtI,EAHF2I,0BAGE3I,EAFFsI,aACA3H,EACEX,EADFW,MAEI6F,EAAYpC,EAAAA,aAAkB,YAAsC,IAAnC5D,EAAkC,EAAlCA,SAAUL,EAAwB,EAAxBA,UAAWoG,EAAa,EAAbA,OACtDqC,EAAY,GACwBA,EAAV,kBAAnB7G,EAAyC8G,KAAKC,MAAM/G,GAAkB,MAChEA,EAEZ2G,GAELA,EAAyB,CACvB7F,aAAAA,EACAF,WAAYA,EACZ8E,SAAUA,EACVvE,YAAaZ,EACb9B,SAAUA,GAAYqG,EAAAA,EAAAA,gBACtB1G,UAAWA,GAAa0G,EAAAA,EAAAA,iBACxBN,OAAAA,EACAxD,mBAAAA,EAEAR,OAAAA,EACAb,QAAAA,EACAK,eAAgB6G,EAChBvG,SAAAA,MAED,CAACoF,EAAUpF,EAAUE,EAAQb,EAASY,EAAoBoG,EAA0B3G,EAAgBuG,IAKvG,OAJAnB,EAAAA,EAAAA,YAAU,WACRqB,EAAyB,CAAEtF,YAAauE,GAAYnF,EAAoByG,UAAU,MACjF,KAGD,UAAC1C,EAAD,CACEzE,QAASyG,IAAAA,KAAOd,EAAUQ,aAAc,WAAa,GACrDjE,KAAMyD,EAAUa,UAAY,GAC5B5B,UAAWA,EACX5C,QAASA,EACT0C,OAAQA,EACRC,OAAQA,EACRhG,UAAWA,EACXC,SAAUA,EACVL,UAAWA,EACXQ,MAAOA,EAVT,UAaG6B,GAAYA,GAEXA,IAAY,SAAC,UAAD","sources":["core/features/TablePagination/components/PaginationNav.js","core/features/TablePagination/components/Table.js","core/features/TablePagination/components/TableViewTable.js","core/features/TablePagination/config.js","core/features/TablePagination/containers/TableCon.js"],"sourcesContent":["import React, { PureComponent } from 'react'\n// import { Link } from 'react-router-dom'\nimport TableFooter from '@mui/material/TableFooter'\nimport TablePagination from '@mui/material/TablePagination'\nimport TableRow from '@mui/material/TableRow'\n\nexport default function PaginationNav (props) {\n  const {\n    canPreviousPage,\n    gotoPage,\n    canNextPage,\n    previousPage,\n    nextPage,\n    pageCount,\n    pageIndex,\n    pageOptions,\n    pageSize,\n    setPageSize,\n    withPageSize,\n    count\n  } = props\n  const handleChangePage = (event, newPage) => {\n    // alert(newPage)\n    gotoPage(newPage)\n  }\n  const handleChangeRowsPerPage = (e) => {\n    setPageSize(Number(e.target.value))\n    gotoPage(0)\n  }\n  return (\n    <TablePagination\n      rowsPerPageOptions={[10, 20, 30, 40, 50, { label: 'All', value: -1 }]}\n      colSpan={3}\n      count={count}\n      rowsPerPage={pageSize}\n      page={pageIndex}\n      // SelectProps={{\n      //   inputProps: {\n      //     'aria-label': 'rows per page'\n      //   },\n      //   native: true\n      // }}\n      onPageChange={handleChangePage}\n      onRowsPerPageChange={handleChangeRowsPerPage}\n    />\n  )\n}\n","import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { FormattedMessage as T } from 'react-intl'\nimport TableCon from '../containers/TableCon'\nimport { CardWrapperCon } from '../containers'\n\nconst Table = (props) => {\n  var history = useHistory()\n  const {\n    columns,\n    createHref,\n    createNewButtonLabel,\n    whereCondition,\n    cardHeader,\n    tableMenus,\n    cardTitle,\n    // cardFooter,\n    loadingOverlayOnly,\n    withoutWrapper,\n    distinct,\n    listallServiceName,\n    fields,\n    children,\n    widthSearchField,\n    withSearchField,\n    apiVersion,\n    noWrapper,\n    ignoreFields,\n    tableId,\n    additionalRequests,\n    appendColumns\n  } = props\n\n\n  return (\n    <>\n      <CardWrapperCon\n        noWrapper={!!noWrapper}\n        formTitle={cardTitle}\n        loadingOverlayOnly={!!loadingOverlayOnly}\n        withoutWrapper={withoutWrapper}\n        serviceName={listallServiceName}\n        widthSearchField={widthSearchField}\n        withSearchField={withSearchField}\n        tableId={tableId}\n      >\n        {(!tableMenus && createHref) && (<button style={{ marginRight: 5 }} type='button' className='btn btn-info' onClick={() => history.push(createHref)}><i className='fas fa-plus' /> <T id={`${createNewButtonLabel || 'Create New'}`} /></button>)}\n        {cardHeader && cardHeader()}\n        <TableCon\n          appendColumns={appendColumns}\n          additionalRequests={additionalRequests}\n          columns={columns}\n          listallServiceName={listallServiceName}\n          fields={fields}\n          history={history}\n          whereCondition={whereCondition}\n          distinct={distinct}\n          apiVersion={apiVersion}\n          ignoreFields={ignoreFields}\n          tableId={tableId}\n        >\n          {children && children}\n        </TableCon>\n      </CardWrapperCon>\n    </>\n  )\n}\nexport default Table\n\n// export default connect(\n//   mapStateToProps,\n//   mapDispatchToProps\n// )(injectIntl(TableComp))\n","import React, { PureComponent } from 'react'\n// import Loader from '../../../Components/Loader/Loader'\nimport PaginationNav from './PaginationNav'\nimport Table from '@mui/material/Table'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\nimport TableHead from '@mui/material/TableHead'\nimport TableRow from '@mui/material/TableRow'\nimport Paper from '@mui/material/Paper'\n\nexport default class TableViewTable extends PureComponent {\n  render () {\n    const {\n      loading,\n      errors,\n      data,\n      headerGroups,\n      getTableProps,\n      getTableBodyProps,\n      page,\n      prepareRow,\n      canPreviousPage,\n      canNextPage,\n      pageIndex,\n      pageOptions,\n      gotoPage,\n      pageCount,\n      previousPage,\n      nextPage,\n      pageSize,\n      setPageSize,\n      children,\n      count\n    } = this.props\n\n    const childrenWithProps = React.Children.map(children, child => {\n      // checking isValidElement is the safe way and avoids a typescript error too\n      if (React.isValidElement(child)) {\n        return React.cloneElement(child, {\n          headerGroups,\n          getTableProps,\n          getTableBodyProps,\n          page,\n          prepareRow\n        })\n      }\n      return child\n    })\n\n    return (\n      <>\n        {!children &&\n          <>\n            <TableContainer component={Paper}>\n              {!loading && errors && <div class='alert alert-danger' role='alert'><ul>{errors.map((v, i) => <li key={i}>{v.message}</li>)}</ul></div>}\n              {data &&\n              <Table sx={{ minWidth: 650 }} size='small' aria-label='a dense table'>\n                <TableHead>\n                  {headerGroups.map((headerGroup, i) => (\n                    <TableRow key={i} {...headerGroup.getHeaderGroupProps()}>\n                      {headerGroup.headers.map((column, j) => (\n                        <TableCell key={j} {...column.getHeaderProps()}>\n                          {column.render('Header')}\n                          <span>\n                            {column.isSorted\n                              ? column.isSortedDesc\n                                ? ' 🔽'\n                                : ' 🔼'\n                              : ''}\n                          </span>\n                        </TableCell>\n                      ))}\n                    </TableRow>\n                  ))}\n                </TableHead>\n                <TableBody {...getTableBodyProps()}>\n                  {page.map((row, i) => {\n                    prepareRow(row)\n                    return (\n                      <TableRow key={i} sx={{ '&:last-child td, &:last-child th': { border: 0 } }} {...row.getRowProps()}>\n                        {row.cells.map((cell, j) => {\n                          return <TableCell key={j} component='th' scope='row' {...cell.getCellProps()}>{cell.render('Cell')}</TableCell>\n                        })}\n                      </TableRow>\n                    )\n                  })}\n                </TableBody>\n              </Table>}\n            </TableContainer>\n            <PaginationNav\n              canPreviousPage={canPreviousPage}\n              gotoPage={gotoPage}\n              canNextPage={canNextPage}\n              previousPage={previousPage}\n              nextPage={nextPage}\n              pageCount={pageCount}\n              pageIndex={pageIndex}\n              pageOptions={pageOptions}\n              pageSize={pageSize}\n              setPageSize={setPageSize}\n              count={count}\n              withPageSize\n            />\n          </>}\n        {children && <>{childrenWithProps}</>}\n      </>\n    )\n  }\n}\n","\nexport default {\n  // font scaling override - RN default is on\n  defaultMaxPageSize: 500,\n  defaultPageSize: 10,\n  defaultPageIndex: 0\n}\n","import React, { useEffect } from 'react'\nimport { useTable, usePagination } from 'react-table'\nimport { connect } from 'react-redux'\nimport TablepaginationActions, { setColumns } from '../redux'\nimport TableViewTable from '../components/TableViewTable'\nimport config from '../config'\nimport Immutable from 'seamless-immutable'\nimport TablePaginationActions from '@mui/material/TablePagination/TablePaginationActions'\nimport _ from 'lodash'\n\nfunction ListAllContent (props) {\n  const { count, reload, filter, children, fetchData, errors, columns, data, loading, pageCount: controlledPageCount, pageSize: xPageSize } = props\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize }\n  } = useTable({\n    columns,\n    data,\n    initialState: { pageIndex: config.defaultPageIndex, pageSize: xPageSize || config.defaultPageSize },\n    manualPagination: true,\n    pageCount: controlledPageCount\n  },\n  usePagination\n  )\n\n  const [reloadTable, setReloadTable] = React.useState(false)\n\n  useEffect(() => {\n    if (reload !== undefined && !reload) return\n    setReloadTable(true)\n  }, [reload])\n\n  useEffect(() => {\n    if (reloadTable) {\n      setReloadTable(false)\n      fetchData({\n        pageSize: (pageSize < 0) ? config.defaultMaxPageSize : pageSize,\n        pageIndex,\n        filter\n        // whereCondition\n      })\n    }\n  }, [fetchData, pageIndex, pageSize, filter, reloadTable])\n\n  useEffect(() => {\n    setReloadTable(true)\n  }, [pageIndex, pageSize, filter])\n\n  // inject data ke dalam children\n  const childrenWithProps = React.Children.map(children, child => {\n    // checking isValidElement is the safe way and avoids a typescript error too\n    if (React.isValidElement(child)) {\n      return React.cloneElement(child, {\n        columns,\n        loading,\n        errors,\n        data,\n        headerGroups,\n        getTableProps,\n        getTableBodyProps,\n        page,\n        prepareRow,\n        canPreviousPage,\n        canNextPage,\n        pageIndex,\n        pageOptions,\n        gotoPage,\n        pageCount,\n        previousPage,\n        nextPage,\n        pageSize,\n        setPageSize,\n        count\n      })\n    }\n    return child\n  })\n  return (\n    <>\n      {/* render children yang sudah di inject data */}\n      {childrenWithProps}\n    </>\n  )\n}\nfunction TableCon (props) {\n  const {\n    pageIndex,\n    pageSize,\n    pageCount,\n    loading,\n    data,\n    distinct,\n    whereCondition,\n    history,\n    fields,\n    filter,\n    tablepaginationFetchData,\n    listallServiceName,\n    children,\n    reload,\n    listName,\n    apiVersion,\n    ignoreFields,\n    tableColumns,\n    additionalRequests,\n    appendColumns,\n    dataDetail,\n    tableData,\n    tablePaginationSetReload,\n    tablePaginationSetColumns,\n    isReloading,\n    count\n  } = props\n  const fetchData = React.useCallback(({ pageSize, pageIndex, filter }) => {\n    let whereCond = {}\n    if (typeof whereCondition === 'string') whereCond = JSON.parse(whereCondition || '{}')\n    else whereCond = whereCondition\n    // jika function hit fetch data belum ready, maka jangan dihit fetch data\n    if (!tablepaginationFetchData) return\n    // hit fetch data\n    tablepaginationFetchData({\n      ignoreFields,\n      apiVersion: apiVersion,\n      listName: listName,\n      serviceName: listallServiceName,\n      pageSize: pageSize || config.defaultPageSize,\n      pageIndex: pageIndex || config.defaultPageIndex,\n      filter,\n      additionalRequests,\n      // filter: Immutable.asMutable(filter || {}, { deep: true }),\n      fields,\n      history,\n      whereCondition: whereCond,\n      distinct\n    })\n  }, [listName, distinct, fields, history, listallServiceName, tablepaginationFetchData, whereCondition, isReloading])\n  useEffect(() => {\n    tablePaginationSetReload({ serviceName: listName || listallServiceName, isReload: false })\n  }, [])\n\n  return (\n    <ListAllContent\n      columns={_.uniq(tableData.tableColumns, 'Header') || []}\n      data={tableData.tableRow || []}\n      fetchData={fetchData}\n      loading={loading}\n      reload={reload}\n      filter={filter}\n      pageCount={pageCount}\n      pageSize={pageSize}\n      pageIndex={pageIndex}\n      count={count}\n    >\n      {/* jika ada children maka render children, biasanya di passing dari component PageList */}\n      {children && children}\n      {/* kalau tidak ada children maka kita render component default nya yaitu TableViewTable artinya list data yang ditampilkan dalam bentuk table */}\n      {!children && <TableViewTable />}\n    </ListAllContent>\n  )\n}\nconst mapStateToProps = (state, ownProps) => {\n  const { columns, tableData, tableId, appendColumns } = ownProps\n\n  const errors = (state.tablepagination.errors || {})[ownProps.listName || ownProps.listallServiceName]\n  const loading = (state.tablepagination.loading || {})[ownProps.listName || ownProps.listallServiceName]\n  const reload = (state.tablepagination.reload || {})[ownProps.listName || ownProps.listallServiceName]\n  const reloadDetail = (state.tablepagination.reloadDetail || {})[ownProps.listName || ownProps.listallServiceName]\n\n  const data = (state.tablepagination.data || {})[ownProps.listName || ownProps.listallServiceName]\n  const pageCount = (state.tablepagination.pageCount || {})[ownProps.listName || ownProps.listallServiceName]\n  const count = (state.tablepagination.count || {})[ownProps.listName || ownProps.listallServiceName]\n  const pageSize = (state.tablepagination.pageSize || {})[ownProps.listName || ownProps.listallServiceName] || ownProps.pageSize\n  const filter = (state.tablepagination.filter || {})[ownProps.listName || ownProps.listallServiceName]\n  const dataDetail = state.tablepagination.dataDetail\n\n  // custom columns\n  const customCol = state.customcolumns.custom_columns[tableId]\n\n  let tableColumns = []\n\n  const tColumns = appendColumns ? appendColumns('columns', (data || []), Immutable.asMutable(columns), dataDetail) : (columns || [])\n  const tData = appendColumns ? appendColumns('data', (data || []), Immutable.asMutable(columns), dataDetail) : (data || [])\n\n  if (customCol != undefined) {\n    if (customCol.length > 0) {\n      tableColumns = state.customcolumns.custom_columns[tableId]\n    } else {\n      tableColumns = tColumns\n    }\n  }else {\n    tableColumns = tColumns\n  }\n\n  const props = {\n    tableData: { tableRow: tData, tableColumns: _.without(tableColumns, undefined) },\n    tableColumns: Immutable.asMutable(tableColumns),\n    reload,\n    isReloading: reloadDetail,\n    data,\n    filter,\n    loading: loading,\n    pageCount,\n    pageSize: pageSize,\n    pageIndex: state.tablepagination.pageIndex,\n    errors,\n    count\n  }\n  return props\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    tablePaginationSetReload: data => dispatch(TablepaginationActions.setReloadDetail(data)),\n    tablepaginationFetchData: data => dispatch(TablepaginationActions.tablepaginationFetchData(data)),\n    tablePaginationSetColumns: data => dispatch(TablepaginationActions.tablePaginationSetColumns(data))\n  }\n}\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TableCon)\n"],"names":["PaginationNav","props","canPreviousPage","gotoPage","pageIndex","canNextPage","previousPage","nextPage","pageCount","pageSize","pageOptions","setPageSize","count","withPageSize","rowsPerPageOptions","label","value","colSpan","rowsPerPage","page","onPageChange","event","newPage","onRowsPerPageChange","e","Number","target","history","useHistory","columns","createHref","createNewButtonLabel","whereCondition","cardHeader","tableMenus","cardTitle","loadingOverlayOnly","withoutWrapper","distinct","listallServiceName","fields","children","widthSearchField","withSearchField","apiVersion","noWrapper","ignoreFields","tableId","additionalRequests","appendColumns","formTitle","serviceName","style","marginRight","type","className","onClick","push","id","TableViewTable","this","loading","errors","data","headerGroups","getTableProps","getTableBodyProps","prepareRow","childrenWithProps","React","child","component","Paper","class","role","map","v","i","message","sx","minWidth","size","headerGroup","getHeaderGroupProps","headers","column","j","getHeaderProps","render","isSorted","isSortedDesc","row","border","getRowProps","cells","cell","scope","getCellProps","PureComponent","defaultMaxPageSize","defaultPageSize","defaultPageIndex","ListAllContent","reload","filter","fetchData","controlledPageCount","xPageSize","useTable","initialState","config","manualPagination","usePagination","state","reloadTable","setReloadTable","useEffect","undefined","connect","ownProps","tableData","tablepagination","listName","reloadDetail","dataDetail","customCol","customcolumns","custom_columns","tableColumns","tColumns","Immutable","tData","length","tableRow","_","isReloading","dispatch","tablePaginationSetReload","TablepaginationActions","tablepaginationFetchData","tablePaginationSetColumns","whereCond","JSON","parse","isReload"],"sourceRoot":""}