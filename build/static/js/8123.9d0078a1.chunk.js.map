{"version":3,"file":"static/js/8123.9d0078a1.chunk.js","mappings":"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","sources":["Pages/BoAccount/Manifest.js","core/Components/Combobox/FormCombobox.js","features/BankAccountCombobox/index.js","Pages/BoAccount/PageUpsert.js","Pages/TokoOnline/Manifest.js"],"sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport _ from 'lodash'\nimport { NeedApprovalCheckBox } from '../../features/NeedApproval'\nimport AppConfig from '../../core/Config/AppConfig'\nimport {sanitizeValue} from '../../core/Utils/Utils'\n\nimport Moment from 'moment'\nconst basePath = AppConfig.basePath\n\nconst entityName = 'Account'\nexport const entity = 'account'\nconst serviceEntity = 'BankAccount'\n\nexport const redirectAfterCreate = '/account-number-detail'\nexport const redirectAfterDelete = '/all-bank-account'\nexport const detailPageUrl = (id) => (`/account-number-detail/${id}`)\nexport const upsertPageUrl = (id) => (`/form-account-number${id ? '/' + id : ''}`)\nexport const listallPageUrl = () => ('/all-bank-account')\nexport const createNewButtonLabel = 'Buat Kategori Baru'\nexport const createPageTitle = 'Detail Bank Account'\nexport const listallPageTitle = 'All Bank Accounts'\nexport const needApprovalListallPageTitle = 'Need Approval Bank Accounts'\nexport const detailPageTitle = 'Detail Bank Account'\nexport const upsertPageTitle = 'Form ' + entityName\n// export const createService = 'create' + serviceEntity\nexport const detailService = 'getDetailBankAccountById'\n// export const updateService = 'update' + serviceEntity\nexport const upsertService = 'upsertAccountNumber'\n\nexport const opApproveAccountNumberService = 'approveBankAccount'\nexport const opRejectAccountNumberService = 'rejectBankAccount'\n\nexport const approvedAccountNumberlistallService = 'getAllBankAccount'\nexport const getAllBankAccount = 'getAllBankAccount'\n\nexport const needApprovalAccountNumberlistallService = 'getAllNeedApprovalBankAccount'\nexport const deleteService = 'delete' + serviceEntity +'ById'\nexport const fields = { _id: true, bank_code_id: { _id: true,bank_code:true }, bank_code: true, bank_name: true, status: true, description: true, account_number: true, created_at: true, updated_at: true, created_by: { _id: true, full_name: true, email: true }, validated_by: { _id: true, full_name: true, email: true , updated_at:true }, approved_by: { _id: true, email: true, full_name: true }, account_name: true }\n// export const fields = '_id,status,description,account_number,created_at,updated_at,created_by{_id,full_name},validated_by{_id,full_name},approved_by{_id,email,full_name},account_name'\nexport const getApprovedBankAccountColumns = (history) => [\n  {\n    Header: ' ',\n    accessor: '_id',\n    Cell: p => (\n      <div className='btn-group'>\n        <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n          <span className='sr-only'>Toggle Dropdown</span>\n        </button>\n        <div className='dropdown-menu' role='menu'>\n          <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate}/${p.cell.value}`}>Detail</Link>\n        </div>\n      </div>)\n  },\n  { Header: 'Account Name', accessor: p=>sanitizeValue(p.account_name) },\n  { Header: 'Account Number', accessor: p=>sanitizeValue(p.account_number) },\n  { Header: 'Bank Code', accessor: p=>sanitizeValue(p.bank_code) },\n  { Header: 'Bank Name', accessor: p=>sanitizeValue(p.bank_name) },\n  { Header: 'description', accessor: p=>sanitizeValue(p.description) },\n  { Header: 'Status', accessor: p=>sanitizeValue(p.status) },\n  { Header: 'created by', accessor: p => <span>{sanitizeValue((p.created_by || {}).full_name)}</span> },\n  { Header: 'approved by', accessor: 'approved_by.full_name' }\n]\n\nexport const getNeedApprovalBankAccountColumns = (history) => [\n  {\n    Header: ' ',\n    accessor: '_id',\n    Cell: p => (\n      <div className='btn-group'>\n        <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n          <span className='sr-only'>Toggle Dropdown</span>\n        </button>\n        <div className='dropdown-menu' role='menu'>\n          <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate}/${p.cell.value}`}>Detail</Link>\n        </div>\n      </div>)\n  },\n  { Header: 'Receipt Name', accessor: p=>sanitizeValue(p.account_name) },\n  { Header: 'Receipt Number', accessor: p=>sanitizeValue(p.account_number) },\n  { Header: 'Bank Code', accessor: p=>sanitizeValue(p.bank_code) },\n  { Header: 'Bank Name', accessor: p=>sanitizeValue(p.bank_name) },\n  { Header: 'Description', accessor: p=>sanitizeValue(p.description) },\n  { Header: 'Status', accessor: p=>sanitizeValue(p.status) },\n  { Header: 'Validated by', accessor: p => <span>{sanitizeValue((p.validated_by || {}).full_name)}</span> },\n  { Header: 'Validated date', accessor: p =>{\n    const date = Moment(p.created_at)\n    const dt = p.created_at === null || p.created_at === undefined ? '-' : date.format(AppConfig.datetimeFormat)\n    return sanitizeValue(dt)\n  }},\n  { Header: 'Created by', accessor: p => <span>{(sanitizeValue(p.created_by || {}).full_name)}</span> },\n  { Header: 'Created at', accessor: p =>{\n    const date = Moment(p.created_at)\n    const dt = p.created_at === null || p.created_at === undefined ? '-' : date.format(AppConfig.datetimeFormat)\n    return sanitizeValue(dt)\n  }},\n  { Header: 'Updated at', accessor: p =>{\n    const date = Moment(p.updated_at)\n    const dt = p.updated_at === null || p.updated_at === undefined ? '-' : date.format(AppConfig.datetimeFormat)\n    return sanitizeValue(dt)\n  } },\n  {\n    Header: 'set',\n    accessor: p => {\n      if(!_.has(p,'validated_by._id')) return(<></>)\n      return (\n        <>\n          <div className='form-check'>\n            <NeedApprovalCheckBox idComparison={ p.validated_by._id} transactionId={p._id} />\n          </div>\n        </>\n      )\n    }\n  }\n  // {\n  //   Header: 'Tanggal Dibuat',\n  //   accessor: 'created_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  // {\n  //   Header: 'Tanggal Dirubah',\n  //   accessor: 'updated_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n\n]\n\n\n\n\nexport default {\n  redirectAfterCreate,\n  redirectAfterDelete,\n  detailPageUrl,\n  upsertPageUrl,\n  // createPageUrl,\n  createNewButtonLabel,\n  createPageTitle,\n  listallPageTitle,\n  detailPageTitle,\n  // updatePageTitle,\n  // createService,\n  detailService,\n  // updateService,\n  // listallService,\n  deleteService,\n  upsertService,\n  fields,\n  listallPageUrl\n}\n","import React from 'react'\n\nconst Combobox = (props) => {\n  const {\n    onChange,\n    cbData,\n    detailData,\n    isLoading,\n    isLabelWithCode,\n    elID\n  } = props\n  return (\n    <>\n      {isLoading\n        ? (<select>\n          <option value='0'>Fetch combobox data ...</option>\n        </select>)\n        : (\n          <select disabled={!!(cbData.length == 0 && !isLoading)} className='custom-select from-control' id={elID} onChange={e => onChange(e)}>\n            {typeof detailData.code === 'undefined' ? <option value=''>Select bank account</option> : <></>}\n            {cbData.map((r, i) => (\n              detailData.bank_code == r.code\n                ? <option value={r.code} selected key={i}>{isLabelWithCode ? `${r.code} - ${r.name}` : r.name}</option>\n                : <option value={r.code} key={i}>{isLabelWithCode ? `${r.code} - ${r.name}` : r.name}</option>\n            ))}\n          </select>\n        )}\n    </>\n  )\n}\n\nexport default Combobox\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport ComboboxComp from '../../core/Components/Combobox/FormCombobox'\nimport { injectIntl } from 'react-intl'\n\n\nexport class index extends Component {\n    render() {\n        const { \n            //redux\n            bank_data,isRequesting,\n            //outside\n            onComboboxChange\n        } = this.props\n        \n        console.log(\"data props combobox>>>>>>\",this.props)\n        return (\n            <div>\n                <ComboboxComp  onChange={onComboboxChange} cbData={bank_data} isLoading={isRequesting} {...this.props} />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    bank_data:state.listbankcombobox.bank_data || [],\n    isRequesting: state.listbankcombobox.isRequesting,\n    errors: state.listbankcombobox.errors,\n    status: state.listbankcombobox.status\n})\n\n\nexport default connect(mapStateToProps,null)(injectIntl(index))\n","import React from 'react'\nimport { Detail, Multiselect, CardWrapperCon } from '../../core/features/TablePagination'\nimport ContentWrapper from '../../core/Components/Layout/ContentWrapper'\nimport { injectIntl } from 'react-intl'\nimport AppConfig from '../../core/Config/AppConfig'\nimport { listallService, upsertPageTitle, listallPageUrl, listallPageTitle, upsertService, fields, detailService, redirectAfterDelete } from './Manifest'\nimport TokoOnlineManifest from '../TokoOnline/Manifest'\nimport BankAccountCombobox from '../../features/BankAccountCombobox'\nimport { connect,useDispatch as dispatch} from 'react-redux'\nimport ComboboxActions from '../../features/BankAccountCombobox/redux'\n\n\nconst FormUpdate = (props) => {\n  const {\n    tablepaginationOnChangeForm,\n    dataDetail,\n    payload,\n    upsertServiceName,\n    id,\n    tablepaginationResetForm,\n    formTitle,\n    myMerchantId,\n    myUserId\n  } = props\n  // useMemo(() => tablepaginationResetForm({ serviceName: upsertServiceName, defaultFormValue: { _id: id } }), [])\n  React.useEffect(() => {\n    const defaultFormValue = { merchant_id: '' + myMerchantId, user_id: myUserId }\n    if (id) defaultFormValue._id = id\n    tablepaginationResetForm({ apiVersion: 2, isInitialReset: true, serviceName: upsertServiceName, defaultFormValue, redirectAfterUpsert:'/account-number-detail/', redirectAfterDelete:'/all-bank-account' })\n    // if (id) tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: '_id', fieldValue: id, resetValue: id })\n  }, [tablepaginationResetForm, upsertServiceName, id])\n  // if (dataDetail) {\n  //   tablepaginationResetForm({ serviceName: upsertServiceName, defaultFormValue: { _id: id } })\n  // }\n  // if (dataDetail) {\n  // useMemo(() => {\n  //   return tablepaginationResetForm({ serviceName: upsertServiceName, defaultFormValue: { _id: dataDetail._id } })\n  // }, [upsertServiceName, tablepaginationResetForm, dataDetail])\n  // }\n  // const [payloadValueOriginal, setPayloadValueOriginal] = React.useState([])\n  console.log('payloadpayloadpayload ===>', payload)\n  // console.log('payloadpayloadpayload===>', dataDetail.title)\n\n  React.useEffect(()=>{\n    console.log(\"props>>>>>>>\"+props)\n    // tablepaginationOnChangeForm({ serviceName: merchant, fieldName: 'description', fieldValue: e.target.value })}\n  },[])\nconsole.log(\"servicenya>>>>>>\",upsertServiceName)\n  return (\n    <div className='row'>\n      <div className='col-sm-6'>\n        <CardWrapperCon formTitle={formTitle}>\n          <input type='hidden' className='form-control' id='merchant_id' value={typeof payload.merchant_id !== 'undefined' ? payload.merchant_id : dataDetail.merchant_id || ''} onChange={e => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'merchant_id', fieldValue: e.target.value })} />\n          <input type='hidden' className='form-control' id='user_id' value={typeof payload.user_id !== 'undefined' ? payload.user_id : dataDetail.user_id || ''} onChange={e => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'user_id', fieldValue: e.target.value })} />\n          <div className='form-group'>\n            <label htmlFor='title'>Account Name</label>\n            <input type='text' className='form-control' id='title' placeholder='Masukkan nama pemilik account number' value={typeof payload.account_name !== 'undefined' ? payload.account_name : dataDetail.account_name || ''} onChange={e => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'account_name', fieldValue: e.target.value })} />\n          </div>\n          <div className='form-group'>\n            <label htmlFor='account_number'>Account Number</label>\n            <input type='text' className='form-control' id='account_number' placeholder='Masukkan account number (nomor rekening)' value={typeof payload.account_number !== 'undefined' ? payload.account_number : dataDetail.account_number || ''} onChange={e => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'account_number', fieldValue: e.target.value })} />\n          </div>\n\n          <div className='form-group'>\n            <label htmlFor='description'>Keterangan</label>\n            <input type='text' className='form-control' id='description' placeholder='Masukkan keterangan' value={typeof payload.description !== 'undefined' ? payload.description : dataDetail.description || ''} onChange={e => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'description', fieldValue: e.target.value })} />\n          </div>\n          <div className='form-group'>\n            <label htmlFor='bank_code_id'>Bank Code</label>\n            <br />\n            <Multiselect\n              isMulti={false}\n              className='mr-3'\n              label='Bank Code'\n              labelButton='Pilih'\n              labelColumn='Pilih'\n              placeholder='Pilih'\n              optionColumnValue='_id'\n              optionColumnLabel='bank_name'\n              payloadValue={payload.bank_code_id}\n              defaultValueOriginal={dataDetail.bank_code_id}\n              getColumns={({ onChange }) => []}\n              listallServiceName='getAllBankCode'\n              fields='_id,bank_name,bank_code'\n              onChange={({ val }) => {\n                tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'bank_code_id', fieldValue: val })\n              }}\n              apiVersion={2}\n            />\n          </div>\n\n          {/* <div className='form-group'>\n            <label htmlFor='toko_id'>Pilih Toko</label>\n            <br />\n            <Multiselect\n              isMulti\n              className='form-control'\n              label='Pilih Toko'\n              labelButton='Pilih'\n              labelColumn='Pilih'\n              placeholder='Pilih'\n              optionColumnValue='_id'\n              optionColumnLabel='name'\n              payloadValue={payload.toko_id}\n              defaultValueOriginal={dataDetail.toko_id}\n              getColumns={({ onChange }) => []}\n              listallServiceName={TokoOnlineManifest.listallService}\n              fields={TokoOnlineManifest.fields}\n              onChange={({ val }) => { tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'toko_id', fieldValue: val }) }}\n            />\n          </div> */}\n          {/* <div className='form-group'>\n            <label htmlFor='parent_id'>Pilih Kategori Induk</label>\n            <br />\n            <Multiselect\n              isMulti={false}\n              className='form-control'\n              label='Pilih Kategori Induk'\n              labelButton='Pilih'\n              labelColumn='Pilih'\n              placeholder='Pilih'\n              optionColumnValue='_id'\n              optionColumnLabel='title'\n              payloadValue={payload.parent_id}\n              defaultValueOriginal={dataDetail.parent_id}\n              getColumns={({ onChange }) => []}\n              listallServiceName={listallService}\n              fields={fields}\n              onChange={({ val }) => {\n                tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'parent_id', fieldValue: val })\n              }}\n            /> */}\n          {/* <Combobox\n              className='form-control'\n              label='pilih kategori induk'\n              labelButton='Pilih'\n              labelColumn='Pilih'\n              optionColumnValue='_id'\n              optionColumnLabel='title'\n              getColumns={({ onChange }) => [\n                { Header: 'Nama Kategori', accessor: 'title' }\n              ]}\n              listallServiceName={listallService}\n              upsertServiceName={upsertServiceName}\n              fields={fields}\n              defaultValue={typeof payload.parent_id !== 'undefined' ? payload.parent_id : (dataDetail.parent_id || {})._id}\n              onChange={({ val }) => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'parent_id', fieldValue: val })}\n            />\n          </div> */}\n        </CardWrapperCon>\n      </div>\n    </div>\n  )\n}\nfunction Comp (props) {\n  const { match } = props\n  return (\n    <ContentWrapper\n      pageTitle={upsertPageTitle}\n      breadcrumb={[\n        { title: 'Beranda', link: AppConfig.appHomePage },\n        { title: listallPageTitle, link: listallPageUrl() },\n        { title: upsertPageTitle, link: null, isActive: true }\n      ]}\n      contentHeaderTitle={upsertPageTitle}\n      isNeedLoggedin\n    >\n      <div className='row'>\n        <div className='col-md-12'>\n          <Detail\n            detailServiceName={detailService}\n            upsertServiceName={upsertService}\n            fields={fields}\n            id={match.params._id}\n            formTitle={upsertPageTitle}\n            redirectAfterDelete={redirectAfterDelete}\n            withoutWrapper\n            apiVersion={2}\n          >\n            <FormUpdate formTitle={upsertPageTitle} />\n          </Detail>\n        </div>\n      </div>\n    </ContentWrapper>\n  )\n}\n\nexport default injectIntl(Comp)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport AppConfig from '../../core/Config/AppConfig'\nconst basePath = AppConfig.basePath\n\nconst entityName = AppConfig.appName\nconst entity = 'tokoonline'\nconst serviceEntity = 'TokoTokoOnline'\n\nexport const redirectAfterCreate = '/' + entity + '/detail'\nexport const redirectAfterDelete = '/' + entity\nexport const detailPageUrl = (id) => (`/${entity}/detail/${id}`)\nexport const upsertPageUrl = (id) => (`/${entity}/upsert${id ? '/' + id : ''}`)\nexport const listallPageUrl = () => (`/${entity}`)\nexport const createNewButtonLabel = 'Buat Baru'\nexport const createPageTitle = 'Buat Baru'\nexport const listallPageTitle = 'Daftar Toko'\nexport const detailPageTitle = 'Toko Detail'\nexport const upsertPageTitle = 'Form ' + entityName\nexport const upsertService = 'upsert' + serviceEntity\nexport const createService = 'create' + serviceEntity\nexport const detailService = 'getDetail' + serviceEntity\nexport const listallService = 'getAll' + serviceEntity + 's'\nexport const deleteService = 'delete' + serviceEntity\nexport const fields = '_id,name,pgateway_id{_id,title,keyid,mid,secretkey,configs},template,image_ids{_id, filename, filenameorigin, file_type},logo{_id, filename, filenameorigin, file_type},address,email,template,plink_merchant_secret_key,province,city,subcity,slug,plink_merchant_id,plink_merchant_key_id,status,website,facebook,instagram,youtube,description,created_at,updated_at,owner{_id,full_name,email},created_by{full_name},updated_by{full_name}'\nexport const getColumns = (history) => [\n  {\n    Header: ' ',\n    accessor: '_id',\n    Cell: p => (\n      <div className='btn-group'>\n        <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n          <span className='sr-only'>Toggle Dropdown</span>\n        </button>\n        <div className='dropdown-menu' role='menu'>\n          {/* <Link className='dropdown-item' to={upsertPageUrl(p.cell.value)}>Detail</Link> */}\n          <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate}/${p.cell.value}`}>Detail</Link>\n        </div>\n      </div>)\n  },\n  { Header: 'Nama', accessor: 'name' },\n  { Header: 'website', accessor: 'website' },\n  { Header: 'facebook', accessor: 'facebook' },\n  { Header: 'instagram', accessor: 'instagram' },\n  { Header: 'youtube', accessor: 'youtube' },\n  { Header: 'status', accessor: 'status' },\n  // {\n  //   Header: 'Tanggal Diperbaharui',\n  //   accessor: 'updated_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  { Header: 'Pemilik', accessor: 'owner.full_name' }\n//   { Header: 'updated by', accessor: 'updated_by.full_name' }\n  // { Header: 'created at', accessor: 'created_at' },\n  // { Header: 'updated at', accessor: 'updated_at' }\n]\n\nexport default {\n  redirectAfterCreate,\n  redirectAfterDelete,\n  detailPageUrl,\n  upsertPageUrl,\n  createNewButtonLabel,\n  createPageTitle,\n  listallPageTitle,\n  detailPageTitle,\n  upsertPageTitle,\n  createService,\n  detailService,\n  upsertService,\n  listallService,\n  deleteService,\n  fields,\n  getColumns,\n  listallPageUrl\n}\n"],"names":["basePath","AppConfig","redirectAfterCreate","redirectAfterDelete","upsertPageUrl","id","listallPageUrl","listallPageTitle","needApprovalListallPageTitle","detailPageTitle","upsertPageTitle","detailService","upsertService","opApproveAccountNumberService","opRejectAccountNumberService","getAllBankAccount","needApprovalAccountNumberlistallService","deleteService","fields","_id","bank_code_id","bank_code","bank_name","status","description","account_number","created_at","updated_at","created_by","full_name","email","validated_by","approved_by","account_name","getApprovedBankAccountColumns","history","Header","accessor","Cell","p","className","type","role","to","cell","value","sanitizeValue","getNeedApprovalBankAccountColumns","date","Moment","dt","undefined","format","_","idComparison","transactionId","props","onChange","cbData","detailData","isLoading","isLabelWithCode","elID","disabled","length","e","code","map","r","i","selected","name","index","this","bank_data","isRequesting","onComboboxChange","console","log","Component","FormUpdate","connect","state","listbankcombobox","errors","injectIntl","tablepaginationOnChangeForm","dataDetail","payload","upsertServiceName","tablepaginationResetForm","formTitle","myMerchantId","myUserId","React","defaultFormValue","merchant_id","user_id","apiVersion","isInitialReset","serviceName","redirectAfterUpsert","fieldName","fieldValue","target","htmlFor","placeholder","isMulti","label","labelButton","labelColumn","optionColumnValue","optionColumnLabel","payloadValue","defaultValueOriginal","getColumns","listallServiceName","val","match","ContentWrapper","pageTitle","breadcrumb","title","link","isActive","contentHeaderTitle","isNeedLoggedin","detailServiceName","params","withoutWrapper","entityName","entity","createNewButtonLabel","listallService","detailPageUrl","createPageTitle","createService"],"sourceRoot":""}