{"version":3,"file":"static/js/4812.9397a56c.chunk.js","mappings":"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","sources":["Pages/TokoInventory/Manifest.js","Pages/TokoInventory/PageDetail.js"],"sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst entityName = 'TokoProductVariation'\nconst entity = 'tokoproductvariation'\nconst serviceEntity = 'TokoProductVariation'\n\nexport const redirectAfterCreate = '/inventory/detail'\nexport const redirectAfterDelete = '/' + entity\nexport const detailPageUrl = (id) => (`/inventory/detail/${id}`)\nexport const updatePageUrl = (id) => (`/${entity}/update/${id}`)\nexport const createPageUrl = () => (`/${entity}/create`)\nexport const createNewButtonLabel = 'Create New ' + entityName\nexport const createPageTitle = 'Create New ' + entityName\nexport const listallPageTitle = 'Data Inventaris'\nexport const detailPageTitle = 'Data Detail Inventaris'\nexport const updatePageTitle = 'Update ' + entityName\nexport const updateService = 'update' + serviceEntity\nexport const createService = 'create' + serviceEntity\nexport const detailService = 'getDetail' + serviceEntity\nexport const listallService = 'getAllTokoProductVariations'\nexport const deleteService = 'delete' + serviceEntity\nexport const fields = '_id,sku,product_id{_id,name,product_availability,preorder_policy,code,image_id{filename,file_type}},inventories{_id,quantity,created_at,updated_at,created_by{full_name},updated_by{full_name}},created_at,updated_at,created_by{full_name},updated_by{full_name}'\nexport const getColumns = ({ history, stateParams, formUpdateStock, submitUpdateStock, productUpdatePageUrl }) => [\n  // {\n  //   Header: 'Act',\n  //   accessor: '_id',\n  //   Cell: p => (\n  //     <div className='btn-group'>\n  //       <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n  //         <span className='sr-only'>Toggle Dropdown</span>\n  //       </button>\n  //       <div className='dropdown-menu' role='menu'>\n  //         <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate}/${p.cell.value}`}>Detail</Link>\n  //       </div>\n  //     </div>)\n  // },\n  {\n    Header: ' ',\n    accessor: p => (\n      <div className='btn-group'>\n        <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n          <span className='sr-only'>Toggle Dropdown</span>\n        </button>\n        <div className='dropdown-menu' role='menu'>\n          <Link className='dropdown-item' to={`${productUpdatePageUrl(p.product_id._id)}`}>Ubah Produk</Link>\n        </div>\n      </div>)\n    // Cell: p => (\n    //   <div className='input-group mb-3'>\n    //     <input type='text' className='form-control rounded-0' />\n    //     <span className='input-group-append'>\n    //       <button type='button' className='btn btn-info btn-flat'>Simpan</button>\n    //     </span>\n    //   </div>\n    // )\n  },\n  { Header: 'Kode Produk', accessor: 'product_id.code' },\n  { Header: 'Nama Produk', accessor: 'product_id.name' },\n  {\n    Header: 'Status produk jika stok habis',\n    accessor: p => {\n      const v = (p.product_id || {}).preorder_policy\n      return v === 'unavailable' ? 'Habis' : v\n    }\n  },\n  // {\n  //   Header: 'Stok',\n  //   accessor: p => {\n  //     return <span>{(formUpdateStock.stateStockProduct || {})['' + p.inventories[0]._id]}</span>\n  //   }\n  // },\n  {\n    Header: 'Ubah Stok',\n    accessor: p => formUpdateStock({ dataDetail: p, stateParams, submitUpdateStock })\n    // Cell: p => (\n    //   <div className='input-group mb-3'>\n    //     <input type='text' className='form-control rounded-0' />\n    //     <span className='input-group-append'>\n    //       <button type='button' className='btn btn-info btn-flat'>Simpan</button>\n    //     </span>\n    //   </div>\n    // )\n  }\n\n  // { Header: 'Nama Lengkap', accessor: 'full_name' },\n  // { Header: 'No Telepon', accessor: 'phone_number' },\n  // { Header: 'Email', accessor: 'email' },\n  // { Header: 'Total Pembayaran', accessor: 'total_amount' },\n  // { Header: 'ID Sesi', accessor: 'session_id' },\n  // { Header: 'Kode Invoice', accessor: 'invoice_code' },\n//   { Header: 'category', accessor: p => (<span>{(_.map(p.category_id, v => v.title) || []).join(', ')}</span>) },\n//   { Header: 'toko', accessor: p => (<span>{(_.map(p.toko_id, v => v.name) || []).join(', ')}</span>) },\n// { Header: 'picture', accessor: p => (<span>{p.image_id.filename}.{p.image_id.file_type}</span>) },\n//   {\n//     Header: 'created_at',\n//     accessor: 'created_at',\n//     Cell: d => {\n//       let data = Moment(d.cell.value)\n//       if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n//       else data = ''\n//       return (<span>{`${data}`}</span>)\n//     }\n//   },\n  // {\n  //   Header: 'Tanggal Transaksi',\n  //   accessor: 'updated_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  // { Header: 'created by', accessor: 'created_by.full_name' }\n//   { Header: 'updated by', accessor: 'updated_by.full_name' }\n  // { Header: 'created at', accessor: 'created_at' },\n  // { Header: 'updated at', accessor: 'updated_at' }\n]\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { injectIntl } from 'react-intl'\nimport _ from 'lodash'\nimport AppActions from '../../core/Redux/AppRedux'\nimport { Detail as Detaildata } from '../../core/features/TablePagination'\nimport { path } from 'ramda'\nimport ContentWrapper from '../../core/Components/Layout/ContentWrapper'\nimport { detailService, fields, deleteService, detailPageTitle, updatePageUrl, redirectAfterDelete } from './Manifest'\nimport Moment from 'moment'\nimport AppConfig from '../../core/Config/AppConfig'\n\nfunction createRow (title, paginationConfig, dataDetail, pathArr) {\n  const val = path([paginationConfig.serviceName, pathArr[0]], dataDetail)\n  let ddVal = ''\n  if (!_.isEmpty(val) && Array.isArray(val)) {\n    ddVal = (val.map(v => {\n      if (v) return v[pathArr[1]]\n      else return '-'\n    })).join(', ')\n  } else if (!_.isEmpty(val) && typeof val === 'object') {\n    ddVal = val[pathArr[1]]\n  } else {\n    ddVal = val\n  }\n  return (\n    <>\n      <dt>{title}</dt>\n      <dd>{ddVal || '-'}</dd>\n    </>\n  )\n}\n\nfunction Comp (props) {\n  const { match, history, dataDetail } = props\n  const paginationConfig = {\n    serviceName: detailService,\n    serviceDeleteName: deleteService,\n    fields: fields\n  }\n\n  // const subjectId = path([paginationConfig.serviceName, 'subject_id', '_id'], dataDetail)\n  // const courseId = path([paginationConfig.serviceName, 'subject_id', 'course_id', '_id'], dataDetail)\n  const sessionId = (dataDetail[detailService] || {}).session_id\n  console.log('sessionId====>', sessionId)\n  console.log('dataDetail======>', dataDetail[detailService])\n  return (\n    <ContentWrapper\n      pageTitle={detailPageTitle}\n      breadcrumb={[\n        { title: 'Beranda', link: AppConfig.appHomePage },\n        // { title: 'Course', link: '/course', isActive: true },\n        // { title: 'Course Detail', link: `/course/detail/${courseId}`, isActive: true },\n        // { title: 'Subject Detail', link: `/subject/detail/${subjectId}`, isActive: true },\n        { title: detailPageTitle, link: null, isActive: true }\n      ]}\n      contentHeaderTitle={detailPageTitle}\n      isNeedLoggedin\n    >\n      <div className='row'>\n        <div className='col-md-12'>\n          <Detaildata\n            id={match.params._id}\n            updateHref={updatePageUrl(match.params._id)}\n            formTitle={detailPageTitle}\n            paginationConfig={paginationConfig}\n            child={(dataDetail) => {\n              let createdAt = Moment(path([paginationConfig.serviceName, 'created_at'], dataDetail))\n              if (createdAt && createdAt.isValid()) createdAt = createdAt.format('YYYY-MM-DD HH:mm:ss')\n              else createdAt = ''\n              let updatedAt = Moment(path([paginationConfig.serviceName, 'updated_at'], dataDetail))\n              if (updatedAt && updatedAt.isValid()) updatedAt = updatedAt.format('YYYY-MM-DD HH:mm:ss')\n              else updatedAt = ''\n              return (\n                <dl>\n                  {createRow('Nama Produk', paginationConfig, dataDetail, ['product_id', 'name'])}\n                  {/* {createRow('Nama', paginationConfig, dataDetail, ['full_name'])}\n                  {createRow('No Telepon', paginationConfig, dataDetail, ['phone_number'])}\n                  {createRow('Email', paginationConfig, dataDetail, ['email'])}\n                  {createRow('ID Sesi', paginationConfig, dataDetail, ['session_id'])}\n                  {createRow('Kode Invoice', paginationConfig, dataDetail, ['invoice_code'])} */}\n\n                  {/* <dt>Tanggal Transaksi</dt>\n                  <dd>{updatedAt}</dd> */}\n                  {/* {createRow('Payment Page Url', paginationConfig, dataDetail, ['payment_page_url'])} */}\n                </dl>\n              )\n            }}\n            footerCard={dataDetail => {\n              // const subjectId = path([paginationConfig.serviceName, 'subject_id', '_id'], dataDetail)\n              return (\n                <>\n                  {/* <button style={{ width: 100 }} type='button' className='btn bg-gradient-danger' data-toggle='modal' data-target='#modal-danger'>Delete</button> */}\n                  {/* <button style={{ width: 100, marginLeft: 5 }} onClick={() => history.push(updatePageUrl(match.params._id))} type='button' className='btn bg-gradient-primary'>Edit</button> */}\n                  <button style={{ width: 100, marginLeft: 5 }} onClick={e => history.goBack()} type='button' className='btn bg-gradient-warning'>Back</button>\n                </>\n              )\n            }}\n            modalFooter={(dataDetail, tablepaginationDeleteData) => {\n              // const subjectId = path([paginationConfig.serviceName, 'subject_id', '_id'], dataDetail)\n              return (\n                <>\n                  <button id='buttonCloseModal' type='button' className='btn btn-outline-light' data-dismiss='modal'>Cancel</button>\n                  <button type='button' className='btn btn-outline-light' onClick={() => tablepaginationDeleteData({ id: match.params._id, serviceName: paginationConfig.serviceDeleteName, redirectAfterDelete: redirectAfterDelete, history })}>Delete</button>\n                </>\n              )\n            }}\n          />\n        </div>\n      </div>\n\n    </ContentWrapper>\n  )\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    dataDetail: state.tablepagination.dataDetail\n  }\n}\nconst mapDispatchToProps = dispatch => ({\n  appPatch: data => dispatch(AppActions.appPatch(data))\n})\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(injectIntl(Comp))\n"],"names":["entityName","entity","serviceEntity","redirectAfterDelete","updatePageUrl","id","createNewButtonLabel","listallPageTitle","detailPageTitle","detailService","listallService","deleteService","fields","getColumns","history","stateParams","formUpdateStock","submitUpdateStock","productUpdatePageUrl","Header","accessor","p","className","type","role","to","product_id","_id","v","preorder_policy","dataDetail","createRow","title","paginationConfig","pathArr","val","path","serviceName","ddVal","_","Array","isArray","map","join","connect","state","ownProps","tablepagination","dispatch","appPatch","data","AppActions","injectIntl","props","match","serviceDeleteName","sessionId","session_id","console","log","pageTitle","breadcrumb","link","AppConfig","isActive","contentHeaderTitle","isNeedLoggedin","params","updateHref","formTitle","child","createdAt","Moment","isValid","format","updatedAt","footerCard","style","width","marginLeft","onClick","e","goBack","modalFooter","tablepaginationDeleteData"],"sourceRoot":""}