{"version":3,"file":"static/js/7786.149d5731.chunk.js","mappings":"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","sources":["Pages/TokoTeam/Manifest.js","Pages/TokoTeam/PageDetail.js"],"sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport AppConfig from '../../core/Config/AppConfig'\nconst basePath = AppConfig.basePath\n\nconst entityName = 'TokoTeam'\nconst entity = 'tokoteam'\nconst serviceEntity = 'TokoTeam'\n\nexport const redirectAfterCreate = (tokoId) => ('/' + entity + '/detail/' + tokoId)\nexport const redirectAfterDelete = (tokoId) => ('/tokoonline/detail/' + tokoId)\nexport const detailPageUrl = (id) => (`/${entity}/detail/${id}`)\nexport const updatePageUrl = (id) => (`/${entity}/update/${id}`)\nexport const createPageUrl = () => (`/${entity}/create`)\nexport const createNewButtonLabel = 'Create New ' + entityName\nexport const createPageTitle = 'Add a team member'\nexport const listallPageTitle = 'Toko Team'\nexport const detailPageTitle = entityName + ' Detail'\nexport const updatePageTitle = 'Update ' + entityName\nexport const updateService = 'update' + serviceEntity\nexport const createService = 'create' + serviceEntity\nexport const detailService = 'getDetail' + serviceEntity\nexport const listallService = 'getAll' + serviceEntity + 's'\nexport const deleteService = 'delete' + serviceEntity\nexport const fields = '_id,user_id{_id, full_name, email},toko_id{_id, name},role_id{_id, title},created_at,updated_at,created_by{full_name},updated_by{full_name}'\nexport const getColumns = ({ history, tokoId }) => [\n  {\n    Header: ' ',\n    accessor: '_id',\n    Cell: p => (\n      <div className='btn-group'>\n        <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n          <span className='sr-only'>Toggle Dropdown</span>\n        </button>\n        <div className='dropdown-menu' role='menu'>\n          <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate(tokoId)}/${p.cell.value}`}>Detail</Link>\n        </div>\n      </div>)\n  },\n  { Header: 'nama', accessor: 'user_id.full_name' },\n  { Header: 'email', accessor: 'user_id.email' }\n  // { Header: 'name', accessor: 'toko_id.name' },\n  // {\n  //   Header: 'updated_at',\n  //   accessor: 'updated_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  // { Header: 'created by', accessor: 'created_by.full_name' }\n//   { Header: 'updated by', accessor: 'updated_by.full_name' }\n  // { Header: 'created at', accessor: 'created_at' },\n  // { Header: 'updated at', accessor: 'updated_at' }\n]\n\nexport default {\n  redirectAfterCreate,\n  redirectAfterDelete,\n  detailPageUrl,\n  updatePageUrl,\n  createPageUrl,\n  createNewButtonLabel,\n  createPageTitle,\n  listallPageTitle,\n  detailPageTitle,\n  updatePageTitle,\n  createService,\n  detailService,\n  updateService,\n  listallService,\n  deleteService,\n  fields,\n  getColumns\n}\n","import React from 'react'\nimport { injectIntl } from 'react-intl'\nimport { Detail as Detaildata } from '../../core/features/TablePagination'\nimport { path } from 'ramda'\nimport ContentWrapper from '../../core/Components/Layout/ContentWrapper'\nimport { detailService, fields, deleteService, updatePageUrl, redirectAfterDelete } from './Manifest'\nimport Moment from 'moment'\nimport AppConfig from '../../core/Config/AppConfig'\n\nfunction createRow (title, paginationConfig, dataDetail, pathArr) {\n  return (\n    <>\n      <dt>{title}</dt>\n      <dd>{path([paginationConfig.serviceName, ...pathArr], dataDetail) || '-'}</dd>\n    </>\n  )\n}\n\nfunction Comp (props) {\n  const { match, history } = props\n  const paginationConfig = {\n    serviceName: detailService,\n    serviceDeleteName: deleteService,\n    fields: fields\n  }\n\n  // const subjectId = path([paginationConfig.serviceName, 'subject_id', '_id'], dataDetail)\n  // const courseId = path([paginationConfig.serviceName, 'subject_id', 'course_id', '_id'], dataDetail)\n  return (\n    <ContentWrapper\n      pageTitle='Anggota Tim'\n      breadcrumb={[\n        { title: 'Beranda', link: AppConfig.appHomePage },\n        // { title: 'Course', link: '/course', isActive: true },\n        // { title: 'Course Detail', link: `/course/detail/${courseId}`, isActive: true },\n        // { title: 'Subject Detail', link: `/subject/detail/${subjectId}`, isActive: true },\n        { title: 'Anggota Tim', link: null, isActive: true }\n      ]}\n      contentHeaderTitle='Anggota Tim'\n      isNeedLoggedin\n    >\n      <div className='row'>\n        <div className='col-md-12'>\n          <Detaildata\n            id={match.params._id}\n            updateHref={updatePageUrl(match.params._id)}\n            formTitle='Anggota Tim'\n            paginationConfig={paginationConfig}\n            child={(dataDetail) => {\n              let createdAt = Moment(path([paginationConfig.serviceName, 'created_at'], dataDetail))\n              if (createdAt && createdAt.isValid()) createdAt = createdAt.format('YYYY-MM-DD HH:mm:ss')\n              else createdAt = ''\n              let updatedAt = Moment(path([paginationConfig.serviceName, 'updated_at'], dataDetail))\n              if (updatedAt && updatedAt.isValid()) updatedAt = updatedAt.format('YYYY-MM-DD HH:mm:ss')\n              else updatedAt = ''\n              return (\n                <dl>\n                  {createRow('Nama', paginationConfig, dataDetail, ['user_id', 'full_name'])}\n                  {createRow('Toko', paginationConfig, dataDetail, ['toko_id', 'name'])}\n                  {createRow('Dibuat Oleh', paginationConfig, dataDetail, ['created_by', 'full_name'])}\n                  {createRow('Diperbaharui Oleh', paginationConfig, dataDetail, ['updated_by', 'full_name'])}\n                  <dt>Tanggal Dibuat</dt>\n                  <dd>{createdAt}</dd>\n                  <dt>Tanggal Diperbaharui</dt>\n                  <dd>{updatedAt}</dd>\n                  {/* {createRow('Website', paginationConfig, dataDetail, ['website'])}\n                  {createRow('Facebook', paginationConfig, dataDetail, ['facebook'])}\n                  {createRow('Instagram', paginationConfig, dataDetail, ['instagram'])}\n                  {createRow('Youtube', paginationConfig, dataDetail, ['youtube'])}\n                  {createRow('Description', paginationConfig, dataDetail, ['description'])}\n                  {createRow('Status', paginationConfig, dataDetail, ['status'])} */}\n                </dl>\n              )\n            }}\n            footerCard={dataDetail => {\n              // const subjectId = path([paginationConfig.serviceName, 'subject_id', '_id'], dataDetail)\n              return (\n                <>\n                  <button style={{ width: 100 }} type='button' className='btn bg-gradient-danger' data-toggle='modal' data-target='#modal-danger'>Hapus</button>\n                  <button style={{ width: 150, marginLeft: 5 }} onClick={() => history.push(`/tokoonline/detail/${match.params.toko_id}`)} type='button' className='btn bg-gradient-primary'>Toko Detail</button>\n                </>\n              )\n            }}\n            modalFooter={(dataDetail, tablepaginationDeleteData) => {\n              // const subjectId = path([paginationConfig.serviceName, 'subject_id', '_id'], dataDetail)\n              return (\n                <>\n                  <button id='buttonCloseModal' type='button' className='btn btn-outline-light' data-dismiss='modal'>Batal</button>\n                  <button type='button' className='btn btn-outline-light' onClick={() => tablepaginationDeleteData({ id: match.params._id, serviceName: paginationConfig.serviceDeleteName, redirectAfterDelete: redirectAfterDelete(match.params.toko_id), history })}>Hapus</button>\n                </>\n              )\n            }}\n          />\n        </div>\n      </div>\n\n    </ContentWrapper>\n  )\n}\n\nexport default injectIntl(Comp)\n"],"names":["basePath","AppConfig","entity","redirectAfterCreate","tokoId","redirectAfterDelete","detailPageUrl","id","updatePageUrl","createPageUrl","createNewButtonLabel","listallPageTitle","detailPageTitle","entityName","updatePageTitle","updateService","detailService","listallService","deleteService","fields","getColumns","history","Header","accessor","Cell","p","className","type","role","to","cell","value","createPageTitle","createService","createRow","title","paginationConfig","dataDetail","pathArr","path","serviceName","injectIntl","props","match","serviceDeleteName","pageTitle","breadcrumb","link","isActive","contentHeaderTitle","isNeedLoggedin","params","_id","updateHref","formTitle","child","createdAt","Moment","isValid","format","updatedAt","footerCard","style","width","marginLeft","onClick","push","toko_id","modalFooter","tablepaginationDeleteData"],"sourceRoot":""}