{"version":3,"file":"static/js/4308.e058c80f.chunk.js","mappings":"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","sources":["Pages/TokoPo/Manifest.js","Pages/TokoPo/PageList.js"],"sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Moment from 'moment'\nimport AppConfig from '../../core/Config/AppConfig'\nconst basePath = AppConfig.basePath\n\nconst entityName = 'PurchaseOrder'\nconst entity = 'purchaseorder'\nconst serviceEntity = 'TokoPo'\n\nexport const redirectAfterCreate = '/' + entity + '/detail'\nexport const redirectAfterDelete = '/' + entity\nexport const detailPageUrl = (id) => (`/${entity}/detail/${id}`)\nexport const upsertPageUrl = (id) => (`/${entity}/upsert${id ? '/' + id : ''}`)\nexport const listallPageUrl = () => (`/${entity}`)\nexport const createNewButtonLabel = 'Buat Pesanan Baru'\nexport const createPageTitle = 'Buat order baru'\nexport const listallPageTitle = 'Data Pembelian'\nexport const detailPageTitle = 'Data Detail Pembelian'\nexport const upsertPageTitle = 'Form ' + entityName\nexport const upsertService = 'upsert' + serviceEntity\nexport const createService = 'create' + serviceEntity\nexport const detailService = 'getDetail' + serviceEntity\nexport const listallService = 'getAll' + serviceEntity + 's'\nexport const deleteService = 'delete' + serviceEntity\nexport const fields = '_id,payment_link_id,payment_status,pg_trx_id,total_weight,shipping_currier_vendor,shipping_postal_code, isneed_shipping, payment_method, payment_method_id{_id,title,description},notes,postal_fee_type,action,create_from,payment_date,shipping_currier,payment_page_url,full_name,phone_number,unique_code,invoice_code,email,session_id,device_id,shipping_subcity,shipping_city,shipping_province,shipping_address,total_product_amount,total_amount,shipping_amount,cart_id{_id, notes, count, amount, toko_id{_id, name, address, province, city, subcity}, product_id{_id, price, isneed_shipping, weight, name}},toko_id{_id, name, address, province, city, subcity},created_at,updated_at,created_by{full_name},updated_by{full_name}'\nexport const getColumns = (history, intl) => [\n  {\n    Header: 'Act',\n    accessor: '_id',\n    Cell: p => (\n      <div className='btn-group'>\n        <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n          <span className='sr-only'>Toggle Dropdown</span>\n        </button>\n        <div className='dropdown-menu' role='menu'>\n          <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate}/${p.cell.value}`}>Detail</Link>\n        </div>\n      </div>)\n  },\n  {\n    Header: 'Status',\n    accessor: p => {\n      // p.action === 'checkoutProcess' ? 'proses checkout' : p.action === 'paymentProcess' ? 'proses pembayaran' : '-' }\n      const map = {\n        paymentProcess: 'proses pembayaran',\n        checkoutProcess: 'proses checkout',\n        doPayment: 'Pembayaran Selesai',\n        paymentSuccess: 'Pembayaran Selesai',\n        paymentFailed: 'Pembayaran Selesai'\n      }\n      return map[p.action] || '-'\n    }\n  },\n  { Header: 'PG Ref No.', accessor: 'pg_trx_id' },\n  { Header: 'Status Pembayaran', accessor: 'payment_status' },\n  { Header: 'Payment Method', accessor: 'payment_method' },\n  { Header: 'Nama', accessor: 'full_name' },\n  { Header: 'No Invoice', accessor: 'invoice_code' },\n  { Header: 'Toko', accessor: 'toko_id.name' },\n  {\n    Header: 'Total Pembayaran',\n    accessor: p => {\n      return intl.formatNumber(p.total_amount, { style: 'currency', currency: AppConfig.currency, minimumFractionDigits: 0, maximumFractionDigits: 0 })\n    }\n    // accessor: p => (<T value={p.total_amount} style='currency' currency='IDR' />)\n  },\n  {\n    Header: 'Tanggal Transaksi',\n    accessor: 'updated_at',\n    Cell: d => {\n      let data = Moment(d.cell.value)\n      if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n      else data = ''\n      return (<span>{`${data}`}</span>)\n    }\n  },\n  {\n    Header: 'Tanggal Pembayaran',\n    accessor: 'payment_date',\n    Cell: d => {\n      let data = Moment(d.cell.value)\n      if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n      else data = ''\n      return (<span>{`${data}`}</span>)\n    }\n  },\n  // { Header: 'No Telepon', accessor: 'phone_number' },\n  {\n    Header: 'Link Pembayaran',\n    accessor: p => {\n      if (!p.session_id) return null\n      return (\n        <button\n          type='button' onClick={(e) => {\n            var dummy = document.createElement('textarea')\n            document.body.appendChild(dummy)\n            dummy.value = `${AppConfig.hostBackend}/payment/${p.payment_link_id}`\n            dummy.select()\n            document.execCommand('copy')\n            document.body.removeChild(dummy)\n\n            // var copyText = document.createElement('input')\n            // copyText.type = 'text'\n            // copyText.style.cssText = 'display: none;'\n            // copyText.value = `${AppConfig.hostBackend}/payment/${detail.session_id}`\n            // // element.id = '';\n            // // var copyText = document.getElementById('linkPaymentId')\n            // copyText.select()\n            // copyText.setSelectionRange(0, 99999)\n            // document.execCommand('copy')\n            alert('Copied the text: ' + dummy.value)\n          }} className='btn btn-outline-primary'\n        >\n          <i className='fa fa-copy' /> Link Pembayaran\n        </button>)\n    }\n  }\n  // { Header: 'Email', accessor: 'email' },\n  // { Header: 'ID Sesi', accessor: 'session_id' },\n  // { Header: 'Jasa Pengiriman', accessor: 'shipping_currier' },\n  // { Header: 'Catatan', accessor: 'notes' },\n  //   { Header: 'category', accessor: p => (<span>{(_.map(p.category_id, v => v.title) || []).join(', ')}</span>) },\n  //   { Header: 'toko', accessor: p => (<span>{(_.map(p.toko_id, v => v.name) || []).join(', ')}</span>) },\n  // { Header: 'picture', accessor: p => (<span>{p.image_id.filename}.{p.image_id.file_type}</span>) },\n  //   {\n  //     Header: 'created_at',\n  //     accessor: 'created_at',\n  //     Cell: d => {\n  //       let data = Moment(d.cell.value)\n  //       if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //       else data = ''\n  //       return (<span>{`${data}`}</span>)\n  //     }\n  //   },\n\n  // {\n  //   Header: 'Tanggal Pembayaran',\n  //   accessor: 'payment_date',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // }\n  // { Header: 'created by', accessor: 'created_by.full_name' }\n//   { Header: 'updated by', accessor: 'updated_by.full_name' }\n  // { Header: 'created at', accessor: 'created_at' },\n  // { Header: 'updated at', accessor: 'updated_at' }\n]\n\nexport default {\n  redirectAfterCreate,\n  redirectAfterDelete,\n  detailPageUrl,\n  upsertPageUrl,\n  // createPageUrl,\n  createNewButtonLabel,\n  createPageTitle,\n  listallPageTitle,\n  detailPageTitle,\n  // updatePageTitle,\n  // createService,\n  detailService,\n  // updateService,\n  listallService,\n  deleteService,\n  upsertService,\n  fields,\n  getColumns,\n  listallPageUrl\n}\n","import React, { PureComponent } from 'react'\nimport { connect } from 'react-redux'\nimport { injectIntl } from 'react-intl'\nimport DatePicker from 'react-datepicker'\nimport styled from 'styled-components'\nimport ContentWrapper from '../../core/Components/Layout/ContentWrapper'\nimport { Table, Filter } from '../../core/features/TablePagination'\nimport AppConfig from '../../core/Config/AppConfig'\nimport { listallService, fields, listallPageTitle, upsertPageUrl, createNewButtonLabel, getColumns } from './Manifest'\n\nconst Styles = styled.div`\n  .react-datepicker-wrapper {\n    width: 100%;\n  }\n`\n\nclass Comp extends PureComponent {\n  constructor (props) {\n    super(props)\n    this.state = {\n      columns: getColumns(props.history, this.props.intl),\n      startDate: '',\n      endDate: ''\n    }\n  }\n\n  render () {\n    const { columns, startDate, endDate } = this.state\n    const { lang } = this.props\n    // console.log('this.statethis.statethis.state', this.state)\n    return (\n      <ContentWrapper\n        pageTitle={listallPageTitle}\n        breadcrumb={[{ title: 'Beranda', link: AppConfig.appHomePage }, { title: listallPageTitle, link: null, isActive: true }]}\n        contentHeaderTitle={listallPageTitle}\n        isNeedLoggedin\n      >\n        <div className='row'>\n          <div className='col-md-12'>\n            <Styles>\n              <Filter\n                serviceName={listallService}\n                child={(tablepaginationOnChangeFilter, filter = {}) => (\n                  <div className='row'>\n                    <div className='col-sm-6'>\n                      <div className='form-group'>\n                        {/* <SearchField placeholder='Cari berdasarkan nama' width={300} value={filter.string_to_search || ''} tablepaginationOnChangeFilter={tablepaginationOnChangeFilter} listallService={listallService} /> */}\n                        {/* <label htmlFor='string_to_search'>Cari</label>\n                        <input type='text' className='form-control' value={filter.string_to_search || ''} id='string_to_search' placeholder='' onChange={e => tablepaginationOnChangeFilter({ serviceName: listallService, fieldName: 'string_to_search', fieldValue: e.target.value })} /> */}\n                      </div>\n                      <div className='row'>\n                        <div className='col-sm-6'>\n                          <div className='form-group'>\n                            <label htmlFor='updated_at'>Tanggal Transaksi Mulai</label>\n                            <DatePicker\n                              style={{ width: '100%' }}\n                              locale={lang}\n                              className='form-control' selected={startDate} onChange={date => {\n                                tablepaginationOnChangeFilter({ serviceName: listallService, fieldName: 'start_date', fieldValue: new Date(date).getTime() })\n                                this.setState({ startDate: date })\n                              }}\n                            />\n                            {/* <input id='filter_start_date' type='text' className='form-control' placeholder='' /> */}\n                          </div>\n                        </div>\n                        <div className='col-sm-6'>\n                          <div className='form-group'>\n                            <label htmlFor='updated_at'>Tanggal Transaksi Sampai</label>\n                            <DatePicker\n                              style={{ width: '100%' }}\n                              className='form-control' selected={endDate} onChange={date => {\n                                this.setState({ endDate: date })\n                                tablepaginationOnChangeFilter({ serviceName: listallService, fieldName: 'start_date', fieldValue: new Date(date).getTime() })\n                              }}\n                            />\n                            {/* <input id='filter_end_date' type='text' className='form-control' placeholder='' /> */}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              />\n            </Styles>\n            <Table\n              listallServiceName={listallService}\n              fields={fields}\n              columns={columns}\n              createHref={upsertPageUrl()}\n              createNewButtonLabel={createNewButtonLabel}\n              cardTitle={listallPageTitle}\n              withSearchField\n              widthSearchField={300}\n            />\n          </div>\n        </div>\n      </ContentWrapper>\n    )\n  }\n}\nexport default connect((state, ownProps) => ({ lang: state.app.lang }))(injectIntl(Comp))\n"],"names":["basePath","AppConfig","entity","redirectAfterCreate","redirectAfterDelete","upsertPageUrl","id","listallPageUrl","createNewButtonLabel","listallPageTitle","detailPageTitle","upsertPageTitle","upsertService","detailService","listallService","deleteService","fields","getColumns","history","intl","Header","accessor","Cell","p","className","type","role","to","cell","value","paymentProcess","checkoutProcess","doPayment","paymentSuccess","paymentFailed","action","formatNumber","total_amount","style","currency","minimumFractionDigits","maximumFractionDigits","d","data","Moment","isValid","format","session_id","onClick","e","dummy","document","createElement","body","appendChild","payment_link_id","select","execCommand","removeChild","alert","Styles","styled","Comp","props","state","columns","startDate","endDate","this","lang","pageTitle","breadcrumb","title","link","isActive","contentHeaderTitle","isNeedLoggedin","serviceName","child","tablepaginationOnChangeFilter","htmlFor","width","locale","selected","onChange","date","fieldName","fieldValue","Date","getTime","setState","listallServiceName","createHref","cardTitle","withSearchField","widthSearchField","PureComponent","connect","ownProps","app","injectIntl"],"sourceRoot":""}