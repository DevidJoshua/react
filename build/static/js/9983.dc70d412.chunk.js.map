{"version":3,"file":"static/js/9983.dc70d412.chunk.js","mappings":"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","sources":["Pages/CustomerEmail/Manifest.js","Pages/EmailBatch/Manifest.js","Pages/EmailBlast/Manifest.js","Pages/EmailBlast/PageUpdate.js","Pages/TokoOnline/Manifest.js","features/TextEditor/components/FieldTextArea.js"],"sourcesContent":["const entityName = 'CustomerEmail'\nconst entity = 'customeremail'\nconst serviceEntity = 'CustomerEmail'\n\nexport const redirectAfterCreate = '/' + entity + '/detail'\nexport const redirectAfterDelete = '/' + entity\nexport const detailPageUrl = (id) => (`/${entity}/detail/${id}`)\nexport const updatePageUrl = (id) => (`/${entity}/update/${id}`)\nexport const createPageUrl = ({ batchId }) => (`/${entity}/create/${batchId}`)\nexport const createNewButtonLabel = 'label-create_customer_email'\nexport const createPageTitle = 'label-create_customer_email'\nexport const listallPageTitle = 'Email Customer'\nexport const detailPageTitle = 'Detail Email Customer'\nexport const updatePageTitle = 'Update ' + entityName\nexport const createService = 'create' + serviceEntity\nexport const detailService = 'getDetail' + serviceEntity\nexport const updateService = 'update' + serviceEntity\nexport const listallService = 'getAll' + serviceEntity + 's'\nexport const listallByBatchIdService = 'getAll' + serviceEntity + 'sByBatchId'\nexport const deleteService = 'delete' + serviceEntity\nexport const fields = '_id,email,batch_id,created_at,updated_at,created_by{full_name},updated_by{full_name}'\nexport const getColumns = (history) => [\n  // {\n  //   Header: 'Act',\n  //   accessor: '_id',\n  //   Cell: p => (\n  //     <div className='btn-group'>\n  //       <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n  //         <span className='sr-only'>Toggle Dropdown</span>\n  //       </button>\n  //       <div className='dropdown-menu' role='menu'>\n  //         <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate}/${p.cell.value}`}>Detail</Link>\n  //       </div>\n  //     </div>)\n  // },\n  { Header: 'Email', accessor: 'email' }\n]\nexport default {\n  redirectAfterCreate,\n  redirectAfterDelete,\n  detailPageUrl,\n  updatePageUrl,\n  createPageUrl,\n  createNewButtonLabel,\n  createPageTitle,\n  listallPageTitle,\n  detailPageTitle,\n  updatePageTitle,\n  createService,\n  detailService,\n  updateService,\n  listallService,\n  listallByBatchIdService,\n  deleteService,\n  fields,\n  getColumns\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport AppConfig from '../../core/Config/AppConfig'\nconst basePath = AppConfig.basePath\n\n// const entityName = 'EmailBatch'\nconst entity = 'emailbatch'\nconst serviceEntity = 'EmailBatch'\n\nexport const redirectAfterCreate = '/' + entity + '/detail'\nexport const redirectAfterDelete = '/' + entity\nexport const detailPageUrl = (id) => (`/${entity}/detail/${id}`)\nexport const upsertPageUrl = (id) => (`/${entity}/upsert${id ? '/' + id : ''}`)\nexport const listallPageUrl = () => (`/${entity}`)\nexport const createNewButtonLabel = 'Buat Grup Email Customer'\nexport const createPageTitle = 'Buat Grup Email Customer'\nexport const listallPageTitle = 'Email Grup'\nexport const detailPageTitle = 'Detail Email Grup'\nexport const upsertPageTitle = 'Form Grup Email'\nexport const createService = 'create' + serviceEntity\nexport const detailService = 'getDetail' + serviceEntity\nexport const upsertService = 'upsert' + serviceEntity\nexport const listallService = 'getAll' + serviceEntity + 's'\nexport const deleteService = 'delete' + serviceEntity\nexport const fields = '_id,customer_email_ids{_id, email},file_ids{_id, filename, filenameorigin, file_type},title,description,created_at,updated_at,created_by{full_name},updated_by{full_name}'\nexport const getColumns = (history) => [\n  {\n    Header: '',\n    accessor: '_id',\n    Cell: p => (\n      <div className='btn-group'>\n        <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n          <span className='sr-only'>Toggle Dropdown</span>\n        </button>\n        <div className='dropdown-menu' role='menu'>\n          <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate}/${p.cell.value}`}>Detail</Link>\n        </div>\n      </div>)\n  },\n  { Header: 'Judul', accessor: 'title' },\n  { Header: 'Keterangan', accessor: 'description' }\n  // {\n  //   Header: 'Toko',\n  //   accessor: 'toko_id',\n  //   Cell: d => {\n  //     // let data = Moment(d.cell.value)\n  //     // if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     // else data = ''\n  //     const toko = (_.map(d.cell.value || [], (v, k) => v.name) || []).join(', ')\n  //     return (<span>{`${toko}`}</span>)\n  //   }\n  // }\n  // {\n  //   Header: 'Terakhir Dikirim',\n  //   accessor: 'last_sent',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  // {\n  //   Header: 'Tanggal Dibuat',\n  //   accessor: 'created_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  // {\n  //   Header: 'Tanggal Dirubah',\n  //   accessor: 'updated_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  // { Header: 'Dibuat Oleh', accessor: 'created_by.full_name' },\n  // { Header: 'Dirubah Oleh', accessor: 'updated_by.full_name' }\n  // { Header: 'created at', accessor: 'created_at' },\n  // { Header: 'updated at', accessor: 'updated_at' }\n]\nexport default {\n  redirectAfterCreate,\n  redirectAfterDelete,\n  detailPageUrl,\n  upsertPageUrl,\n  // createPageUrl,\n  createNewButtonLabel,\n  createPageTitle,\n  listallPageTitle,\n  detailPageTitle,\n  // updatePageTitle,\n  // createService,\n  detailService,\n  // updateService,\n  listallService,\n  deleteService,\n  upsertService,\n  fields,\n  getColumns,\n  listallPageUrl,\n  upsertPageTitle\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Moment from 'moment'\nimport AppConfig from '../../core/Config/AppConfig'\nconst basePath = AppConfig.basePath\n\nconst entityName = 'EmailBlast'\nconst entity = 'emailblast'\nconst serviceEntity = 'EmailBlast'\n\nexport const redirectAfterCreate = '/' + entity + '/detail'\nexport const redirectAfterDelete = '/' + entity\nexport const detailPageUrl = (id) => (`/${entity}/detail/${id}`)\nexport const upsertPageUrl = (id) => (`/${entity}/upsert${id ? '/' + id : ''}`)\nexport const listallPageUrl = () => (`/${entity}`)\nexport const createNewButtonLabel = 'Buat Email Blast Baru'\nexport const createPageTitle = 'Buat Email Blast'\nexport const listallPageTitle = 'Email Blast'\nexport const detailPageTitle = 'Detail Email Blast'\nexport const upsertPageTitle = 'Form ' + entityName\nexport const createService = 'create' + serviceEntity\nexport const detailService = 'getDetail' + serviceEntity\nexport const upsertService = 'upsert' + serviceEntity\nexport const listallService = 'getAll' + serviceEntity + 's'\nexport const deleteService = 'delete' + serviceEntity\nexport const fields = '_id,email_batch_id{_id,title, customer_email_ids{email}},toko_id{_id,name,email},name,subject,last_sent,content1,created_at,updated_at,created_by{full_name},updated_by{full_name}'\nexport const getColumns = (history) => [\n  {\n    Header: 'Act',\n    accessor: '_id',\n    Cell: p => (\n      <div className='btn-group'>\n        <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n          <span className='sr-only'>Toggle Dropdown</span>\n        </button>\n        <div className='dropdown-menu' role='menu'>\n          <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate}/${p.cell.value}`}>Detail</Link>\n        </div>\n      </div>)\n  },\n  { Header: 'Name', accessor: 'name' },\n  { Header: 'Subject', accessor: 'subject' },\n  // {\n  //   Header: 'Toko',\n  //   accessor: 'toko_id',\n  //   Cell: d => {\n  //     // let data = Moment(d.cell.value)\n  //     // if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     // else data = ''\n  //     const toko = (_.map(d.cell.value || [], (v, k) => v.name) || []).join(', ')\n  //     return (<span>{`${toko}`}</span>)\n  //   }\n  // }\n  {\n    Header: 'Terakhir Dikirim',\n    accessor: 'last_sent',\n    Cell: d => {\n      console.log('asdfadsfdsf' + d.cell.value)\n      if (!d.cell.value) return '-'\n      let data = Moment(d.cell.value)\n      if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n      else data = ''\n      return (<span>{`${data}`}</span>)\n    }\n  },\n  // {\n  //   Header: 'Tanggal Dibuat',\n  //   accessor: 'created_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  // {\n  //   Header: 'Tanggal Dirubah',\n  //   accessor: 'updated_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  // { Header: 'Dibuat Oleh', accessor: 'created_by.full_name' },\n  // { Header: 'Dirubah Oleh', accessor: 'updated_by.full_name' }\n  // { Header: 'created at', accessor: 'created_at' },\n  // { Header: 'updated at', accessor: 'updated_at' }\n]\nexport default {\n  redirectAfterCreate,\n  redirectAfterDelete,\n  detailPageUrl,\n  upsertPageUrl,\n  // createPageUrl,\n  createNewButtonLabel,\n  createPageTitle,\n  listallPageTitle,\n  detailPageTitle,\n  // updatePageTitle,\n  // createService,\n  detailService,\n  // updateService,\n  listallService,\n  deleteService,\n  upsertService,\n  fields,\n  getColumns,\n  listallPageUrl\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\n// import Immutable from 'seamless-immutable'\nimport { Detail, Multiselect, Table, CardWrapperCon } from '../../core/features/TablePagination'\nimport { FieldTextArea } from '../../features/TextEditor/components'\n// import Loader from '../../core/Components/Loader/Loader'\nimport ContentWrapper from '../../core/Components/Layout/ContentWrapper'\nimport { injectIntl } from 'react-intl'\n// import { path } from 'ramda'\nimport AppConfig from '../../core/Config/AppConfig'\nimport { upsertPageUrl, deleteService, upsertPageTitle, listallPageUrl, listallPageTitle, upsertService, fields, detailService, redirectAfterDelete } from './Manifest'\nimport TokoOnlineManifest from '../TokoOnline/Manifest'\nimport EmailBatchManifest from '../EmailBatch/Manifest'\nimport ManifestCustomerEmail from '../CustomerEmail/Manifest'\nimport TablepaginationActions from '../../core/features/TablePagination/redux'\n\nconst ButtonSaveAndSendEmail = connect(\n  (state, ownProps) => {\n    var serviceName = ownProps.upsertServiceName\n    var formSchema = (state.tablepagination.formSchema || {})[serviceName] || {}\n    var redirectAfterUpsert = (state.tablepagination.redirectAfterUpsert || {})[serviceName]\n    var fileArray = (state.tablepagination.fileArray || {})[serviceName] || {}\n    return { formSchema, serviceName, fileArray, redirectAfterUpsert }\n  },\n  dispatch => ({ tablepaginationSubmitForm: data => dispatch(TablepaginationActions.tablepaginationSubmitForm(data)) })\n)((props) => {\n  const {\n    tablepaginationSubmitForm,\n    upsertServiceName,\n    history,\n    payload,\n    redirectAfterUpsert,\n    formSchema\n  } = props\n  return (\n    <>\n      <button type='button' className='btn btn-block bg-gradient-info btn-lg' data-toggle='modal' data-target='#modal-send-email'>Simpan dan Kirim</button>\n      <div className='modal fade' id='modal-send-email'>\n        <div className='modal-dialog'>\n          <div className='modal-content bg-danger'>\n            <div className='modal-header'>\n              <h4 className='modal-title'>Konfirmasi</h4>\n              <button type='button' className='close' data-dismiss='modal' aria-label='Close'>\n                <span aria-hidden='true'>×</span>\n              </button>\n            </div>\n            <div className='modal-body'>\n              <p>Konfirmasi Kirim Email</p>\n            </div>\n            <div className='modal-footer justify-content-between'>\n              <button id='buttonCloseModal' type='button' className='btn btn-outline-light' data-dismiss='modal'>Cancel</button>\n              <button\n                type='button' className='btn btn-outline-light' onClick={() => {\n                  // tablepaginationOnChangeFormFunc({ serviceName: paginationConfig.serviceName, fieldName: 'trigger_send', fieldValue: 'Y' })\n                  // const el = document.getElementById('buttonCloseModal')\n                  // if (el) el.click()\n                  tablepaginationSubmitForm({\n                    payload: { ...payload, trigger_send: 'Y' },\n                    serviceName: upsertServiceName,\n                    history,\n                    redirectAfterUpsert,\n                    formSchema\n                  })\n                  var link = document.getElementById('buttonCloseModal')\n                  if (link) link.click()\n                }}\n              >Kirim\n              </button>\n            </div>\n          </div>\n          {/* /.modal-content */}\n        </div>\n        {/* /.modal-dialog */}\n      </div>\n    </>\n  )\n})\n\nconst FormUpdate = (props) => {\n  const {\n    tablepaginationOnChangeForm,\n    dataDetail,\n    payload,\n    upsertServiceName,\n    id,\n    history,\n    tablepaginationResetForm,\n    formTitle\n    // history\n  } = props\n  // useMemo(() => tablepaginationResetForm({ serviceName: upsertServiceName, defaultFormValue: { _id: id } }), [])\n  React.useEffect(() => {\n    const defaultFormValue = {}\n    if (id) defaultFormValue._id = id\n    tablepaginationResetForm({ isInitialReset: true, serviceName: upsertServiceName, defaultFormValue })\n    // if (id) tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: '_id', fieldValue: id, resetValue: id })\n  }, [tablepaginationResetForm, upsertServiceName, id])\n  // if (dataDetail) {\n  //   tablepaginationResetForm({ serviceName: upsertServiceName, defaultFormValue: { _id: id } })\n  // }\n  // if (dataDetail) {\n  // useMemo(() => {\n  //   return tablepaginationResetForm({ serviceName: upsertServiceName, defaultFormValue: { _id: dataDetail._id } })\n  // }, [upsertServiceName, tablepaginationResetForm, dataDetail])\n  // }\n  // const [payloadValueOriginal, setPayloadValueOriginal] = React.useState([])\n  // console.log('payloadpayloadpayload===>', payload.title)\n  // console.log('payloadpayloadpayload===>', dataDetail.title)\n  return (\n    <>\n      <div className='row'>\n        <div className='col-sm-6'>\n          <CardWrapperCon formTitle={formTitle}>\n            <div className='form-group'>\n              <label htmlFor='name'>Nama Email</label>\n              <input type='text' className='form-control' id='name' placeholder='' value={typeof payload.name !== 'undefined' ? payload.name : dataDetail.name || ''} onChange={e => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'name', fieldValue: e.target.value })} />\n            </div>\n            <div className='form-group'>\n              <label htmlFor='subject'>Subject</label>\n              <input type='text' className='form-control' id='subject' placeholder='' value={typeof payload.subject !== 'undefined' ? payload.subject : dataDetail.subject || ''} onChange={e => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'subject', fieldValue: e.target.value })} />\n            </div>\n            <div className='form-group'>\n              <label htmlFor='toko_id'>Pilih Toko</label>\n              <br />\n              {/* <Combobox\n                className='form-control'\n                label='pilih toko'\n                labelButton='Pilih'\n                labelColumn='Pilih'\n                optionColumnValue='_id'\n                optionColumnLabel='name'\n                getColumns={({ onChange }) => [\n                  { Header: 'Nama Toko', accessor: 'name' }\n                ]}\n                listallServiceName={TokoOnlineManifest.listallService}\n                upsertServiceName={upsertServiceName}\n                fields={TokoOnlineManifest.fields}\n                defaultValue={typeof payload.toko_id !== 'undefined' ? payload.toko_id : (dataDetail.toko_id || {})._id}\n                onChange={({ val }) => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'toko_id', fieldValue: val })}\n              /> */}\n              <Multiselect\n                isMulti={false}\n                className='form-control'\n                label='Pilih Toko'\n                labelButton='Pilih'\n                labelColumn='Pilih'\n                placeholder='Pilih'\n                optionColumnValue='_id'\n                optionColumnLabel='name'\n                payloadValue={payload.toko_id}\n                defaultValueOriginal={dataDetail.toko_id}\n                getColumns={({ onChange }) => []}\n                listallServiceName={TokoOnlineManifest.listallService}\n                fields={TokoOnlineManifest.fields}\n                onChange={({ val }) => {\n                  tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'toko_id', fieldValue: val })\n                }}\n              />\n            </div>\n            <div className='form-group'>\n              <label htmlFor='email_batch_id'>Grup Email Tujuan</label>\n              <br />\n              <Multiselect\n                isMulti={false}\n                className='form-control'\n                label='Pilih Grup Email Tujuan'\n                labelButton='Pilih'\n                labelColumn='Pilih'\n                placeholder='Pilih'\n                optionColumnValue='_id'\n                optionColumnLabel='title'\n                payloadValue={payload.email_batch_id}\n                defaultValueOriginal={dataDetail.email_batch_id}\n                getColumns={({ onChange }) => []}\n                listallServiceName={EmailBatchManifest.listallService}\n                fields={EmailBatchManifest.fields}\n                onChange={({ val }) => {\n                  tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'email_batch_id', fieldValue: val })\n                }}\n              />\n              {/* <Combobox\n                className='form-control'\n                label='pilih grup email'\n                labelButton='Pilih'\n                labelColumn='Pilih'\n                optionColumnValue='_id'\n                optionColumnLabel='title'\n                getColumns={({ onChange }) => [\n                  { Header: 'Nama Grup Email', accessor: 'title' }\n                ]}\n                listallServiceName={EmailBatchManifest.listallService}\n                upsertServiceName={upsertServiceName}\n                fields={EmailBatchManifest.fields}\n                defaultValue={typeof payload.email_batch_id !== 'undefined' ? payload.email_batch_id : (dataDetail.email_batch_id || {})._id}\n                onChange={({ val }) => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'email_batch_id', fieldValue: val })}\n              /> */}\n              {/* <br />\n              <TableCon\n                columns={CustomerEmailManifest.getColumns(history)}\n                listallServiceName={CustomerEmailManifest.listallByBatchIdService}\n                fields={CustomerEmailManifest.fields}\n                history={history}\n                whereCondition={JSON.stringify({ batch_id: payload.email_batch_id || (dataDetail.email_batch_id || {})._id })}\n              >\n                <CustomerEmail />\n              </TableCon> */}\n            </div>\n            <div className='form-group'>\n            <label htmlFor='content1'>Isi Email</label>\n            <FieldTextArea textEditor forProcess={typeof id !== 'undefined' ? 'update' : 'create'} dataId={id} initValue={dataDetail.content1} defaultValue={typeof payload.content1 !== 'undefined' ? payload.content1 : dataDetail.content1} onChange={(v) => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'content1', fieldValue: v })} idElement='content1' />\n          </div>\n          </CardWrapperCon>\n        </div>\n        <div className='col-sm-6'>\n          {(dataDetail.email_batch_id || {})._id &&\n            <Table\n              listallServiceName={ManifestCustomerEmail.listallByBatchIdService}\n              fields={ManifestCustomerEmail.fields}\n              columns={ManifestCustomerEmail.getColumns(history)}\n              // createHref={ManifestEmailBatch.upsertPageUrl()}\n              // createNewButtonLabel={ManifestEmailBatch.createNewButtonLabel}\n              cardTitle={ManifestCustomerEmail.listallPageTitle}\n              whereCondition={JSON.stringify({ batch_id: payload.email_batch_id !== undefined ? payload.email_batch_id : (dataDetail.email_batch_id || {})._id })}\n            />}\n        </div>\n      </div>\n      <div className='row'>\n        <div className='col-md-3'>\n          <ButtonSaveAndSendEmail\n            upsertServiceName={upsertServiceName}\n            history={history}\n            payload={payload}\n          />\n          <br />\n        </div>\n      </div>\n    </>\n  )\n}\n\nfunction Comp (props) {\n  const { match, history } = props\n  // const [dataDetail, setDataDetail] = React.useState([])\n  // const [dataId, setDataId] = React.useState('')\n  // const [servicePayload, setServicePayload] = React.useState({})\n  // useEffect(() => {\n  //   const pLoad = servicePayload[paginationConfig.serviceName] || {}\n  //   if (pLoad.trigger_send === 'Y' || pLoad.trigger_send === 'N') {\n  //     const el = document.getElementById('button-submit-form')\n  //     if (el) el.click()\n  //   }\n  // }, [servicePayload])\n  // useEffect(() => {\n  //   if (tablepaginationOnChangeFormFunc) {\n  //     const dDetail = Immutable.asMutable(path([paginationConfig.serviceName], dataDetail) || {}, { deep: true })\n  //     tablepaginationOnChangeFormFunc({ serviceName: paginationConfig.serviceName, fieldName: 'name', fieldValue: dDetail.name || '' })\n  //     tablepaginationOnChangeFormFunc({ serviceName: paginationConfig.serviceName, fieldName: 'subject', fieldValue: dDetail.subject || '' })\n  //     tablepaginationOnChangeFormFunc({ serviceName: paginationConfig.serviceName, fieldName: 'content1', fieldValue: dDetail.content1 || '' })\n  //     setDataId('' + dDetail._id)\n  //   }\n  // }, [dataDetail])\n  return (\n    <ContentWrapper\n      pageTitle={upsertPageTitle}\n      breadcrumb={[\n        { title: 'Beranda', link: AppConfig.appHomePage },\n        { title: listallPageTitle, link: listallPageUrl() },\n        { title: upsertPageTitle, link: null, isActive: true }\n      ]}\n      contentHeaderTitle={upsertPageTitle}\n      isNeedLoggedin\n    >\n      <Detail\n        detailServiceName={detailService}\n        upsertServiceName={upsertService}\n        deleteServiceName={deleteService}\n        createPageUrl={upsertPageUrl()}\n        fields={fields}\n        id={match.params._id}\n        formTitle={upsertPageTitle}\n        redirectAfterDelete={redirectAfterDelete}\n        withoutWrapper\n      >\n        <FormUpdate formTitle={upsertPageTitle} history={history} />\n      </Detail>\n    </ContentWrapper>\n  )\n  // }\n}\nexport default injectIntl(Comp)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport AppConfig from '../../core/Config/AppConfig'\nconst basePath = AppConfig.basePath\n\nconst entityName = AppConfig.appName\nconst entity = 'tokoonline'\nconst serviceEntity = 'TokoTokoOnline'\n\nexport const redirectAfterCreate = '/' + entity + '/detail'\nexport const redirectAfterDelete = '/' + entity\nexport const detailPageUrl = (id) => (`/${entity}/detail/${id}`)\nexport const upsertPageUrl = (id) => (`/${entity}/upsert${id ? '/' + id : ''}`)\nexport const listallPageUrl = () => (`/${entity}`)\nexport const createNewButtonLabel = 'Buat Baru'\nexport const createPageTitle = 'Buat Baru'\nexport const listallPageTitle = 'Daftar Toko'\nexport const detailPageTitle = 'Toko Detail'\nexport const upsertPageTitle = 'Form ' + entityName\nexport const upsertService = 'upsert' + serviceEntity\nexport const createService = 'create' + serviceEntity\nexport const detailService = 'getDetail' + serviceEntity\nexport const listallService = 'getAll' + serviceEntity + 's'\nexport const deleteService = 'delete' + serviceEntity\nexport const fields = '_id,name,pgateway_id{_id,title,keyid,mid,secretkey,configs},template,image_ids{_id, filename, filenameorigin, file_type},logo{_id, filename, filenameorigin, file_type},address,email,template,plink_merchant_secret_key,province,city,subcity,slug,plink_merchant_id,plink_merchant_key_id,status,website,facebook,instagram,youtube,description,created_at,updated_at,owner{_id,full_name,email},created_by{full_name},updated_by{full_name}'\nexport const getColumns = (history) => [\n  {\n    Header: ' ',\n    accessor: '_id',\n    Cell: p => (\n      <div className='btn-group'>\n        <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n          <span className='sr-only'>Toggle Dropdown</span>\n        </button>\n        <div className='dropdown-menu' role='menu'>\n          {/* <Link className='dropdown-item' to={upsertPageUrl(p.cell.value)}>Detail</Link> */}\n          <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate}/${p.cell.value}`}>Detail</Link>\n        </div>\n      </div>)\n  },\n  { Header: 'Nama', accessor: 'name' },\n  { Header: 'website', accessor: 'website' },\n  { Header: 'facebook', accessor: 'facebook' },\n  { Header: 'instagram', accessor: 'instagram' },\n  { Header: 'youtube', accessor: 'youtube' },\n  { Header: 'status', accessor: 'status' },\n  // {\n  //   Header: 'Tanggal Diperbaharui',\n  //   accessor: 'updated_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  { Header: 'Pemilik', accessor: 'owner.full_name' }\n//   { Header: 'updated by', accessor: 'updated_by.full_name' }\n  // { Header: 'created at', accessor: 'created_at' },\n  // { Header: 'updated at', accessor: 'updated_at' }\n]\n\nexport default {\n  redirectAfterCreate,\n  redirectAfterDelete,\n  detailPageUrl,\n  upsertPageUrl,\n  createNewButtonLabel,\n  createPageTitle,\n  listallPageTitle,\n  detailPageTitle,\n  upsertPageTitle,\n  createService,\n  detailService,\n  upsertService,\n  listallService,\n  deleteService,\n  fields,\n  getColumns,\n  listallPageUrl\n}\n","import React, { useEffect } from 'react'\n// import _ from 'lodash'\nimport AppConfig from '../../../core/Config/AppConfig'\nimport { getAccessToken } from '../../../core/Utils/Utils'\n\nfunction FieldTextArea (props) {\n  const { placeholder, textEditor, defaultValue, initValue, onChange, idElement, dataId } = props\n  // const [isFirstLoad, setIsFirstLoad] = React.useState(undefined)\n  useEffect(() => {\n    console.log('valuevaluevalue initValue=>', initValue)\n    console.log('valuevaluevalue id=>', dataId)\n    if (textEditor) {\n      let isReset = false\n      // if (initValue === defaultValue && ) {\n      //   isReset = true\n      // }\n      // setCurrentValue(defaultValue)\n      if (typeof dataId !== 'undefined' && typeof defaultValue !== 'undefined') {\n        console.log('valuevaluevalue reloadddd=>', defaultValue)\n        window.activateEditorV2({\n          idElement,\n          hostBackend: AppConfig.hostBackend,\n          at: getAccessToken(),\n          cb: (content) => {\n            onChange(content)\n          },\n          isReset,\n          defaultValue\n        })\n      }\n      if (typeof dataId === 'undefined') {\n        window.activateEditorV2({\n          idElement,\n          hostBackend: AppConfig.hostBackend,\n          at: getAccessToken(),\n          cb: (content) => {\n            onChange(content)\n          },\n          isReset,\n          defaultValue\n        })\n      }\n    }\n    // setIsFirstLoad(false)\n  // })\n  }, [defaultValue, dataId, idElement, onChange, textEditor, initValue])\n\n  // if (forProcess === 'update' && _.isEmpty(dataId)) return null\n  // if (forProcess === 'update' && (dataId === 'undefined' || _.isEmpty(dataId))) return null\n  // if (forProcess === 'update' && dataId === '') return null\n\n  if (typeof dataId !== 'undefined' && !dataId) return null\n\n  // console.log('FieldTextAreaFieldTextAreaFieldTextAreaFieldTextArea dataId=>', dataId)\n  // console.log('FieldTextAreaFieldTextAreaFieldTextAreaFieldTextArea defaultValue=>', defaultValue)\n  // console.log('FieldTextAreaFieldTextAreaFieldTextAreaFieldTextArea forProcess=>', forProcess)\n  // console.log('FieldTextAreaFieldTextAreaFieldTextAreaFieldTextArea renderrrr=>')\n  return (\n    <div className='row'>\n      <div className='col-12'>\n        <div style={{ position: 'relative' }}>\n          {textEditor && <div style={{ backgroundColor: 'black', position: 'absolute', width: '100%', height: '100%', top: 0 }}><center><span style={{ color: 'green', fontSize: 30, marginTop: 200 }}>Gambar sedang diupload...</span></center></div>}\n          <div id='texareaWrapper' style={{ width: '100%', height: '100%', backgroundColor: 'black', opacity: 1 }}>\n            <textarea className='textarea' id={idElement} placeholder={placeholder || 'Isi keterangan'} value={defaultValue} style={{ width: '100%' }} onChange={(e) => onChange(e.target.value)} />\n          </div>\n        </div>\n      </div>\n    </div>\n    // <textarea className='textarea' id={idElement} placeholder='Place some text here' style={{ width: '100%', height: 200, fontSize: 14, lineHeight: 18, border: '1px solid #dddddd', padding: 10 }} value={defaultValue} onChange={(e) => onChange(e.target.value)} />\n  )\n}\nexport default FieldTextArea\n"],"names":["entity","createPageTitle","createService","fields","redirectAfterCreate","redirectAfterDelete","detailPageUrl","id","updatePageUrl","createPageUrl","batchId","createNewButtonLabel","listallPageTitle","detailPageTitle","updatePageTitle","detailService","updateService","listallService","listallByBatchIdService","deleteService","getColumns","history","Header","accessor","basePath","AppConfig","upsertPageUrl","upsertPageTitle","upsertService","Cell","p","className","type","role","to","cell","value","listallPageUrl","d","console","log","data","Moment","isValid","format","ButtonSaveAndSendEmail","connect","state","ownProps","serviceName","upsertServiceName","formSchema","tablepagination","redirectAfterUpsert","fileArray","dispatch","tablepaginationSubmitForm","TablepaginationActions","props","payload","onClick","trigger_send","link","document","getElementById","click","FormUpdate","tablepaginationOnChangeForm","dataDetail","tablepaginationResetForm","formTitle","React","defaultFormValue","_id","isInitialReset","htmlFor","placeholder","name","onChange","e","fieldName","fieldValue","target","subject","isMulti","label","labelButton","labelColumn","optionColumnValue","optionColumnLabel","payloadValue","toko_id","defaultValueOriginal","listallServiceName","TokoOnlineManifest","val","email_batch_id","EmailBatchManifest","textEditor","forProcess","dataId","initValue","content1","defaultValue","v","idElement","ManifestCustomerEmail","columns","cardTitle","whereCondition","JSON","stringify","batch_id","undefined","injectIntl","match","pageTitle","breadcrumb","title","isActive","contentHeaderTitle","isNeedLoggedin","detailServiceName","deleteServiceName","params","withoutWrapper","entityName","useEffect","window","activateEditorV2","hostBackend","at","getAccessToken","cb","content","isReset","style","position","backgroundColor","width","height","top","color","fontSize","marginTop","opacity"],"sourceRoot":""}