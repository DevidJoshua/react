{"version":3,"file":"static/js/174.8270fcc7.chunk.js","mappings":"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","sources":["Pages/DonationLink/PageUpdate.js","features/TextEditor/components/FieldTextArea.js"],"sourcesContent":["import React from 'react'\nimport { Detail } from '../../core/features/TablePagination'\nimport { FieldTextArea } from '../../features/TextEditor/components'\nimport ContentWrapper from '../../core/Components/Layout/ContentWrapper'\nimport { detailService, upsertService, fields, createPageTitle, upsertPageTitle, listallPageUrl, redirectAfterDelete, listallPageTitle } from './Manifest'\nimport AppConfig from '../../core/Config/AppConfig'\n\nconst FormUpdate = (props) => {\n  const {\n    tablepaginationOnChangeForm,\n    dataDetail,\n    payload,\n    upsertServiceName,\n    id,\n    tablepaginationResetForm\n  } = props\n  React.useEffect(() => {\n    const defaultFormValue = {}\n    if (id) defaultFormValue._id = id\n    tablepaginationResetForm({ isInitialReset: true, serviceName: upsertServiceName, defaultFormValue })\n  }, [tablepaginationResetForm, upsertServiceName, id])\n  return (\n    <div className='row'>\n      <div className='col-sm-6'>\n        <div className='form-group'>\n          <label htmlFor='title'>Title</label>\n          <input type='text' value={payload.title || dataDetail.title} className='form-control' id='title' placeholder=' ' onChange={e => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'title', fieldValue: e.target.value })} />\n        </div>\n        <div className='form-group'>\n          <label htmlFor='description'>Keterangan</label>\n          <FieldTextArea forProcess={typeof id !== 'undefined' ? 'update' : 'create'} dataId={id} defaultValue={typeof payload.description !== 'undefined' ? payload.description : dataDetail.description} onChange={(v) => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'description', fieldValue: v })} idElement='description' />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction Comp (props) {\n  const { match } = props\n  return (\n    <ContentWrapper\n      pageTitle={createPageTitle}\n      breadcrumb={[\n        { title: 'Beranda', link: AppConfig.appHomePage },\n        { title: listallPageTitle, link: listallPageUrl() },\n        { title: upsertPageTitle, link: null, isActive: true }\n      ]}\n      contentHeaderTitle={createPageTitle}\n      isNeedLoggedin\n    >\n      <div className='row'>\n        <div className='col-md-12'>\n          <Detail\n            detailServiceName={detailService}\n            upsertServiceName={upsertService}\n            fields={fields}\n            id={match.params._id}\n            formTitle={upsertPageTitle}\n            redirectAfterDelete={redirectAfterDelete}\n          >\n            <FormUpdate />\n          </Detail>\n        </div>\n      </div>\n    </ContentWrapper>\n  )\n}\nexport default Comp\n","import React, { useEffect } from 'react'\n// import _ from 'lodash'\nimport AppConfig from '../../../core/Config/AppConfig'\nimport { getAccessToken } from '../../../core/Utils/Utils'\n\nfunction FieldTextArea (props) {\n  const { placeholder, textEditor, defaultValue, initValue, onChange, idElement, dataId } = props\n  // const [isFirstLoad, setIsFirstLoad] = React.useState(undefined)\n  useEffect(() => {\n    console.log('valuevaluevalue initValue=>', initValue)\n    console.log('valuevaluevalue id=>', dataId)\n    if (textEditor) {\n      let isReset = false\n      // if (initValue === defaultValue && ) {\n      //   isReset = true\n      // }\n      // setCurrentValue(defaultValue)\n      if (typeof dataId !== 'undefined' && typeof defaultValue !== 'undefined') {\n        console.log('valuevaluevalue reloadddd=>', defaultValue)\n        window.activateEditorV2({\n          idElement,\n          hostBackend: AppConfig.hostBackend,\n          at: getAccessToken(),\n          cb: (content) => {\n            onChange(content)\n          },\n          isReset,\n          defaultValue\n        })\n      }\n      if (typeof dataId === 'undefined') {\n        window.activateEditorV2({\n          idElement,\n          hostBackend: AppConfig.hostBackend,\n          at: getAccessToken(),\n          cb: (content) => {\n            onChange(content)\n          },\n          isReset,\n          defaultValue\n        })\n      }\n    }\n    // setIsFirstLoad(false)\n  // })\n  }, [defaultValue, dataId, idElement, onChange, textEditor, initValue])\n\n  // if (forProcess === 'update' && _.isEmpty(dataId)) return null\n  // if (forProcess === 'update' && (dataId === 'undefined' || _.isEmpty(dataId))) return null\n  // if (forProcess === 'update' && dataId === '') return null\n\n  if (typeof dataId !== 'undefined' && !dataId) return null\n\n  // console.log('FieldTextAreaFieldTextAreaFieldTextAreaFieldTextArea dataId=>', dataId)\n  // console.log('FieldTextAreaFieldTextAreaFieldTextAreaFieldTextArea defaultValue=>', defaultValue)\n  // console.log('FieldTextAreaFieldTextAreaFieldTextAreaFieldTextArea forProcess=>', forProcess)\n  // console.log('FieldTextAreaFieldTextAreaFieldTextAreaFieldTextArea renderrrr=>')\n  return (\n    <div className='row'>\n      <div className='col-12'>\n        <div style={{ position: 'relative' }}>\n          {textEditor && <div style={{ backgroundColor: 'black', position: 'absolute', width: '100%', height: '100%', top: 0 }}><center><span style={{ color: 'green', fontSize: 30, marginTop: 200 }}>Gambar sedang diupload...</span></center></div>}\n          <div id='texareaWrapper' style={{ width: '100%', height: '100%', backgroundColor: 'black', opacity: 1 }}>\n            <textarea className='textarea' id={idElement} placeholder={placeholder || 'Isi keterangan'} value={defaultValue} style={{ width: '100%' }} onChange={(e) => onChange(e.target.value)} />\n          </div>\n        </div>\n      </div>\n    </div>\n    // <textarea className='textarea' id={idElement} placeholder='Place some text here' style={{ width: '100%', height: 200, fontSize: 14, lineHeight: 18, border: '1px solid #dddddd', padding: 10 }} value={defaultValue} onChange={(e) => onChange(e.target.value)} />\n  )\n}\nexport default FieldTextArea\n"],"names":["FormUpdate","props","tablepaginationOnChangeForm","dataDetail","payload","upsertServiceName","id","tablepaginationResetForm","React","defaultFormValue","_id","isInitialReset","serviceName","className","htmlFor","type","value","title","placeholder","onChange","e","fieldName","fieldValue","target","forProcess","dataId","defaultValue","description","v","idElement","match","pageTitle","createPageTitle","breadcrumb","link","AppConfig","listallPageTitle","listallPageUrl","upsertPageTitle","isActive","contentHeaderTitle","isNeedLoggedin","detailServiceName","detailService","upsertService","fields","params","formTitle","redirectAfterDelete","textEditor","initValue","useEffect","console","log","window","activateEditorV2","hostBackend","at","getAccessToken","cb","content","isReset","style","position","backgroundColor","width","height","top","color","fontSize","marginTop","opacity"],"sourceRoot":""}