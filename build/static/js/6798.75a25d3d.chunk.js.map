{"version":3,"file":"static/js/6798.75a25d3d.chunk.js","mappings":"yQAOMA,EAAWC,EAAAA,EAAAA,SAsDXC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACJ,WAAaC,GAAQ,IAAD,yBAClB,cAAMA,IACDC,MAAQ,CACXC,SAAoBF,EAAMG,QAxDA,CAC9B,CACEC,OAAQ,MACRC,SAAU,MACVC,KAAM,SAAAC,GAAC,OACL,iBAAKC,UAAU,YAAf,WACE,mBAAQC,KAAK,SAASD,UAAU,gDAAgD,cAAY,WAA5F,UACE,iBAAMA,UAAU,UAAhB,gCAEF,gBAAKA,UAAU,gBAAgBE,KAAK,OAApC,UACE,SAAC,KAAD,CAAMF,UAAU,gBAAgBG,GAAE,UAAKd,EAAL,wBAA6BU,EAAEK,KAAKC,OAAtE,2BAIR,CAAET,OAAQ,YAAaC,SAAU,aACjC,CAAED,OAAQ,QAASC,SAAU,SAC7B,CAAED,OAAQ,OAAQC,SAAU,QAC5B,CACED,OAAQ,aACRC,SAAU,aACVC,KAAM,SAAAQ,GACJ,IAAIC,EAAOC,GAAAA,CAAOF,EAAEF,KAAKC,OAGzB,OAF4BE,EAAxBA,GAAQA,EAAKE,UAAkBF,EAAKG,OAAO,uBACnC,IACJ,oCAAUH,OAGtB,CACEX,OAAQ,aACRC,SAAU,aACVC,KAAM,SAAAQ,GACJ,IAAIC,EAAOC,GAAAA,CAAOF,EAAEF,KAAKC,OAGzB,OAF4BE,EAAxBA,GAAQA,EAAKE,UAAkBF,EAAKG,OAAO,uBACnC,IACJ,oCAAUH,OAGtB,CACEX,OAAQ,aACRC,SAAU,aACVC,KAAM,SAAAQ,GACJ,IAAIC,EAAOC,GAAAA,CAAOF,EAAEF,KAAKC,OAGzB,OAF4BE,EAAxBA,GAAQA,EAAKE,UAAkBF,EAAKG,OAAO,uBACnC,IACJ,oCAAUH,OAGtB,CAAEX,OAAQ,aAAcC,SAAU,wBAClC,CAAED,OAAQ,aAAcC,SAAU,2BAKd,EAiDnB,OA5CA,8BAED,WAOEc,QAAQC,IAAI,uBALa,CACvBC,YAAa,cACbC,OAAQ,mHAIVH,QAAQC,IAAI,iBAAkBG,KAAKvB,OACnC,IAAQE,EAAYqB,KAAKtB,MAAjBC,QACR,OACE,SAAC,IAAD,CACEsB,UAAU,kBACVC,WAAY,CAAC,CAAEC,MAAO,OAAQC,KAAM7B,EAAAA,EAAAA,aAAyB,CAAE4B,MAAO,OAAQC,KAAM,KAAMC,UAAU,IACpGC,mBAAmB,kBACnBC,gBAAc,EAJhB,UAME,gBAAKtB,UAAU,MAAf,UACE,gBAAKA,UAAU,YAAf,UAcE,SAAC,KAAD,CACEuB,mBAAmB,cACnBT,OAAO,iHACPpB,QAASA,EACT8B,UAAU,0BAMrB,EAlDGjC,CAAiBkC,EAAAA,WAoDvB","sources":["core/Pages/User/PageUser.js"],"sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport Moment from 'moment'\n// import { path } from 'ramda'\nimport ContentWrapper from '../../Components/Layout/ContentWrapper'\nimport { Table } from '../../features/TablePagination'\nimport AppConfig from '../../Config/AppConfig'\nconst basePath = AppConfig.basePath\n\nconst getColumns = (history) => [\n  {\n    Header: 'Act',\n    accessor: '_id',\n    Cell: p => (\n      <div className='btn-group'>\n        <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n          <span className='sr-only'>Toggle Dropdown</span>\n        </button>\n        <div className='dropdown-menu' role='menu'>\n          <Link className='dropdown-item' to={`${basePath}/user/detail/${p.cell.value}`}>Detail</Link>\n        </div>\n      </div>)\n  },\n  { Header: 'full_name', accessor: 'full_name' },\n  { Header: 'email', accessor: 'email' },\n  { Header: 'role', accessor: 'role' },\n  {\n    Header: 'created_at',\n    accessor: 'created_at',\n    Cell: d => {\n      let data = Moment(d.cell.value)\n      if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n      else data = ''\n      return (<span>{`${data}`}</span>)\n    }\n  },\n  {\n    Header: 'updated_at',\n    accessor: 'updated_at',\n    Cell: d => {\n      let data = Moment(d.cell.value)\n      if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n      else data = ''\n      return (<span>{`${data}`}</span>)\n    }\n  },\n  {\n    Header: 'Last Login',\n    accessor: 'last_login',\n    Cell: d => {\n      let data = Moment(d.cell.value)\n      if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n      else data = ''\n      return (<span>{`${data}`}</span>)\n    }\n  },\n  { Header: 'created by', accessor: 'created_by.full_name' },\n  { Header: 'updated by', accessor: 'updated_by.full_name' }\n  // { Header: 'created at', accessor: 'created_at' },\n  // { Header: 'updated at', accessor: 'updated_at' }\n]\nclass PageUser extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      columns: getColumns(props.history)\n    }\n  }\n\n  render () {\n    // getAllPublishedCourses\n    const paginationConfig = {\n      serviceName: 'getAllUsers',\n      fields: '_id,full_name,last_login,username,email,role,created_at,updated_at,created_by{full_name},updated_by{full_name}'\n      // fields: _.join(_.map(columns, 'accessor'), ',')\n    }\n    console.log('paginationConfig===>', paginationConfig)\n    console.log('this.props===>', this.props)\n    const { columns } = this.state\n    return (\n      <ContentWrapper\n        pageTitle='User Management'\n        breadcrumb={[{ title: 'Home', link: AppConfig.appHomePage }, { title: 'User', link: null, isActive: true }]}\n        contentHeaderTitle='User Management'\n        isNeedLoggedin\n      >\n        <div className='row'>\n          <div className='col-md-12'>\n            {/* <Filter\n              paginationConfig={paginationConfig}\n              child={(tablepaginationOnChangeFilter, filter) => (\n                <div className='row'>\n                  <div className='col-sm-6'>\n                    <div className='form-group'>\n                      <label htmlFor='string_to_search'>Search</label>\n                      <input type='text' className='form-control' value={path(['string_to_search'], filter) || ''} id='string_to_search' placeholder='Enter some text' onChange={e => tablepaginationOnChangeFilter({ serviceName: paginationConfig.serviceName, fieldName: 'string_to_search', fieldValue: e.target.value })} />\n                    </div>\n                  </div>\n                </div>\n              )}\n            /> */}\n            <Table\n              listallServiceName='getAllUsers'\n              fields='_id,full_name,last_login,username,email,role,created_at,updated_at,created_by{full_name},updated_by{full_name}'\n              columns={columns}\n              cardTitle='Daftar User'\n            />\n          </div>\n        </div>\n      </ContentWrapper>\n    )\n  }\n}\nexport default PageUser\n"],"names":["basePath","AppConfig","PageUser","props","state","columns","history","Header","accessor","Cell","p","className","type","role","to","cell","value","d","data","Moment","isValid","format","console","log","serviceName","fields","this","pageTitle","breadcrumb","title","link","isActive","contentHeaderTitle","isNeedLoggedin","listallServiceName","cardTitle","Component"],"sourceRoot":""}