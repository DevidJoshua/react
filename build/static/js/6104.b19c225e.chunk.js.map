{"version":3,"file":"static/js/6104.b19c225e.chunk.js","mappings":"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","sources":["core/features/TablePagination/components/MultiselectCheckbox.js","core/features/TablePagination/components/PaginationNav.js","core/features/TablePagination/components/TableViewTable.js","core/features/TablePagination/config.js","core/features/TablePagination/containers/TableCon.js"],"sourcesContent":["import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { injectIntl } from 'react-intl'\nimport TableCon from '../containers/TableCon'\nimport TableViewTable from '../components/TableViewTable'\n\nfunction TableViewCombobox (props) {\n  const {\n    // From Page\n    optionsDefaultValue,\n    label,\n    listallServiceName,\n    // inputValue,\n    // placeholder,\n    // onChange,\n    // from TableCon\n    loading,\n    errors,\n    data,\n    headerGroups,\n    getTableProps,\n    getTableBodyProps,\n    page,\n    prepareRow,\n    canPreviousPage,\n    canNextPage,\n    pageIndex,\n    pageOptions,\n    gotoPage,\n    pageCount,\n    previousPage,\n    nextPage,\n    pageSize,\n    columns,\n    objectKey\n    // setPageSize\n  } = props\n  return (\n    <>\n      <button type='button' className='btn btn-default' data-toggle='modal' data-target={'#modal-combobox-listitem-table' + listallServiceName}>\n        {label}\n      </button>\n      <br />\n      <br />\n      <div className='table-responsive'>\n        <table className='table table-bordered'>\n          <thead>\n            <tr>\n              {columns.map((v, i) => <th key={i}>{v.Header}</th>)}\n              {/* <th style={{ width: 40 }} /> */}\n            </tr>\n          </thead>\n          <tbody>\n            {optionsDefaultValue.filter(v => v.checked).map((v, i) => {\n              const object = v[objectKey]\n              if (!object) {\n                return (\n                  <tr key={i}>\n                    <td colSpan={columns.length}> <span>produk telah dihapus</span> </td>\n                    {/* {columns.map((v2, i2) => (<td key={i2}>{typeof v2.accessor === 'string' ? v[objectKey][v2.accessor] : v2.accessor(v[objectKey])}</td>))} */}\n                  </tr>)\n              }\n              return (\n                <tr key={i}>\n                  {columns.map((v2, i2) => (<td key={i2}>{typeof v2.accessor === 'string' ? v[objectKey][v2.accessor] : v2.accessor(v[objectKey])}</td>))}\n                </tr>)\n            })}\n          </tbody>\n        </table>\n      </div>\n      <div className='modal fade bd-example-modal-lg' id={'modal-combobox-listitem-table' + listallServiceName} aria-hidden='true' style={{ display: 'none' }}>\n        <div className='modal-dialog modal-lg'>\n          <div className='modal-content'>\n            <div className='modal-body'>\n              <TableViewTable\n                loading={loading}\n                errors={errors}\n                data={data}\n                headerGroups={headerGroups}\n                getTableProps={getTableProps}\n                getTableBodyProps={getTableBodyProps}\n                page={page}\n                prepareRow={prepareRow}\n                canPreviousPage={canPreviousPage}\n                canNextPage={canNextPage}\n                pageIndex={pageIndex}\n                pageOptions={pageOptions}\n                gotoPage={gotoPage}\n                pageCount={pageCount}\n                previousPage={previousPage}\n                nextPage={nextPage}\n                pageSize={pageSize}\n                setPageSize\n              />\n            </div>\n            <div className='modal-footer justify-content-between'>\n              <button id='buttonCloseModal' type='button' className='btn btn-success' data-dismiss='modal'>Close</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nconst TableConMemo = React.memo(props => {\n  const { distinct, children, columns, listallServiceName, fields, history, whereCondition } = props\n  return (\n    <TableCon\n      columns={columns}\n      listallServiceName={listallServiceName}\n      fields={fields}\n      history={history}\n      whereCondition={whereCondition}\n      distinct={distinct}\n    >\n      {children}\n    </TableCon>\n  )\n})\n\nfunction Combobox (props) {\n  console.log('Combobox=====', props)\n  // const [currentSelect, setCurrentSelect] = useState(null)\n  const {\n    getColumns,\n    whereCondition,\n    distinct,\n    history,\n    // serviceName,\n    // upsertServiceName,\n    listallServiceName,\n    fields,\n    onChange,\n    defaultValue,\n    optionColumnLabel,\n    label,\n    optionColumnValue,\n    inputValue,\n    placeholder,\n    objectKey\n  } = props\n  return (\n    <TableConMemo\n      columns={[\n        ...getColumns({ onChange, defaultValue, objectKey })\n      ]}\n      listallServiceName={listallServiceName}\n      fields={fields}\n      history={history}\n      whereCondition={whereCondition}\n      distinct={distinct}\n    >\n      <TableViewCombobox\n        objectKey={objectKey}\n        label={label}\n        listallServiceName={listallServiceName}\n        optionsDefaultValue={defaultValue}\n        inputValue={inputValue}\n        placeholder={placeholder}\n        onChange={onChange}\n        optionColumnValue={optionColumnValue}\n        optionColumnLabel={optionColumnLabel}\n      />\n    </TableConMemo>\n  )\n}\nexport default injectIntl((props) => {\n  var history = useHistory()\n  return <Combobox history={history} {...props} />\n})\n","import React, { PureComponent } from 'react'\n// import { Link } from 'react-router-dom'\nimport TableFooter from '@mui/material/TableFooter'\nimport TablePagination from '@mui/material/TablePagination'\nimport TableRow from '@mui/material/TableRow'\n\nexport default function PaginationNav (props) {\n  const {\n    canPreviousPage,\n    gotoPage,\n    canNextPage,\n    previousPage,\n    nextPage,\n    pageCount,\n    pageIndex,\n    pageOptions,\n    pageSize,\n    setPageSize,\n    withPageSize,\n    count\n  } = props\n  const handleChangePage = (event, newPage) => {\n    // alert(newPage)\n    gotoPage(newPage)\n  }\n  const handleChangeRowsPerPage = (e) => {\n    setPageSize(Number(e.target.value))\n    gotoPage(0)\n  }\n  return (\n    <TablePagination\n      rowsPerPageOptions={[10, 20, 30, 40, 50, { label: 'All', value: -1 }]}\n      colSpan={3}\n      count={count}\n      rowsPerPage={pageSize}\n      page={pageIndex}\n      // SelectProps={{\n      //   inputProps: {\n      //     'aria-label': 'rows per page'\n      //   },\n      //   native: true\n      // }}\n      onPageChange={handleChangePage}\n      onRowsPerPageChange={handleChangeRowsPerPage}\n    />\n  )\n}\n","import React, { PureComponent } from 'react'\n// import Loader from '../../../Components/Loader/Loader'\nimport PaginationNav from './PaginationNav'\nimport Table from '@mui/material/Table'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\nimport TableHead from '@mui/material/TableHead'\nimport TableRow from '@mui/material/TableRow'\nimport Paper from '@mui/material/Paper'\n\nexport default class TableViewTable extends PureComponent {\n  render () {\n    const {\n      loading,\n      errors,\n      data,\n      headerGroups,\n      getTableProps,\n      getTableBodyProps,\n      page,\n      prepareRow,\n      canPreviousPage,\n      canNextPage,\n      pageIndex,\n      pageOptions,\n      gotoPage,\n      pageCount,\n      previousPage,\n      nextPage,\n      pageSize,\n      setPageSize,\n      children,\n      count\n    } = this.props\n\n    const childrenWithProps = React.Children.map(children, child => {\n      // checking isValidElement is the safe way and avoids a typescript error too\n      if (React.isValidElement(child)) {\n        return React.cloneElement(child, {\n          headerGroups,\n          getTableProps,\n          getTableBodyProps,\n          page,\n          prepareRow\n        })\n      }\n      return child\n    })\n\n    return (\n      <>\n        {!children &&\n          <>\n            <TableContainer component={Paper}>\n              {!loading && errors && <div class='alert alert-danger' role='alert'><ul>{errors.map((v, i) => <li key={i}>{v.message}</li>)}</ul></div>}\n              {data &&\n              <Table sx={{ minWidth: 650 }} size='small' aria-label='a dense table'>\n                <TableHead>\n                  {headerGroups.map((headerGroup, i) => (\n                    <TableRow key={i} {...headerGroup.getHeaderGroupProps()}>\n                      {headerGroup.headers.map((column, j) => (\n                        <TableCell key={j} {...column.getHeaderProps()}>\n                          {column.render('Header')}\n                          <span>\n                            {column.isSorted\n                              ? column.isSortedDesc\n                                ? ' 🔽'\n                                : ' 🔼'\n                              : ''}\n                          </span>\n                        </TableCell>\n                      ))}\n                    </TableRow>\n                  ))}\n                </TableHead>\n                <TableBody {...getTableBodyProps()}>\n                  {page.map((row, i) => {\n                    prepareRow(row)\n                    return (\n                      <TableRow key={i} sx={{ '&:last-child td, &:last-child th': { border: 0 } }} {...row.getRowProps()}>\n                        {row.cells.map((cell, j) => {\n                          return <TableCell key={j} component='th' scope='row' {...cell.getCellProps()}>{cell.render('Cell')}</TableCell>\n                        })}\n                      </TableRow>\n                    )\n                  })}\n                </TableBody>\n              </Table>}\n            </TableContainer>\n            <PaginationNav\n              canPreviousPage={canPreviousPage}\n              gotoPage={gotoPage}\n              canNextPage={canNextPage}\n              previousPage={previousPage}\n              nextPage={nextPage}\n              pageCount={pageCount}\n              pageIndex={pageIndex}\n              pageOptions={pageOptions}\n              pageSize={pageSize}\n              setPageSize={setPageSize}\n              count={count}\n              withPageSize\n            />\n          </>}\n        {children && <>{childrenWithProps}</>}\n      </>\n    )\n  }\n}\n","\nexport default {\n  // font scaling override - RN default is on\n  defaultMaxPageSize: 500,\n  defaultPageSize: 10,\n  defaultPageIndex: 0\n}\n","import React, { useEffect } from 'react'\nimport { useTable, usePagination } from 'react-table'\nimport { connect } from 'react-redux'\nimport TablepaginationActions, { setColumns } from '../redux'\nimport TableViewTable from '../components/TableViewTable'\nimport config from '../config'\nimport Immutable from 'seamless-immutable'\nimport TablePaginationActions from '@mui/material/TablePagination/TablePaginationActions'\nimport _ from 'lodash'\n\nfunction ListAllContent (props) {\n  const { count, reload, filter, children, fetchData, errors, columns, data, loading, pageCount: controlledPageCount, pageSize: xPageSize } = props\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize }\n  } = useTable({\n    columns,\n    data,\n    initialState: { pageIndex: config.defaultPageIndex, pageSize: xPageSize || config.defaultPageSize },\n    manualPagination: true,\n    pageCount: controlledPageCount\n  },\n  usePagination\n  )\n\n  const [reloadTable, setReloadTable] = React.useState(false)\n\n  useEffect(() => {\n    if (reload !== undefined && !reload) return\n    setReloadTable(true)\n  }, [reload])\n\n  useEffect(() => {\n    if (reloadTable) {\n      setReloadTable(false)\n      fetchData({\n        pageSize: (pageSize < 0) ? config.defaultMaxPageSize : pageSize,\n        pageIndex,\n        filter\n        // whereCondition\n      })\n    }\n  }, [fetchData, pageIndex, pageSize, filter, reloadTable])\n\n  useEffect(() => {\n    setReloadTable(true)\n  }, [pageIndex, pageSize, filter])\n\n  // inject data ke dalam children\n  const childrenWithProps = React.Children.map(children, child => {\n    // checking isValidElement is the safe way and avoids a typescript error too\n    if (React.isValidElement(child)) {\n      return React.cloneElement(child, {\n        columns,\n        loading,\n        errors,\n        data,\n        headerGroups,\n        getTableProps,\n        getTableBodyProps,\n        page,\n        prepareRow,\n        canPreviousPage,\n        canNextPage,\n        pageIndex,\n        pageOptions,\n        gotoPage,\n        pageCount,\n        previousPage,\n        nextPage,\n        pageSize,\n        setPageSize,\n        count\n      })\n    }\n    return child\n  })\n  return (\n    <>\n      {/* render children yang sudah di inject data */}\n      {childrenWithProps}\n    </>\n  )\n}\nfunction TableCon (props) {\n  const {\n    pageIndex,\n    pageSize,\n    pageCount,\n    loading,\n    data,\n    distinct,\n    whereCondition,\n    history,\n    fields,\n    filter,\n    tablepaginationFetchData,\n    listallServiceName,\n    children,\n    reload,\n    listName,\n    apiVersion,\n    ignoreFields,\n    tableColumns,\n    additionalRequests,\n    appendColumns,\n    dataDetail,\n    tableData,\n    tablePaginationSetReload,\n    tablePaginationSetColumns,\n    isReloading,\n    count\n  } = props\n  const fetchData = React.useCallback(({ pageSize, pageIndex, filter }) => {\n    let whereCond = {}\n    if (typeof whereCondition === 'string') whereCond = JSON.parse(whereCondition || '{}')\n    else whereCond = whereCondition\n    // jika function hit fetch data belum ready, maka jangan dihit fetch data\n    if (!tablepaginationFetchData) return\n    // hit fetch data\n    tablepaginationFetchData({\n      ignoreFields,\n      apiVersion: apiVersion,\n      listName: listName,\n      serviceName: listallServiceName,\n      pageSize: pageSize || config.defaultPageSize,\n      pageIndex: pageIndex || config.defaultPageIndex,\n      filter,\n      additionalRequests,\n      // filter: Immutable.asMutable(filter || {}, { deep: true }),\n      fields,\n      history,\n      whereCondition: whereCond,\n      distinct\n    })\n  }, [listName, distinct, fields, history, listallServiceName, tablepaginationFetchData, whereCondition, isReloading])\n  useEffect(() => {\n    tablePaginationSetReload({ serviceName: listName || listallServiceName, isReload: false })\n  }, [])\n\n  return (\n    <ListAllContent\n      columns={_.uniq(tableData.tableColumns, 'Header') || []}\n      data={tableData.tableRow || []}\n      fetchData={fetchData}\n      loading={loading}\n      reload={reload}\n      filter={filter}\n      pageCount={pageCount}\n      pageSize={pageSize}\n      pageIndex={pageIndex}\n      count={count}\n    >\n      {/* jika ada children maka render children, biasanya di passing dari component PageList */}\n      {children && children}\n      {/* kalau tidak ada children maka kita render component default nya yaitu TableViewTable artinya list data yang ditampilkan dalam bentuk table */}\n      {!children && <TableViewTable />}\n    </ListAllContent>\n  )\n}\nconst mapStateToProps = (state, ownProps) => {\n  const { columns, tableData, tableId, appendColumns } = ownProps\n\n  const errors = (state.tablepagination.errors || {})[ownProps.listName || ownProps.listallServiceName]\n  const loading = (state.tablepagination.loading || {})[ownProps.listName || ownProps.listallServiceName]\n  const reload = (state.tablepagination.reload || {})[ownProps.listName || ownProps.listallServiceName]\n  const reloadDetail = (state.tablepagination.reloadDetail || {})[ownProps.listName || ownProps.listallServiceName]\n\n  const data = (state.tablepagination.data || {})[ownProps.listName || ownProps.listallServiceName]\n  const pageCount = (state.tablepagination.pageCount || {})[ownProps.listName || ownProps.listallServiceName]\n  const count = (state.tablepagination.count || {})[ownProps.listName || ownProps.listallServiceName]\n  const pageSize = (state.tablepagination.pageSize || {})[ownProps.listName || ownProps.listallServiceName] || ownProps.pageSize\n  const filter = (state.tablepagination.filter || {})[ownProps.listName || ownProps.listallServiceName]\n  const dataDetail = state.tablepagination.dataDetail\n\n  // custom columns\n  const customCol = state.customcolumns.custom_columns[tableId]\n\n  let tableColumns = []\n\n  const tColumns = appendColumns ? appendColumns('columns', (data || []), Immutable.asMutable(columns), dataDetail) : (columns || [])\n  const tData = appendColumns ? appendColumns('data', (data || []), Immutable.asMutable(columns), dataDetail) : (data || [])\n\n  if (customCol != undefined) {\n    if (customCol.length > 0) {\n      tableColumns = state.customcolumns.custom_columns[tableId]\n    } else {\n      tableColumns = tColumns\n    }\n  }else {\n    tableColumns = tColumns\n  }\n\n  const props = {\n    tableData: { tableRow: tData, tableColumns: _.without(tableColumns, undefined) },\n    tableColumns: Immutable.asMutable(tableColumns),\n    reload,\n    isReloading: reloadDetail,\n    data,\n    filter,\n    loading: loading,\n    pageCount,\n    pageSize: pageSize,\n    pageIndex: state.tablepagination.pageIndex,\n    errors,\n    count\n  }\n  return props\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    tablePaginationSetReload: data => dispatch(TablepaginationActions.setReloadDetail(data)),\n    tablepaginationFetchData: data => dispatch(TablepaginationActions.tablepaginationFetchData(data)),\n    tablePaginationSetColumns: data => dispatch(TablepaginationActions.tablePaginationSetColumns(data))\n  }\n}\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TableCon)\n"],"names":["TableViewCombobox","props","optionsDefaultValue","label","listallServiceName","loading","errors","data","headerGroups","getTableProps","getTableBodyProps","page","prepareRow","canPreviousPage","canNextPage","pageIndex","pageOptions","gotoPage","pageCount","previousPage","nextPage","pageSize","columns","objectKey","type","className","map","v","i","Header","filter","checked","v2","i2","accessor","colSpan","length","id","style","display","setPageSize","TableConMemo","React","distinct","children","fields","history","whereCondition","Combobox","console","log","getColumns","onChange","defaultValue","optionColumnLabel","optionColumnValue","inputValue","placeholder","injectIntl","useHistory","PaginationNav","count","withPageSize","rowsPerPageOptions","value","rowsPerPage","onPageChange","event","newPage","onRowsPerPageChange","e","Number","target","TableViewTable","this","childrenWithProps","child","component","Paper","class","role","message","sx","minWidth","size","headerGroup","getHeaderGroupProps","headers","column","j","getHeaderProps","render","isSorted","isSortedDesc","row","border","getRowProps","cells","cell","scope","getCellProps","PureComponent","defaultMaxPageSize","defaultPageSize","defaultPageIndex","ListAllContent","reload","fetchData","controlledPageCount","xPageSize","useTable","initialState","config","manualPagination","usePagination","state","reloadTable","setReloadTable","useEffect","undefined","connect","ownProps","tableId","tableData","appendColumns","tablepagination","listName","reloadDetail","dataDetail","customCol","customcolumns","custom_columns","tableColumns","tColumns","Immutable","tData","tableRow","_","isReloading","dispatch","tablePaginationSetReload","TablepaginationActions","tablepaginationFetchData","tablePaginationSetColumns","apiVersion","ignoreFields","additionalRequests","whereCond","JSON","parse","serviceName","isReload"],"sourceRoot":""}