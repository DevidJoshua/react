{"version":3,"file":"static/js/7925.729e9f2f.chunk.js","mappings":"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","sources":["core/Pages/Tag/Manifest.js","core/Pages/Tag/PageUpdate.js"],"sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Moment from 'moment'\nimport AppConfig from '../../Config/AppConfig'\nconst basePath = AppConfig.basePath\n\nconst entityName = 'Tag'\nconst entity = 'tag'\nconst serviceEntity = 'Tag'\n\nexport const redirectAfterCreate = '/' + entity + '/detail'\nexport const redirectAfterDelete = '/' + entity\nexport const detailPageUrl = (id) => (`/${entity}/detail/${id}`)\nexport const updatePageUrl = (id) => (`/${entity}/update/${id}`)\nexport const createPageUrl = () => (`/${entity}/create`)\nexport const createNewButtonLabel = 'Create New ' + entityName\nexport const createPageTitle = 'Create New ' + entityName\nexport const listallPageTitle = entityName + 's'\nexport const detailPageTitle = entityName + ' Detail'\nexport const updatePageTitle = 'Update ' + entityName\nexport const createService = 'create' + serviceEntity\nexport const detailService = 'getDetail' + serviceEntity\nexport const updateService = 'update' + serviceEntity\nexport const listallService = 'getAll' + serviceEntity + 's'\nexport const deleteService = 'delete' + serviceEntity\nexport const fields = '_id,name,created_at,updated_at,created_by{full_name},updated_by{full_name}'\nexport const getColumns = (history) => [\n  {\n    Header: 'Act',\n    accessor: '_id',\n    Cell: p => (\n      <div className='btn-group'>\n        <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n          <span className='sr-only'>Toggle Dropdown</span>\n        </button>\n        <div className='dropdown-menu' role='menu'>\n          <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate}/${p.cell.value}`}>Detail</Link>\n        </div>\n      </div>)\n  },\n  { Header: 'name', accessor: 'name' },\n  {\n    Header: 'created_at',\n    accessor: 'created_at',\n    Cell: d => {\n      let data = Moment(d.cell.value)\n      if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n      else data = ''\n      return (<span>{`${data}`}</span>)\n    }\n  },\n  {\n    Header: 'updated_at',\n    accessor: 'updated_at',\n    Cell: d => {\n      let data = Moment(d.cell.value)\n      if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n      else data = ''\n      return (<span>{`${data}`}</span>)\n    }\n  },\n  { Header: 'created by', accessor: 'created_by.full_name' },\n  { Header: 'updated by', accessor: 'updated_by.full_name' }\n  // { Header: 'created at', accessor: 'created_at' },\n  // { Header: 'updated at', accessor: 'updated_at' }\n]\nexport default {\n  redirectAfterCreate,\n  redirectAfterDelete,\n  detailPageUrl,\n  updatePageUrl,\n  createPageUrl,\n  createNewButtonLabel,\n  createPageTitle,\n  listallPageTitle,\n  detailPageTitle,\n  updatePageTitle,\n  createService,\n  detailService,\n  updateService,\n  listallService,\n  deleteService,\n  fields,\n  getColumns\n}","import React, { Component } from 'react'\nimport { Update as Updateform } from '../../features/TablePagination'\nimport ContentWrapper from '../../Components/Layout/ContentWrapper'\nimport { injectIntl } from 'react-intl'\nimport { path } from 'ramda'\nimport AppConfig from '../../Config/AppConfig'\nimport { lp } from '../../Utils/Pages'\nimport { updatePageTitle, detailPageTitle, detailPageUrl, redirectAfterCreate, fields, detailService, updateService } from './Manifest'\n\nconst paginationConfig = {\n  serviceName: detailService,\n  updateServiceName: updateService,\n  fields: fields\n}\n\nclass Comp extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {}\n  }\n\n  componentDidMount () {\n    const { appPatch } = this.props\n    const title = (lp[window.location.pathname] || {}).title\n    if (title) appPatch({ routeActive: window.location.pathname, pageTitle: title })\n    else appPatch({ routeActive: window.location.pathname, pageTitle: updatePageTitle })\n    // window.singleDatePicker('#start_date', 'YYYY-MM-DD HH:mm:ss', (par) => {\n    //   const x = document.getElementById('start_date')\n    //   x.value = moment(par).format('YYYY-MM-DD HH:mm:ss')\n    //   tablepaginationOnChangeFormFunc({ serviceName: paginationConfig.serviceName, fieldName: 'start_date', fieldValue: new Date(par).getTime() })\n    // })\n    // window.singleDatePicker('#end_date', 'YYYY-MM-DD HH:mm:ss', (par) => {\n    //   const x = document.getElementById('end_date')\n    //   x.value = moment(par).format('YYYY-MM-DD HH:mm:ss')\n    //   tablepaginationOnChangeFormFunc({ serviceName: paginationConfig.serviceName, fieldName: 'end_date', fieldValue: new Date(par).getTime() })\n    // })\n    // window.activateEditor({ hostBackend: AppConfig.hostBackend, at: getAccessToken(), cb: (content) => {\n    //   tablepaginationOnChangeFormFunc({ serviceName: paginationConfig.serviceName, fieldName: 'content1', fieldValue: content })\n    // }})\n    // tablepaginationOnChangeFormFunc({ serviceName: paginationConfig.serviceName, fieldName: 'role_id', fieldValue: match.params.role_id })\n  }\n\n  render () {\n    const { match } = this.props\n    return (\n      <ContentWrapper\n        pageTitle={updatePageTitle}\n        breadcrumb={[\n          { title: 'Home', link: AppConfig.appHomePage },\n          { title: detailPageTitle, link: detailPageUrl(match.params._id), isActive: true },\n          { title: updatePageTitle, link: null, isActive: true }\n        ]}\n        contentHeaderTitle={updatePageTitle}\n        isNeedLoggedin\n      >\n        <div className='row'>\n          <div className='col-md-12'>\n            <Updateform\n              id={match.params._id}\n              cancelHref={detailPageUrl(match.params._id)}\n              formTitle={updatePageTitle}\n              paginationConfig={paginationConfig}\n              redirectAfterCreate={redirectAfterCreate}\n              child={(tablepaginationOnChangeForm, dataDetail, payload) => {\n                // console.log('haloooooooo===>', dataDetail)\n                // console.log('haloooooooo payload===>', payload)\n                // tablepaginationOnChangeFormFunc = tablepaginationOnChangeForm\n                // currentDataDetail = dataDetail\n                // if (startDate) startDate.value = path([paginationConfig.serviceName, 'start_date'], currentDataDetail)\n                // if (title) title.value = path([paginationConfig.serviceName, 'title'], payload) // || path([paginationConfig.serviceName, 'title'], currentDataDetail)\n\n                // tablepaginationOnChangeForm({ serviceName: paginationConfig.serviceName, fieldName: 'code', fieldValue: path([paginationConfig.serviceName, 'code'], dataDetail) || '' })\n                // let startDate = moment(path([paginationConfig.serviceName, 'start_date'], payload) || path([paginationConfig.serviceName, 'start_date'], dataDetail))\n                // if (startDate && startDate.isValid()) startDate = startDate.format('YYYY-MM-DD HH:mm:ss')\n                // else startDate = ''\n                // let endDate = moment(path([paginationConfig.serviceName, 'end_date'], payload) || path([paginationConfig.serviceName, 'end_date'], dataDetail))\n                // if (endDate && endDate.isValid()) endDate = endDate.format('YYYY-MM-DD HH:mm:ss')\n                // else endDate = ''\n\n                return (\n                  <div className='row'>\n                    <div className='col-sm-6'>\n                      <div className='form-group'>\n                        <label htmlFor='name'>name</label>\n                        <input type='text' className='form-control' id='name' placeholder='Enter name' value={path([paginationConfig.serviceName, 'name'], payload) || path([paginationConfig.serviceName, 'name'], dataDetail) || ''} onChange={e => tablepaginationOnChangeForm({ serviceName: paginationConfig.serviceName, fieldName: 'name', fieldValue: e.target.value })} />\n                      </div>\n                    </div>\n                  </div>\n                )\n              }}\n            />\n          </div>\n        </div>\n      </ContentWrapper>\n    )\n  }\n}\nexport default injectIntl(Comp)\n"],"names":["basePath","AppConfig","entity","redirectAfterCreate","redirectAfterDelete","detailPageUrl","id","updatePageUrl","createPageUrl","createNewButtonLabel","listallPageTitle","entityName","detailPageTitle","updatePageTitle","detailService","updateService","listallService","deleteService","fields","getColumns","history","Header","accessor","Cell","p","className","type","role","to","cell","value","d","data","Moment","isValid","format","createPageTitle","createService","paginationConfig","serviceName","updateServiceName","Comp","props","state","appPatch","this","title","lp","window","location","pathname","routeActive","pageTitle","match","breadcrumb","link","params","_id","isActive","contentHeaderTitle","isNeedLoggedin","cancelHref","formTitle","child","tablepaginationOnChangeForm","dataDetail","payload","htmlFor","placeholder","path","onChange","e","fieldName","fieldValue","target","Component","injectIntl"],"sourceRoot":""}