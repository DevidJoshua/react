{"version":3,"file":"static/js/4640.fe9b7121.chunk.js","mappings":"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","sources":["core/features/TablePagination/components/Combobox.js","core/features/TablePagination/components/PaginationNav.js","core/features/TablePagination/components/TableViewTable.js","core/features/TablePagination/config.js","core/features/TablePagination/containers/TableCon.js"],"sourcesContent":["import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { injectIntl } from 'react-intl'\nimport TableCon from '../containers/TableCon'\nimport TableViewTable from '../components/TableViewTable'\n\nfunction TableViewCombobox (props) {\n  const {\n    // From Page\n    optionColumnValue,\n    optionColumnLabel,\n    optionsDefaultValue,\n    label,\n    listallServiceName,\n    // inputValue,\n    // placeholder,\n    // onChange,\n    // from TableCon\n    loading,\n    errors,\n    data,\n    headerGroups,\n    getTableProps,\n    getTableBodyProps,\n    page,\n    prepareRow,\n    canPreviousPage,\n    canNextPage,\n    pageIndex,\n    pageOptions,\n    gotoPage,\n    pageCount,\n    previousPage,\n    nextPage,\n    pageSize\n    // setPageSize\n  } = props\n  const defaultVal = data.filter(v => optionsDefaultValue === '' + v[optionColumnValue])\n  return (\n    <>\n      <button type='button' class='btn btn-default' data-toggle='modal' data-target={'#modal-combobox-listitem-table' + listallServiceName}>\n        {(defaultVal[0] || {})[optionColumnLabel] || label}\n      </button>\n      <div className='modal fade bd-example-modal-lg' id={'modal-combobox-listitem-table' + listallServiceName} aria-hidden='true' style={{ display: 'none' }}>\n        <div className='modal-dialog modal-lg'>\n          <div className='modal-content'>\n            <TableViewTable\n              loading={loading}\n              errors={errors}\n              data={data}\n              headerGroups={headerGroups}\n              getTableProps={getTableProps}\n              getTableBodyProps={getTableBodyProps}\n              page={page}\n              prepareRow={prepareRow}\n              canPreviousPage={canPreviousPage}\n              canNextPage={canNextPage}\n              pageIndex={pageIndex}\n              pageOptions={pageOptions}\n              gotoPage={gotoPage}\n              pageCount={pageCount}\n              previousPage={previousPage}\n              nextPage={nextPage}\n              pageSize={pageSize}\n              setPageSize\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nfunction Combobox (props) {\n  console.log('Combobox=====', props)\n  // const [currentSelect, setCurrentSelect] = useState(null)\n  const {\n    getColumns,\n    whereCondition,\n    distinct,\n    history,\n    // serviceName,\n    // upsertServiceName,\n    listallServiceName,\n    fields,\n    onChange,\n    defaultValue,\n    optionColumnLabel,\n    label,\n    labelButton,\n    labelColumn,\n    optionColumnValue,\n    inputValue,\n    placeholder\n  } = props\n  return (\n    <TableCon\n      columns={[\n        ...getColumns({ onChange }),\n        { Header: labelColumn, accessor: p => <button type='button' class='btn btn-default' data-dismiss='modal' onClick={() => { onChange({ val: p[optionColumnValue], originalValue: p }) }}>{labelButton}</button> }\n      ]}\n      listallServiceName={listallServiceName}\n      fields={fields}\n      history={history}\n      whereCondition={whereCondition}\n      distinct={distinct}\n    >\n      <TableViewCombobox\n        label={label}\n        listallServiceName={listallServiceName}\n        optionsDefaultValue={defaultValue}\n        inputValue={inputValue}\n        placeholder={placeholder}\n        onChange={onChange}\n        optionColumnValue={optionColumnValue}\n        optionColumnLabel={optionColumnLabel}\n      />\n    </TableCon>\n  )\n}\nexport default injectIntl((props) => {\n  var history = useHistory()\n  return <Combobox history={history} {...props} />\n})\n","import React, { PureComponent } from 'react'\n// import { Link } from 'react-router-dom'\nimport TableFooter from '@mui/material/TableFooter'\nimport TablePagination from '@mui/material/TablePagination'\nimport TableRow from '@mui/material/TableRow'\n\nexport default function PaginationNav (props) {\n  const {\n    canPreviousPage,\n    gotoPage,\n    canNextPage,\n    previousPage,\n    nextPage,\n    pageCount,\n    pageIndex,\n    pageOptions,\n    pageSize,\n    setPageSize,\n    withPageSize,\n    count\n  } = props\n  const handleChangePage = (event, newPage) => {\n    // alert(newPage)\n    gotoPage(newPage)\n  }\n  const handleChangeRowsPerPage = (e) => {\n    setPageSize(Number(e.target.value))\n    gotoPage(0)\n  }\n  return (\n    <TablePagination\n      rowsPerPageOptions={[10, 20, 30, 40, 50, { label: 'All', value: -1 }]}\n      colSpan={3}\n      count={count}\n      rowsPerPage={pageSize}\n      page={pageIndex}\n      // SelectProps={{\n      //   inputProps: {\n      //     'aria-label': 'rows per page'\n      //   },\n      //   native: true\n      // }}\n      onPageChange={handleChangePage}\n      onRowsPerPageChange={handleChangeRowsPerPage}\n    />\n  )\n}\n","import React, { PureComponent } from 'react'\n// import Loader from '../../../Components/Loader/Loader'\nimport PaginationNav from './PaginationNav'\nimport Table from '@mui/material/Table'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\nimport TableHead from '@mui/material/TableHead'\nimport TableRow from '@mui/material/TableRow'\nimport Paper from '@mui/material/Paper'\n\nexport default class TableViewTable extends PureComponent {\n  render () {\n    const {\n      loading,\n      errors,\n      data,\n      headerGroups,\n      getTableProps,\n      getTableBodyProps,\n      page,\n      prepareRow,\n      canPreviousPage,\n      canNextPage,\n      pageIndex,\n      pageOptions,\n      gotoPage,\n      pageCount,\n      previousPage,\n      nextPage,\n      pageSize,\n      setPageSize,\n      children,\n      count\n    } = this.props\n\n    const childrenWithProps = React.Children.map(children, child => {\n      // checking isValidElement is the safe way and avoids a typescript error too\n      if (React.isValidElement(child)) {\n        return React.cloneElement(child, {\n          headerGroups,\n          getTableProps,\n          getTableBodyProps,\n          page,\n          prepareRow\n        })\n      }\n      return child\n    })\n\n    return (\n      <>\n        {!children &&\n          <>\n            <TableContainer component={Paper}>\n              {!loading && errors && <div class='alert alert-danger' role='alert'><ul>{errors.map((v, i) => <li key={i}>{v.message}</li>)}</ul></div>}\n              {data &&\n              <Table sx={{ minWidth: 650 }} size='small' aria-label='a dense table'>\n                <TableHead>\n                  {headerGroups.map((headerGroup, i) => (\n                    <TableRow key={i} {...headerGroup.getHeaderGroupProps()}>\n                      {headerGroup.headers.map((column, j) => (\n                        <TableCell key={j} {...column.getHeaderProps()}>\n                          {column.render('Header')}\n                          <span>\n                            {column.isSorted\n                              ? column.isSortedDesc\n                                ? ' 🔽'\n                                : ' 🔼'\n                              : ''}\n                          </span>\n                        </TableCell>\n                      ))}\n                    </TableRow>\n                  ))}\n                </TableHead>\n                <TableBody {...getTableBodyProps()}>\n                  {page.map((row, i) => {\n                    prepareRow(row)\n                    return (\n                      <TableRow key={i} sx={{ '&:last-child td, &:last-child th': { border: 0 } }} {...row.getRowProps()}>\n                        {row.cells.map((cell, j) => {\n                          return <TableCell key={j} component='th' scope='row' {...cell.getCellProps()}>{cell.render('Cell')}</TableCell>\n                        })}\n                      </TableRow>\n                    )\n                  })}\n                </TableBody>\n              </Table>}\n            </TableContainer>\n            <PaginationNav\n              canPreviousPage={canPreviousPage}\n              gotoPage={gotoPage}\n              canNextPage={canNextPage}\n              previousPage={previousPage}\n              nextPage={nextPage}\n              pageCount={pageCount}\n              pageIndex={pageIndex}\n              pageOptions={pageOptions}\n              pageSize={pageSize}\n              setPageSize={setPageSize}\n              count={count}\n              withPageSize\n            />\n          </>}\n        {children && <>{childrenWithProps}</>}\n      </>\n    )\n  }\n}\n","\nexport default {\n  // font scaling override - RN default is on\n  defaultMaxPageSize: 500,\n  defaultPageSize: 10,\n  defaultPageIndex: 0\n}\n","import React, { useEffect } from 'react'\nimport { useTable, usePagination } from 'react-table'\nimport { connect } from 'react-redux'\nimport TablepaginationActions, { setColumns } from '../redux'\nimport TableViewTable from '../components/TableViewTable'\nimport config from '../config'\nimport Immutable from 'seamless-immutable'\nimport TablePaginationActions from '@mui/material/TablePagination/TablePaginationActions'\nimport _ from 'lodash'\n\nfunction ListAllContent (props) {\n  const { count, reload, filter, children, fetchData, errors, columns, data, loading, pageCount: controlledPageCount, pageSize: xPageSize } = props\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize }\n  } = useTable({\n    columns,\n    data,\n    initialState: { pageIndex: config.defaultPageIndex, pageSize: xPageSize || config.defaultPageSize },\n    manualPagination: true,\n    pageCount: controlledPageCount\n  },\n  usePagination\n  )\n\n  const [reloadTable, setReloadTable] = React.useState(false)\n\n  useEffect(() => {\n    if (reload !== undefined && !reload) return\n    setReloadTable(true)\n  }, [reload])\n\n  useEffect(() => {\n    if (reloadTable) {\n      setReloadTable(false)\n      fetchData({\n        pageSize: (pageSize < 0) ? config.defaultMaxPageSize : pageSize,\n        pageIndex,\n        filter\n        // whereCondition\n      })\n    }\n  }, [fetchData, pageIndex, pageSize, filter, reloadTable])\n\n  useEffect(() => {\n    setReloadTable(true)\n  }, [pageIndex, pageSize, filter])\n\n  // inject data ke dalam children\n  const childrenWithProps = React.Children.map(children, child => {\n    // checking isValidElement is the safe way and avoids a typescript error too\n    if (React.isValidElement(child)) {\n      return React.cloneElement(child, {\n        columns,\n        loading,\n        errors,\n        data,\n        headerGroups,\n        getTableProps,\n        getTableBodyProps,\n        page,\n        prepareRow,\n        canPreviousPage,\n        canNextPage,\n        pageIndex,\n        pageOptions,\n        gotoPage,\n        pageCount,\n        previousPage,\n        nextPage,\n        pageSize,\n        setPageSize,\n        count\n      })\n    }\n    return child\n  })\n  return (\n    <>\n      {/* render children yang sudah di inject data */}\n      {childrenWithProps}\n    </>\n  )\n}\nfunction TableCon (props) {\n  const {\n    pageIndex,\n    pageSize,\n    pageCount,\n    loading,\n    data,\n    distinct,\n    whereCondition,\n    history,\n    fields,\n    filter,\n    tablepaginationFetchData,\n    listallServiceName,\n    children,\n    reload,\n    listName,\n    apiVersion,\n    ignoreFields,\n    tableColumns,\n    additionalRequests,\n    appendColumns,\n    dataDetail,\n    tableData,\n    tablePaginationSetReload,\n    tablePaginationSetColumns,\n    isReloading,\n    count\n  } = props\n  const fetchData = React.useCallback(({ pageSize, pageIndex, filter }) => {\n    let whereCond = {}\n    if (typeof whereCondition === 'string') whereCond = JSON.parse(whereCondition || '{}')\n    else whereCond = whereCondition\n    // jika function hit fetch data belum ready, maka jangan dihit fetch data\n    if (!tablepaginationFetchData) return\n    // hit fetch data\n    tablepaginationFetchData({\n      ignoreFields,\n      apiVersion: apiVersion,\n      listName: listName,\n      serviceName: listallServiceName,\n      pageSize: pageSize || config.defaultPageSize,\n      pageIndex: pageIndex || config.defaultPageIndex,\n      filter,\n      additionalRequests,\n      // filter: Immutable.asMutable(filter || {}, { deep: true }),\n      fields,\n      history,\n      whereCondition: whereCond,\n      distinct\n    })\n  }, [listName, distinct, fields, history, listallServiceName, tablepaginationFetchData, whereCondition, isReloading])\n  useEffect(() => {\n    tablePaginationSetReload({ serviceName: listName || listallServiceName, isReload: false })\n  }, [])\n\n  return (\n    <ListAllContent\n      columns={_.uniq(tableData.tableColumns, 'Header') || []}\n      data={tableData.tableRow || []}\n      fetchData={fetchData}\n      loading={loading}\n      reload={reload}\n      filter={filter}\n      pageCount={pageCount}\n      pageSize={pageSize}\n      pageIndex={pageIndex}\n      count={count}\n    >\n      {/* jika ada children maka render children, biasanya di passing dari component PageList */}\n      {children && children}\n      {/* kalau tidak ada children maka kita render component default nya yaitu TableViewTable artinya list data yang ditampilkan dalam bentuk table */}\n      {!children && <TableViewTable />}\n    </ListAllContent>\n  )\n}\nconst mapStateToProps = (state, ownProps) => {\n  const { columns, tableData, tableId, appendColumns } = ownProps\n\n  const errors = (state.tablepagination.errors || {})[ownProps.listName || ownProps.listallServiceName]\n  const loading = (state.tablepagination.loading || {})[ownProps.listName || ownProps.listallServiceName]\n  const reload = (state.tablepagination.reload || {})[ownProps.listName || ownProps.listallServiceName]\n  const reloadDetail = (state.tablepagination.reloadDetail || {})[ownProps.listName || ownProps.listallServiceName]\n\n  const data = (state.tablepagination.data || {})[ownProps.listName || ownProps.listallServiceName]\n  const pageCount = (state.tablepagination.pageCount || {})[ownProps.listName || ownProps.listallServiceName]\n  const count = (state.tablepagination.count || {})[ownProps.listName || ownProps.listallServiceName]\n  const pageSize = (state.tablepagination.pageSize || {})[ownProps.listName || ownProps.listallServiceName] || ownProps.pageSize\n  const filter = (state.tablepagination.filter || {})[ownProps.listName || ownProps.listallServiceName]\n  const dataDetail = state.tablepagination.dataDetail\n\n  // custom columns\n  const customCol = state.customcolumns.custom_columns[tableId]\n\n  let tableColumns = []\n\n  const tColumns = appendColumns ? appendColumns('columns', (data || []), Immutable.asMutable(columns), dataDetail) : (columns || [])\n  const tData = appendColumns ? appendColumns('data', (data || []), Immutable.asMutable(columns), dataDetail) : (data || [])\n\n  if (customCol != undefined) {\n    if (customCol.length > 0) {\n      tableColumns = state.customcolumns.custom_columns[tableId]\n    } else {\n      tableColumns = tColumns\n    }\n  }else {\n    tableColumns = tColumns\n  }\n\n  const props = {\n    tableData: { tableRow: tData, tableColumns: _.without(tableColumns, undefined) },\n    tableColumns: Immutable.asMutable(tableColumns),\n    reload,\n    isReloading: reloadDetail,\n    data,\n    filter,\n    loading: loading,\n    pageCount,\n    pageSize: pageSize,\n    pageIndex: state.tablepagination.pageIndex,\n    errors,\n    count\n  }\n  return props\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    tablePaginationSetReload: data => dispatch(TablepaginationActions.setReloadDetail(data)),\n    tablepaginationFetchData: data => dispatch(TablepaginationActions.tablepaginationFetchData(data)),\n    tablePaginationSetColumns: data => dispatch(TablepaginationActions.tablePaginationSetColumns(data))\n  }\n}\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TableCon)\n"],"names":["TableViewCombobox","props","optionColumnValue","optionColumnLabel","optionsDefaultValue","label","listallServiceName","loading","errors","data","headerGroups","getTableProps","getTableBodyProps","page","prepareRow","canPreviousPage","canNextPage","pageIndex","pageOptions","gotoPage","pageCount","previousPage","nextPage","pageSize","defaultVal","filter","v","type","class","className","id","style","display","setPageSize","Combobox","console","log","getColumns","whereCondition","distinct","history","fields","onChange","defaultValue","labelButton","labelColumn","inputValue","placeholder","columns","Header","accessor","p","onClick","val","originalValue","injectIntl","useHistory","PaginationNav","count","withPageSize","rowsPerPageOptions","value","colSpan","rowsPerPage","onPageChange","event","newPage","onRowsPerPageChange","e","Number","target","TableViewTable","this","children","childrenWithProps","React","child","component","Paper","role","map","i","message","sx","minWidth","size","headerGroup","getHeaderGroupProps","headers","column","j","getHeaderProps","render","isSorted","isSortedDesc","row","border","getRowProps","cells","cell","scope","getCellProps","PureComponent","defaultMaxPageSize","defaultPageSize","defaultPageIndex","ListAllContent","reload","fetchData","controlledPageCount","xPageSize","useTable","initialState","config","manualPagination","usePagination","state","reloadTable","setReloadTable","useEffect","undefined","connect","ownProps","tableId","tableData","appendColumns","tablepagination","listName","reloadDetail","dataDetail","customCol","customcolumns","custom_columns","tableColumns","tColumns","Immutable","tData","length","tableRow","_","isReloading","dispatch","tablePaginationSetReload","TablepaginationActions","tablepaginationFetchData","tablePaginationSetColumns","apiVersion","ignoreFields","additionalRequests","whereCond","JSON","parse","serviceName","isReload"],"sourceRoot":""}