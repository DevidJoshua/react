{"version":3,"file":"static/js/8003.22b0291a.chunk.js","mappings":"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","sources":["Pages/PaymentMethod/Manifest.js","Pages/PaymentMethod/PageUpdate.js","features/TextEditor/components/FieldTextArea.js"],"sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Moment from 'moment'\nimport AppConfig from '../../core/Config/AppConfig'\nconst basePath = AppConfig.basePath\n\nconst entityName = 'PaymentMethod'\nconst entity = 'paymentmethod'\nconst serviceEntity = 'PaymentMethod'\n\nexport const redirectAfterCreate = '/' + entity + '/detail'\nexport const redirectAfterDelete = '/' + entity\nexport const detailPageUrl = (id) => (`/${entity}/detail/${id}`)\nexport const upsertPageUrl = (id) => (`/${entity}/upsert${id ? '/' + id : ''}`)\nexport const listallPageUrl = () => (`/${entity}`)\nexport const createNewButtonLabel = 'createNewButtonLabel'\nexport const createPageTitle = 'createPageTitle'\nexport const listallPageTitle = 'listallPageTitle'\nexport const detailPageTitle = 'detailPageTitle'\nexport const upsertPageTitle = 'Form ' + entityName\nexport const createService = 'create' + serviceEntity\nexport const detailService = 'getDetail' + serviceEntity\nexport const upsertService = 'upsert' + serviceEntity\nexport const listallService = 'getAll' + serviceEntity + 's'\nexport const deleteService = 'delete' + serviceEntity\nexport const fields = '_id,title,description,created_at,updated_at,created_by{full_name},updated_by{full_name}'\nexport const getColumns = (history) => [\n  {\n    Header: ' ',\n    accessor: '_id',\n    Cell: p => (\n      <div className='btn-group'>\n        <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n          <span className='sr-only'>Toggle Dropdown</span>\n        </button>\n        <div className='dropdown-menu' role='menu'>\n          <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate}/${p.cell.value}`}>Detail</Link>\n        </div>\n      </div>)\n  },\n  { Header: 'Nama Payment Method', accessor: 'title' },\n  { Header: 'Keterangan', accessor: 'description' },\n  { Header: 'Dibuat Oleh', accessor: 'created_by.full_name' },\n  { Header: 'Dirubah Oleh', accessor: 'updated_by.full_name' },\n  {\n    Header: 'Tanggal Dibuat',\n    accessor: 'created_at',\n    Cell: d => {\n      let data = Moment(d.cell.value)\n      if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n      else data = ''\n      return (<span>{`${data}`}</span>)\n    }\n  },\n  {\n    Header: 'Tanggal Dirubah',\n    accessor: 'updated_at',\n    Cell: d => {\n      let data = Moment(d.cell.value)\n      if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n      else data = ''\n      return (<span>{`${data}`}</span>)\n    }\n  },\n]\nexport default {\n  redirectAfterCreate,\n  redirectAfterDelete,\n  detailPageUrl,\n  upsertPageUrl,\n  // createPageUrl,\n  createNewButtonLabel,\n  createPageTitle,\n  listallPageTitle,\n  detailPageTitle,\n  // updatePageTitle,\n  // createService,\n  detailService,\n  // updateService,\n  listallService,\n  deleteService,\n  upsertService,\n  fields,\n  getColumns,\n  listallPageUrl\n}\n","import React from 'react'\nimport { Detail } from '../../core/features/TablePagination'\nimport { FieldTextArea } from '../../features/TextEditor/components'\nimport ContentWrapper from '../../core/Components/Layout/ContentWrapper'\nimport { detailService, upsertService, fields, createPageTitle, upsertPageTitle, listallPageUrl, redirectAfterDelete, listallPageTitle } from './Manifest'\nimport AppConfig from '../../core/Config/AppConfig'\n\nconst FormUpdate = (props) => {\n  const {\n    tablepaginationOnChangeForm,\n    dataDetail,\n    payload,\n    upsertServiceName,\n    id,\n    tablepaginationResetForm\n  } = props\n  React.useEffect(() => {\n    const defaultFormValue = {}\n    if (id) defaultFormValue._id = id\n    tablepaginationResetForm({ isInitialReset: true, serviceName: upsertServiceName, defaultFormValue })\n  }, [tablepaginationResetForm, upsertServiceName, id])\n  return (\n    <div className='row'>\n      <div className='col-sm-6'>\n        <div className='form-group'>\n          <label htmlFor='title'>Title</label>\n          <input type='text' value={payload.title || dataDetail.title} className='form-control' id='title' placeholder=' ' onChange={e => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'title', fieldValue: e.target.value })} />\n        </div>\n        <div className='form-group'>\n          <label htmlFor='description'>Keterangan</label>\n          <FieldTextArea forProcess={typeof id !== 'undefined' ? 'update' : 'create'} dataId={id} defaultValue={typeof payload.description !== 'undefined' ? payload.description : dataDetail.description} onChange={(v) => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'description', fieldValue: v })} idElement='description' />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction Comp (props) {\n  const { match } = props\n  return (\n    <ContentWrapper\n      pageTitle={createPageTitle}\n      breadcrumb={[\n        { title: 'Beranda', link: AppConfig.appHomePage },\n        { title: listallPageTitle, link: listallPageUrl() },\n        { title: upsertPageTitle, link: null, isActive: true }\n      ]}\n      contentHeaderTitle={createPageTitle}\n      isNeedLoggedin\n    >\n      <div className='row'>\n        <div className='col-md-12'>\n          <Detail\n            detailServiceName={detailService}\n            upsertServiceName={upsertService}\n            fields={fields}\n            id={match.params._id}\n            formTitle={upsertPageTitle}\n            redirectAfterDelete={redirectAfterDelete}\n          >\n            <FormUpdate />\n          </Detail>\n        </div>\n      </div>\n    </ContentWrapper>\n  )\n}\nexport default Comp\n","import React, { useEffect } from 'react'\n// import _ from 'lodash'\nimport AppConfig from '../../../core/Config/AppConfig'\nimport { getAccessToken } from '../../../core/Utils/Utils'\n\nfunction FieldTextArea (props) {\n  const { placeholder, textEditor, defaultValue, initValue, onChange, idElement, dataId } = props\n  // const [isFirstLoad, setIsFirstLoad] = React.useState(undefined)\n  useEffect(() => {\n    console.log('valuevaluevalue initValue=>', initValue)\n    console.log('valuevaluevalue id=>', dataId)\n    if (textEditor) {\n      let isReset = false\n      // if (initValue === defaultValue && ) {\n      //   isReset = true\n      // }\n      // setCurrentValue(defaultValue)\n      if (typeof dataId !== 'undefined' && typeof defaultValue !== 'undefined') {\n        console.log('valuevaluevalue reloadddd=>', defaultValue)\n        window.activateEditorV2({\n          idElement,\n          hostBackend: AppConfig.hostBackend,\n          at: getAccessToken(),\n          cb: (content) => {\n            onChange(content)\n          },\n          isReset,\n          defaultValue\n        })\n      }\n      if (typeof dataId === 'undefined') {\n        window.activateEditorV2({\n          idElement,\n          hostBackend: AppConfig.hostBackend,\n          at: getAccessToken(),\n          cb: (content) => {\n            onChange(content)\n          },\n          isReset,\n          defaultValue\n        })\n      }\n    }\n    // setIsFirstLoad(false)\n  // })\n  }, [defaultValue, dataId, idElement, onChange, textEditor, initValue])\n\n  // if (forProcess === 'update' && _.isEmpty(dataId)) return null\n  // if (forProcess === 'update' && (dataId === 'undefined' || _.isEmpty(dataId))) return null\n  // if (forProcess === 'update' && dataId === '') return null\n\n  if (typeof dataId !== 'undefined' && !dataId) return null\n\n  // console.log('FieldTextAreaFieldTextAreaFieldTextAreaFieldTextArea dataId=>', dataId)\n  // console.log('FieldTextAreaFieldTextAreaFieldTextAreaFieldTextArea defaultValue=>', defaultValue)\n  // console.log('FieldTextAreaFieldTextAreaFieldTextAreaFieldTextArea forProcess=>', forProcess)\n  // console.log('FieldTextAreaFieldTextAreaFieldTextAreaFieldTextArea renderrrr=>')\n  return (\n    <div className='row'>\n      <div className='col-12'>\n        <div style={{ position: 'relative' }}>\n          {textEditor && <div style={{ backgroundColor: 'black', position: 'absolute', width: '100%', height: '100%', top: 0 }}><center><span style={{ color: 'green', fontSize: 30, marginTop: 200 }}>Gambar sedang diupload...</span></center></div>}\n          <div id='texareaWrapper' style={{ width: '100%', height: '100%', backgroundColor: 'black', opacity: 1 }}>\n            <textarea className='textarea' id={idElement} placeholder={placeholder || 'Isi keterangan'} value={defaultValue} style={{ width: '100%' }} onChange={(e) => onChange(e.target.value)} />\n          </div>\n        </div>\n      </div>\n    </div>\n    // <textarea className='textarea' id={idElement} placeholder='Place some text here' style={{ width: '100%', height: 200, fontSize: 14, lineHeight: 18, border: '1px solid #dddddd', padding: 10 }} value={defaultValue} onChange={(e) => onChange(e.target.value)} />\n  )\n}\nexport default FieldTextArea\n"],"names":["basePath","AppConfig","entity","redirectAfterCreate","redirectAfterDelete","upsertPageUrl","id","listallPageUrl","createNewButtonLabel","createPageTitle","listallPageTitle","detailPageTitle","upsertPageTitle","detailService","upsertService","listallService","deleteService","fields","getColumns","history","Header","accessor","Cell","p","className","type","role","to","cell","value","d","data","Moment","isValid","format","detailPageUrl","FormUpdate","props","tablepaginationOnChangeForm","dataDetail","payload","upsertServiceName","tablepaginationResetForm","React","defaultFormValue","_id","isInitialReset","serviceName","htmlFor","title","placeholder","onChange","e","fieldName","fieldValue","target","forProcess","dataId","defaultValue","description","v","idElement","match","pageTitle","breadcrumb","link","isActive","contentHeaderTitle","isNeedLoggedin","detailServiceName","params","formTitle","textEditor","initValue","useEffect","console","log","window","activateEditorV2","hostBackend","at","getAccessToken","cb","content","isReset","style","position","backgroundColor","width","height","top","color","fontSize","marginTop","opacity"],"sourceRoot":""}