{"version":3,"file":"static/js/3138.1571990e.chunk.js","mappings":"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","sources":["Pages/BoAccount/AllBankAccountPageList.js","Pages/BoAccount/Manifest.js","features/BankAccount/containers/TableHeaderCon.js","features/BankAccount/containers/ButtonActionCon.js"],"sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport DatePicker from 'react-datepicker'\nimport moment from 'moment'\nimport ContentWrapper from '../../core/Components/Layout/ContentWrapper'\nimport { TableHeaderCon } from '../../features/BankAccount'\nimport {\n  FilteringTable,\n  Multiselect,\n  Table,\n  Filter\n} from '../../core/features/TablePagination'\nimport {\n  getAllBankAccount,\n  fields,\n  listallPageTitle,\n  upsertPageUrl,\n  createNewButtonLabel,\n  getApprovedBankAccountColumns\n} from './Manifest'\nimport AppConfig from '../../core/Config/AppConfig'\nimport styled from 'styled-components'\n\nconst Styles = styled.div``\nclass Comp extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      columns: getApprovedBankAccountColumns(props.history),\n      startDate: props.startDate,\n      endDate: props.endDate\n    }\n  }\n\n  render () {\n    const paginationConfig = {\n      serviceName: getAllBankAccount,\n      fields: fields\n    }\n    const { columns } = this.state\n    return (\n      <ContentWrapper\n        pageTitle={listallPageTitle}\n        breadcrumb={[\n          { title: 'Beranda', link: AppConfig.appHomePage },\n          { title: listallPageTitle, link: null, isActive: true }\n        ]}\n        contentHeaderTitle={listallPageTitle}\n        isNeedLoggedin\n      >\n        <div className='row'>\n          <div className='col-md-12'>\n            <Styles>\n              <Filter\n                withoutCardHeader\n                serviceName={paginationConfig.serviceName}\n                child={(tablepaginationOnChangeFilter, filter = {}) => (\n                  <div className='form-group'>\n                    <div className='d-flex flex-wrap flex-grow'>\n                      <Multiselect\n                        isMulti={false}\n                        className='mr-3 mb-3 w-25'\n                        label='Bank Code'\n                        labelButton='Pilih'\n                        labelColumn='Pilih'\n                        placeholder='Kode Bank'\n                        optionColumnValue='_id'\n                        optionColumnLabel='bank_name'\n                        getColumns={({ onChange }) => []}\n                        listallServiceName='getAllBankCode'\n                        fields='_id,bank_name,bank_code'\n                        onChange={({ val }) => {\n                          tablepaginationOnChangeFilter({\n                            serviceName: paginationConfig.serviceName,\n                            fieldName: 'bank_code',\n                            fieldValue: val\n                          })\n                        }}\n                        apiVersion={2}\n                      />\n                      &nbsp;&nbsp;&nbsp;\n                      <div class='input-group mr-3 mb-3 w-25'>\n                        <select\n                          class='custom-select'\n                          id='statusFilter'\n                          onChange={(e) => {\n                            tablepaginationOnChangeFilter({\n                              serviceName: paginationConfig.serviceName,\n                              fieldName: 'status',\n                              fieldValue: e.target.value\n                            })\n                          }}\n                        >\n                          <option value='' selected>All Status</option>\n                          <option value='APPROVED'>Approved</option>\n                          <option value='NEED_APPROVAL'>Need Approval</option>\n                        </select>\n                      </div>\n                      <div class='input-group mr-3 mb-3 w-25'>\n                        <input\n                          id='account_name'\n                          type='text'\n                          className='form-control'\n                          placeholder='Account Name'\n                          onChange={(e) => {\n                            tablepaginationOnChangeFilter({\n                              serviceName: paginationConfig.serviceName,\n                              fieldName: 'account_name',\n                              fieldValue: e.target.value\n                            })\n                          }}\n                        />\n                      </div>\n                      <div class='input-group mr-3 mb-3 w-25'>\n                        <input\n                          id='account_number'\n                          type='text'\n                          className='form-control'\n                          placeholder='Account Number'\n                          onChange={(e) => {\n                            tablepaginationOnChangeFilter({\n                              serviceName: paginationConfig.serviceName,\n                              fieldName: 'account_number',\n                              fieldValue: e.target.value\n                            })\n                          }}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                )}\n              />\n            </Styles>\n            <Table\n              listallServiceName={paginationConfig.serviceName}\n              fields={paginationConfig.fields}\n              columns={columns}\n              // createHref={upsertPageUrl()}\n              // createNewButtonLabel={createNewButtonLabel}\n              // whereCondition={{ status: 'NEED_APPROVAL' }}\n              apiVersion={2}\n              cardHeader={() => {\n                return <TableHeaderCon />\n              }}\n            />\n          </div>\n        </div>\n      </ContentWrapper>\n    )\n  }\n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    userPrivileges: state.myprofile.user_privileges\n  }\n}\nexport default connect(mapStateToProps)(Comp)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport _ from 'lodash'\nimport { NeedApprovalCheckBox } from '../../features/NeedApproval'\nimport AppConfig from '../../core/Config/AppConfig'\nimport {sanitizeValue} from '../../core/Utils/Utils'\n\nimport Moment from 'moment'\nconst basePath = AppConfig.basePath\n\nconst entityName = 'Account'\nexport const entity = 'account'\nconst serviceEntity = 'BankAccount'\n\nexport const redirectAfterCreate = '/account-number-detail'\nexport const redirectAfterDelete = '/all-bank-account'\nexport const detailPageUrl = (id) => (`/account-number-detail/${id}`)\nexport const upsertPageUrl = (id) => (`/form-account-number${id ? '/' + id : ''}`)\nexport const listallPageUrl = () => ('/all-bank-account')\nexport const createNewButtonLabel = 'Buat Kategori Baru'\nexport const createPageTitle = 'Detail Bank Account'\nexport const listallPageTitle = 'All Bank Accounts'\nexport const needApprovalListallPageTitle = 'Need Approval Bank Accounts'\nexport const detailPageTitle = 'Detail Bank Account'\nexport const upsertPageTitle = 'Form ' + entityName\n// export const createService = 'create' + serviceEntity\nexport const detailService = 'getDetailBankAccountById'\n// export const updateService = 'update' + serviceEntity\nexport const upsertService = 'upsertAccountNumber'\n\nexport const opApproveAccountNumberService = 'approveBankAccount'\nexport const opRejectAccountNumberService = 'rejectBankAccount'\n\nexport const approvedAccountNumberlistallService = 'getAllBankAccount'\nexport const getAllBankAccount = 'getAllBankAccount'\n\nexport const needApprovalAccountNumberlistallService = 'getAllNeedApprovalBankAccount'\nexport const deleteService = 'delete' + serviceEntity +'ById'\nexport const fields = { _id: true, bank_code_id: { _id: true,bank_code:true }, bank_code: true, bank_name: true, status: true, description: true, account_number: true, created_at: true, updated_at: true, created_by: { _id: true, full_name: true, email: true }, validated_by: { _id: true, full_name: true, email: true , updated_at:true }, approved_by: { _id: true, email: true, full_name: true }, account_name: true }\n// export const fields = '_id,status,description,account_number,created_at,updated_at,created_by{_id,full_name},validated_by{_id,full_name},approved_by{_id,email,full_name},account_name'\nexport const getApprovedBankAccountColumns = (history) => [\n  {\n    Header: ' ',\n    accessor: '_id',\n    Cell: p => (\n      <div className='btn-group'>\n        <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n          <span className='sr-only'>Toggle Dropdown</span>\n        </button>\n        <div className='dropdown-menu' role='menu'>\n          <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate}/${p.cell.value}`}>Detail</Link>\n        </div>\n      </div>)\n  },\n  { Header: 'Account Name', accessor: p=>sanitizeValue(p.account_name) },\n  { Header: 'Account Number', accessor: p=>sanitizeValue(p.account_number) },\n  { Header: 'Bank Code', accessor: p=>sanitizeValue(p.bank_code) },\n  { Header: 'Bank Name', accessor: p=>sanitizeValue(p.bank_name) },\n  { Header: 'description', accessor: p=>sanitizeValue(p.description) },\n  { Header: 'Status', accessor: p=>sanitizeValue(p.status) },\n  { Header: 'created by', accessor: p => <span>{sanitizeValue((p.created_by || {}).full_name)}</span> },\n  { Header: 'approved by', accessor: 'approved_by.full_name' }\n]\n\nexport const getNeedApprovalBankAccountColumns = (history) => [\n  {\n    Header: ' ',\n    accessor: '_id',\n    Cell: p => (\n      <div className='btn-group'>\n        <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n          <span className='sr-only'>Toggle Dropdown</span>\n        </button>\n        <div className='dropdown-menu' role='menu'>\n          <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate}/${p.cell.value}`}>Detail</Link>\n        </div>\n      </div>)\n  },\n  { Header: 'Receipt Name', accessor: p=>sanitizeValue(p.account_name) },\n  { Header: 'Receipt Number', accessor: p=>sanitizeValue(p.account_number) },\n  { Header: 'Bank Code', accessor: p=>sanitizeValue(p.bank_code) },\n  { Header: 'Bank Name', accessor: p=>sanitizeValue(p.bank_name) },\n  { Header: 'Description', accessor: p=>sanitizeValue(p.description) },\n  { Header: 'Status', accessor: p=>sanitizeValue(p.status) },\n  { Header: 'Validated by', accessor: p => <span>{sanitizeValue((p.validated_by || {}).full_name)}</span> },\n  { Header: 'Validated date', accessor: p =>{\n    const date = Moment(p.created_at)\n    const dt = p.created_at === null || p.created_at === undefined ? '-' : date.format(AppConfig.datetimeFormat)\n    return sanitizeValue(dt)\n  }},\n  { Header: 'Created by', accessor: p => <span>{(sanitizeValue(p.created_by || {}).full_name)}</span> },\n  { Header: 'Created at', accessor: p =>{\n    const date = Moment(p.created_at)\n    const dt = p.created_at === null || p.created_at === undefined ? '-' : date.format(AppConfig.datetimeFormat)\n    return sanitizeValue(dt)\n  }},\n  { Header: 'Updated at', accessor: p =>{\n    const date = Moment(p.updated_at)\n    const dt = p.updated_at === null || p.updated_at === undefined ? '-' : date.format(AppConfig.datetimeFormat)\n    return sanitizeValue(dt)\n  } },\n  {\n    Header: 'set',\n    accessor: p => {\n      if(!_.has(p,'validated_by._id')) return(<></>)\n      return (\n        <>\n          <div className='form-check'>\n            <NeedApprovalCheckBox idComparison={ p.validated_by._id} transactionId={p._id} />\n          </div>\n        </>\n      )\n    }\n  }\n  // {\n  //   Header: 'Tanggal Dibuat',\n  //   accessor: 'created_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  // {\n  //   Header: 'Tanggal Dirubah',\n  //   accessor: 'updated_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n\n]\n\n\n\n\nexport default {\n  redirectAfterCreate,\n  redirectAfterDelete,\n  detailPageUrl,\n  upsertPageUrl,\n  // createPageUrl,\n  createNewButtonLabel,\n  createPageTitle,\n  listallPageTitle,\n  detailPageTitle,\n  // updatePageTitle,\n  // createService,\n  detailService,\n  // updateService,\n  // listallService,\n  deleteService,\n  upsertService,\n  fields,\n  listallPageUrl\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { injectIntl } from 'react-intl'\nimport { useHistory } from 'react-router-dom'\n// import NeedApprovalActions from '../redux'\n\nconst TableHeaderCon = ({\n  needapprovalCheckboxSubmitApprove,\n  needapprovalCheckboxSubmitReject,\n  needapprovalCheckbox,\n  loadingApprove,\n  merchantId,\n  history\n}) => {\n  return (\n    <>\n      <button type='button' className='btn btn-warning' onClick={() => history.push('/form-account-number')}><i className='fas fa-plus' /> Create New </button>\n    </>\n  )\n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    // merchantId: state.myprofile.merchant.id,\n    // loadingApprove: state.needapproval.loadingApprove,\n    // needapprovalCheckbox: state.needapproval.checkbox\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    // needapprovalCheckboxSubmitReject: data => dispatch(NeedApprovalActions.needapprovalCheckboxSubmitReject(data)),\n    // needapprovalCheckboxSubmitApprove: data => dispatch(NeedApprovalActions.needapprovalCheckboxSubmitApprove(data))\n  }\n}\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n// )(injectIntl(TableHeaderCon))\n)(injectIntl((props) => {\n  var history = useHistory()\n  return <TableHeaderCon history={history} {...props} />\n}))\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { injectIntl } from 'react-intl'\n// import NeedApprovalActions from '../redux'\n\nconst TableHeaderCon = ({\n  history,\n  id,\n  dataDetail,\n  merchantId,\n  deleteService,\n  upsertPageUrl,\n  userId\n}) => {\n  return (\n    <>\n      {dataDetail && (dataDetail.status === 'NEED_APPROVAL' || dataDetail.status === 'REJECTED') && (dataDetail.created_by || {})._id === userId && deleteService && <button style={{ width: 100 }} type='button' className='btn bg-gradient-danger' data-toggle='modal' data-target='#modal-danger'>Hapus</button>}\n      {dataDetail && (dataDetail.status === 'NEED_APPROVAL' || dataDetail.status === 'REJECTED') && (dataDetail.created_by || {})._id === userId && upsertPageUrl(id) && <button style={{ width: 100, marginLeft: 5 }} onClick={() => history.push(upsertPageUrl(id))} type='button' className='btn bg-gradient-primary'>Ubah</button>}\n      {(dataDetail && upsertPageUrl()) && <button style={{ width: 100, marginLeft: 5 }} onClick={() => history.push(upsertPageUrl())} type='button' className='btn bg-gradient-info'>Buat</button>}\n    </>\n  )\n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    merchantId: state.myprofile.merchant.id,\n    userId: state.myprofile.user_id\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    // needapprovalCheckboxSubmitReject: data => dispatch(NeedApprovalActions.needapprovalCheckboxSubmitReject(data)),\n    // needapprovalCheckboxSubmitApprove: data => dispatch(NeedApprovalActions.needapprovalCheckboxSubmitApprove(data))\n  }\n}\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(injectIntl(TableHeaderCon))\n"],"names":["Styles","styled","Comp","props","state","columns","getApprovedBankAccountColumns","history","startDate","endDate","paginationConfig","serviceName","getAllBankAccount","fields","this","pageTitle","listallPageTitle","breadcrumb","title","link","AppConfig","isActive","contentHeaderTitle","isNeedLoggedin","className","withoutCardHeader","child","tablepaginationOnChangeFilter","isMulti","label","labelButton","labelColumn","placeholder","optionColumnValue","optionColumnLabel","getColumns","onChange","listallServiceName","val","fieldName","fieldValue","apiVersion","class","id","e","target","value","selected","type","cardHeader","Component","connect","ownProps","userPrivileges","myprofile","user_privileges","basePath","redirectAfterCreate","redirectAfterDelete","upsertPageUrl","listallPageUrl","needApprovalListallPageTitle","detailPageTitle","upsertPageTitle","detailService","upsertService","opApproveAccountNumberService","opRejectAccountNumberService","needApprovalAccountNumberlistallService","deleteService","_id","bank_code_id","bank_code","bank_name","status","description","account_number","created_at","updated_at","created_by","full_name","email","validated_by","approved_by","account_name","Header","accessor","Cell","p","role","to","cell","sanitizeValue","getNeedApprovalBankAccountColumns","date","Moment","dt","undefined","format","_","idComparison","transactionId","TableHeaderCon","needapprovalCheckboxSubmitApprove","needapprovalCheckboxSubmitReject","needapprovalCheckbox","loadingApprove","merchantId","onClick","push","dispatch","injectIntl","useHistory","merchant","userId","user_id","dataDetail","style","width","marginLeft"],"sourceRoot":""}