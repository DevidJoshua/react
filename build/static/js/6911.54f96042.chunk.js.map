{"version":3,"file":"static/js/6911.54f96042.chunk.js","mappings":"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","sources":["Pages/CustomerEmail/Manifest.js","Pages/EmailBatch/Manifest.js","Pages/EmailBatch/PageUpdate.js","Pages/EmailBlast/Manifest.js","features/TextEditor/components/FieldTextArea.js"],"sourcesContent":["const entityName = 'CustomerEmail'\nconst entity = 'customeremail'\nconst serviceEntity = 'CustomerEmail'\n\nexport const redirectAfterCreate = '/' + entity + '/detail'\nexport const redirectAfterDelete = '/' + entity\nexport const detailPageUrl = (id) => (`/${entity}/detail/${id}`)\nexport const updatePageUrl = (id) => (`/${entity}/update/${id}`)\nexport const createPageUrl = ({ batchId }) => (`/${entity}/create/${batchId}`)\nexport const createNewButtonLabel = 'label-create_customer_email'\nexport const createPageTitle = 'label-create_customer_email'\nexport const listallPageTitle = 'Email Customer'\nexport const detailPageTitle = 'Detail Email Customer'\nexport const updatePageTitle = 'Update ' + entityName\nexport const createService = 'create' + serviceEntity\nexport const detailService = 'getDetail' + serviceEntity\nexport const updateService = 'update' + serviceEntity\nexport const listallService = 'getAll' + serviceEntity + 's'\nexport const listallByBatchIdService = 'getAll' + serviceEntity + 'sByBatchId'\nexport const deleteService = 'delete' + serviceEntity\nexport const fields = '_id,email,batch_id,created_at,updated_at,created_by{full_name},updated_by{full_name}'\nexport const getColumns = (history) => [\n  // {\n  //   Header: 'Act',\n  //   accessor: '_id',\n  //   Cell: p => (\n  //     <div className='btn-group'>\n  //       <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n  //         <span className='sr-only'>Toggle Dropdown</span>\n  //       </button>\n  //       <div className='dropdown-menu' role='menu'>\n  //         <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate}/${p.cell.value}`}>Detail</Link>\n  //       </div>\n  //     </div>)\n  // },\n  { Header: 'Email', accessor: 'email' }\n]\nexport default {\n  redirectAfterCreate,\n  redirectAfterDelete,\n  detailPageUrl,\n  updatePageUrl,\n  createPageUrl,\n  createNewButtonLabel,\n  createPageTitle,\n  listallPageTitle,\n  detailPageTitle,\n  updatePageTitle,\n  createService,\n  detailService,\n  updateService,\n  listallService,\n  listallByBatchIdService,\n  deleteService,\n  fields,\n  getColumns\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport AppConfig from '../../core/Config/AppConfig'\nconst basePath = AppConfig.basePath\n\n// const entityName = 'EmailBatch'\nconst entity = 'emailbatch'\nconst serviceEntity = 'EmailBatch'\n\nexport const redirectAfterCreate = '/' + entity + '/detail'\nexport const redirectAfterDelete = '/' + entity\nexport const detailPageUrl = (id) => (`/${entity}/detail/${id}`)\nexport const upsertPageUrl = (id) => (`/${entity}/upsert${id ? '/' + id : ''}`)\nexport const listallPageUrl = () => (`/${entity}`)\nexport const createNewButtonLabel = 'Buat Grup Email Customer'\nexport const createPageTitle = 'Buat Grup Email Customer'\nexport const listallPageTitle = 'Email Grup'\nexport const detailPageTitle = 'Detail Email Grup'\nexport const upsertPageTitle = 'Form Grup Email'\nexport const createService = 'create' + serviceEntity\nexport const detailService = 'getDetail' + serviceEntity\nexport const upsertService = 'upsert' + serviceEntity\nexport const listallService = 'getAll' + serviceEntity + 's'\nexport const deleteService = 'delete' + serviceEntity\nexport const fields = '_id,customer_email_ids{_id, email},file_ids{_id, filename, filenameorigin, file_type},title,description,created_at,updated_at,created_by{full_name},updated_by{full_name}'\nexport const getColumns = (history) => [\n  {\n    Header: '',\n    accessor: '_id',\n    Cell: p => (\n      <div className='btn-group'>\n        <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n          <span className='sr-only'>Toggle Dropdown</span>\n        </button>\n        <div className='dropdown-menu' role='menu'>\n          <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate}/${p.cell.value}`}>Detail</Link>\n        </div>\n      </div>)\n  },\n  { Header: 'Judul', accessor: 'title' },\n  { Header: 'Keterangan', accessor: 'description' }\n  // {\n  //   Header: 'Toko',\n  //   accessor: 'toko_id',\n  //   Cell: d => {\n  //     // let data = Moment(d.cell.value)\n  //     // if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     // else data = ''\n  //     const toko = (_.map(d.cell.value || [], (v, k) => v.name) || []).join(', ')\n  //     return (<span>{`${toko}`}</span>)\n  //   }\n  // }\n  // {\n  //   Header: 'Terakhir Dikirim',\n  //   accessor: 'last_sent',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  // {\n  //   Header: 'Tanggal Dibuat',\n  //   accessor: 'created_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  // {\n  //   Header: 'Tanggal Dirubah',\n  //   accessor: 'updated_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  // { Header: 'Dibuat Oleh', accessor: 'created_by.full_name' },\n  // { Header: 'Dirubah Oleh', accessor: 'updated_by.full_name' }\n  // { Header: 'created at', accessor: 'created_at' },\n  // { Header: 'updated at', accessor: 'updated_at' }\n]\nexport default {\n  redirectAfterCreate,\n  redirectAfterDelete,\n  detailPageUrl,\n  upsertPageUrl,\n  // createPageUrl,\n  createNewButtonLabel,\n  createPageTitle,\n  listallPageTitle,\n  detailPageTitle,\n  // updatePageTitle,\n  // createService,\n  detailService,\n  // updateService,\n  listallService,\n  deleteService,\n  upsertService,\n  fields,\n  getColumns,\n  listallPageUrl,\n  upsertPageTitle\n}\n","import React from 'react'\n// import Immutable from 'seamless-immutable'\nimport { Detail, Table } from '../../core/features/TablePagination'\n// import { FieldUploadPictures } from '../../features/PictureUpload/components'\nimport { FieldTextArea } from '../../features/TextEditor/components'\nimport ContentWrapper from '../../core/Components/Layout/ContentWrapper'\n// import { path } from 'ramda'\nimport { upsertPageTitle, upsertService, fields, detailService, redirectAfterDelete } from './Manifest'\nimport ManifestEmailBlast from '../EmailBlast/Manifest'\nimport ManifestCustomerEmail from '../CustomerEmail/Manifest'\nimport AppConfig from '../../core/Config/AppConfig'\nconst FormUpdate = (props) => {\n  const {\n    tablepaginationOnChangeForm,\n    dataDetail,\n    payload,\n    upsertServiceName,\n    id,\n    tablepaginationResetForm\n    // fileArray\n  } = props\n\n  React.useEffect(() => {\n    const defaultFormValue = {}\n    if (id) defaultFormValue._id = id\n    tablepaginationResetForm({\n      isInitialReset: true,\n      serviceName: upsertServiceName,\n      defaultFormValue,\n      formSchema: {\n        title: {\n          type: 'string',\n          validate: (v) => { if ((id && typeof v !== 'undefined' && !v) || (!id && !v)) return { errorMessage: 'Nama grup email harus diisi.' } }\n        },\n        insert_email_list: {\n          type: 'string',\n          validate: (v) => {\n            if (typeof v !== 'undefined' && v) {\n              // cek kalo ada karakter enter\n              if (/\\r|\\n$/.test(v)) {\n                // Newline\n                return { errorMessage: 'Delimiter menggunakan \",\" bukan karakter Enter' }\n              }\n            }\n          }\n        },\n        remove_email_list: {\n          type: 'string',\n          validate: (v) => {\n            if (typeof v !== 'undefined' && v) {\n              // cek kalo ada karakter enter\n              if (/\\r|\\n$/.test(v)) {\n                // Newline\n                return { errorMessage: 'Delimiter menggunakan \",\" bukan karakter Enter' }\n              }\n            }\n          }\n        },\n        onSuccess: () => {\n          tablepaginationOnChangeForm({ serviceName: upsertServiceName, batchData: { insert_email_list: '', remove_email_list: '' } })\n        }\n      },\n      needToRealoadAfterSubmit: [ManifestCustomerEmail.listallByBatchIdService]\n    })\n  }, [tablepaginationResetForm, upsertServiceName, id, tablepaginationOnChangeForm])\n  return (\n    <div className='row'>\n      <div className='col-sm-12'>\n        <div className='form-group'>\n          <label htmlFor='title'>Nama Grup Email</label>\n          <input type='text' className='form-control' id='title' placeholder='' value={typeof payload.title !== 'undefined' ? payload.title : dataDetail.title} onChange={e => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'title', fieldValue: e.target.value })} />\n        </div>\n        <div className='form-group'>\n          <label htmlFor='content1'>Keterangan</label>\n          <FieldTextArea forProcess={typeof id !== 'undefined' ? 'update' : 'create'} dataId={id} defaultValue={typeof payload.description !== 'undefined' ? payload.description : dataDetail.description} onChange={(v) => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'description', fieldValue: v })} idElement='description' />\n        </div>\n        <div className='form-group'>\n          <label htmlFor='insert_email_list'>Daftar email yang akan dimasukkan</label>\n          <FieldTextArea placeholder='contoh@gmail.com, contoh2@gmail.com' forProcess={typeof id !== 'undefined' ? 'update' : 'create'} dataId={id} defaultValue={payload.insert_email_list} onChange={(v) => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'insert_email_list', fieldValue: v })} idElement='insert_email_list' />\n        </div>\n        <div className='form-group'>\n          <label htmlFor='remove_email_list'>Daftar email yang akan dikeluarkan</label>\n          <FieldTextArea placeholder='contoh@gmail.com, contoh2@gmail.com' forProcess={typeof id !== 'undefined' ? 'update' : 'create'} dataId={id} defaultValue={payload.remove_email_list} onChange={(v) => tablepaginationOnChangeForm({ serviceName: upsertServiceName, fieldName: 'remove_email_list', fieldValue: v })} idElement='remove_email_list' />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction Comp (props) {\n  const { match, history } = props\n  return (\n    <ContentWrapper\n      pageTitle={upsertPageTitle}\n      breadcrumb={[\n        { title: 'Beranda', link: AppConfig.appHomePage },\n        { title: ManifestEmailBlast.listallPageTitle, link: ManifestEmailBlast.listallPageUrl() },\n        { title: upsertPageTitle, link: null, isActive: true }\n      ]}\n      contentHeaderTitle={upsertPageTitle}\n      isNeedLoggedin\n    >\n      <div className='row'>\n        <div className='col-md-6'>\n          <Detail\n            detailServiceName={detailService}\n            upsertServiceName={upsertService}\n            fields={fields}\n            id={match.params._id}\n            formTitle={upsertPageTitle}\n            redirectAfterDelete={redirectAfterDelete}\n          >\n            <FormUpdate />\n          </Detail>\n          <Table\n            listallServiceName={ManifestCustomerEmail.listallByBatchIdService}\n            fields={ManifestCustomerEmail.fields}\n            columns={ManifestCustomerEmail.getColumns(history)}\n            // createHref={ManifestEmailBatch.upsertPageUrl()}\n            // createNewButtonLabel={ManifestEmailBatch.createNewButtonLabel}\n            cardTitle={ManifestCustomerEmail.listallPageTitle}\n            whereCondition={JSON.stringify({ batch_id: match.params._id })}\n          />\n        </div>\n      </div>\n    </ContentWrapper>\n  )\n}\nexport default Comp\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Moment from 'moment'\nimport AppConfig from '../../core/Config/AppConfig'\nconst basePath = AppConfig.basePath\n\nconst entityName = 'EmailBlast'\nconst entity = 'emailblast'\nconst serviceEntity = 'EmailBlast'\n\nexport const redirectAfterCreate = '/' + entity + '/detail'\nexport const redirectAfterDelete = '/' + entity\nexport const detailPageUrl = (id) => (`/${entity}/detail/${id}`)\nexport const upsertPageUrl = (id) => (`/${entity}/upsert${id ? '/' + id : ''}`)\nexport const listallPageUrl = () => (`/${entity}`)\nexport const createNewButtonLabel = 'Buat Email Blast Baru'\nexport const createPageTitle = 'Buat Email Blast'\nexport const listallPageTitle = 'Email Blast'\nexport const detailPageTitle = 'Detail Email Blast'\nexport const upsertPageTitle = 'Form ' + entityName\nexport const createService = 'create' + serviceEntity\nexport const detailService = 'getDetail' + serviceEntity\nexport const upsertService = 'upsert' + serviceEntity\nexport const listallService = 'getAll' + serviceEntity + 's'\nexport const deleteService = 'delete' + serviceEntity\nexport const fields = '_id,email_batch_id{_id,title, customer_email_ids{email}},toko_id{_id,name,email},name,subject,last_sent,content1,created_at,updated_at,created_by{full_name},updated_by{full_name}'\nexport const getColumns = (history) => [\n  {\n    Header: 'Act',\n    accessor: '_id',\n    Cell: p => (\n      <div className='btn-group'>\n        <button type='button' className='btn btn-default dropdown-toggle dropdown-icon' data-toggle='dropdown'>\n          <span className='sr-only'>Toggle Dropdown</span>\n        </button>\n        <div className='dropdown-menu' role='menu'>\n          <Link className='dropdown-item' to={`${basePath}${redirectAfterCreate}/${p.cell.value}`}>Detail</Link>\n        </div>\n      </div>)\n  },\n  { Header: 'Name', accessor: 'name' },\n  { Header: 'Subject', accessor: 'subject' },\n  // {\n  //   Header: 'Toko',\n  //   accessor: 'toko_id',\n  //   Cell: d => {\n  //     // let data = Moment(d.cell.value)\n  //     // if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     // else data = ''\n  //     const toko = (_.map(d.cell.value || [], (v, k) => v.name) || []).join(', ')\n  //     return (<span>{`${toko}`}</span>)\n  //   }\n  // }\n  {\n    Header: 'Terakhir Dikirim',\n    accessor: 'last_sent',\n    Cell: d => {\n      console.log('asdfadsfdsf' + d.cell.value)\n      if (!d.cell.value) return '-'\n      let data = Moment(d.cell.value)\n      if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n      else data = ''\n      return (<span>{`${data}`}</span>)\n    }\n  },\n  // {\n  //   Header: 'Tanggal Dibuat',\n  //   accessor: 'created_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  // {\n  //   Header: 'Tanggal Dirubah',\n  //   accessor: 'updated_at',\n  //   Cell: d => {\n  //     let data = Moment(d.cell.value)\n  //     if (data && data.isValid()) data = data.format('YYYY-MM-DD HH:mm:ss')\n  //     else data = ''\n  //     return (<span>{`${data}`}</span>)\n  //   }\n  // },\n  // { Header: 'Dibuat Oleh', accessor: 'created_by.full_name' },\n  // { Header: 'Dirubah Oleh', accessor: 'updated_by.full_name' }\n  // { Header: 'created at', accessor: 'created_at' },\n  // { Header: 'updated at', accessor: 'updated_at' }\n]\nexport default {\n  redirectAfterCreate,\n  redirectAfterDelete,\n  detailPageUrl,\n  upsertPageUrl,\n  // createPageUrl,\n  createNewButtonLabel,\n  createPageTitle,\n  listallPageTitle,\n  detailPageTitle,\n  // updatePageTitle,\n  // createService,\n  detailService,\n  // updateService,\n  listallService,\n  deleteService,\n  upsertService,\n  fields,\n  getColumns,\n  listallPageUrl\n}\n","import React, { useEffect } from 'react'\n// import _ from 'lodash'\nimport AppConfig from '../../../core/Config/AppConfig'\nimport { getAccessToken } from '../../../core/Utils/Utils'\n\nfunction FieldTextArea (props) {\n  const { placeholder, textEditor, defaultValue, initValue, onChange, idElement, dataId } = props\n  // const [isFirstLoad, setIsFirstLoad] = React.useState(undefined)\n  useEffect(() => {\n    console.log('valuevaluevalue initValue=>', initValue)\n    console.log('valuevaluevalue id=>', dataId)\n    if (textEditor) {\n      let isReset = false\n      // if (initValue === defaultValue && ) {\n      //   isReset = true\n      // }\n      // setCurrentValue(defaultValue)\n      if (typeof dataId !== 'undefined' && typeof defaultValue !== 'undefined') {\n        console.log('valuevaluevalue reloadddd=>', defaultValue)\n        window.activateEditorV2({\n          idElement,\n          hostBackend: AppConfig.hostBackend,\n          at: getAccessToken(),\n          cb: (content) => {\n            onChange(content)\n          },\n          isReset,\n          defaultValue\n        })\n      }\n      if (typeof dataId === 'undefined') {\n        window.activateEditorV2({\n          idElement,\n          hostBackend: AppConfig.hostBackend,\n          at: getAccessToken(),\n          cb: (content) => {\n            onChange(content)\n          },\n          isReset,\n          defaultValue\n        })\n      }\n    }\n    // setIsFirstLoad(false)\n  // })\n  }, [defaultValue, dataId, idElement, onChange, textEditor, initValue])\n\n  // if (forProcess === 'update' && _.isEmpty(dataId)) return null\n  // if (forProcess === 'update' && (dataId === 'undefined' || _.isEmpty(dataId))) return null\n  // if (forProcess === 'update' && dataId === '') return null\n\n  if (typeof dataId !== 'undefined' && !dataId) return null\n\n  // console.log('FieldTextAreaFieldTextAreaFieldTextAreaFieldTextArea dataId=>', dataId)\n  // console.log('FieldTextAreaFieldTextAreaFieldTextAreaFieldTextArea defaultValue=>', defaultValue)\n  // console.log('FieldTextAreaFieldTextAreaFieldTextAreaFieldTextArea forProcess=>', forProcess)\n  // console.log('FieldTextAreaFieldTextAreaFieldTextAreaFieldTextArea renderrrr=>')\n  return (\n    <div className='row'>\n      <div className='col-12'>\n        <div style={{ position: 'relative' }}>\n          {textEditor && <div style={{ backgroundColor: 'black', position: 'absolute', width: '100%', height: '100%', top: 0 }}><center><span style={{ color: 'green', fontSize: 30, marginTop: 200 }}>Gambar sedang diupload...</span></center></div>}\n          <div id='texareaWrapper' style={{ width: '100%', height: '100%', backgroundColor: 'black', opacity: 1 }}>\n            <textarea className='textarea' id={idElement} placeholder={placeholder || 'Isi keterangan'} value={defaultValue} style={{ width: '100%' }} onChange={(e) => onChange(e.target.value)} />\n          </div>\n        </div>\n      </div>\n    </div>\n    // <textarea className='textarea' id={idElement} placeholder='Place some text here' style={{ width: '100%', height: 200, fontSize: 14, lineHeight: 18, border: '1px solid #dddddd', padding: 10 }} value={defaultValue} onChange={(e) => onChange(e.target.value)} />\n  )\n}\nexport default FieldTextArea\n"],"names":["entity","createPageTitle","createService","fields","redirectAfterCreate","redirectAfterDelete","detailPageUrl","id","updatePageUrl","createPageUrl","batchId","createNewButtonLabel","listallPageTitle","detailPageTitle","updatePageTitle","detailService","updateService","listallService","listallByBatchIdService","deleteService","getColumns","history","Header","accessor","basePath","AppConfig","upsertPageUrl","upsertPageTitle","upsertService","Cell","p","className","type","role","to","cell","value","listallPageUrl","FormUpdate","props","tablepaginationOnChangeForm","dataDetail","payload","upsertServiceName","tablepaginationResetForm","React","defaultFormValue","_id","isInitialReset","serviceName","formSchema","title","validate","v","errorMessage","insert_email_list","test","remove_email_list","onSuccess","batchData","needToRealoadAfterSubmit","ManifestCustomerEmail","htmlFor","placeholder","onChange","e","fieldName","fieldValue","target","forProcess","dataId","defaultValue","description","idElement","match","pageTitle","breadcrumb","link","ManifestEmailBlast","isActive","contentHeaderTitle","isNeedLoggedin","detailServiceName","params","formTitle","listallServiceName","columns","cardTitle","whereCondition","JSON","stringify","batch_id","d","console","log","data","Moment","isValid","format","textEditor","initValue","useEffect","window","activateEditorV2","hostBackend","at","getAccessToken","cb","content","isReset","style","position","backgroundColor","width","height","top","color","fontSize","marginTop","opacity"],"sourceRoot":""}