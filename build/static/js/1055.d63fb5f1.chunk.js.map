{"version":3,"file":"static/js/1055.d63fb5f1.chunk.js","mappings":"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","sources":["features/Simulator/components/ModalqrisComp.js","features/Simulator/containers/ModalqrisCon.js","features/Simulator/components/OverlayOnPaying.js","Pages/Simulator/PaymentSimulator.js"],"sourcesContent":["import React from 'react'\n// import QrReader from 'react-qr-scanner'\nimport { QrReader } from 'react-qr-reader';\n\nimport { Button, Grid, Typography } from '@mui/material'\nimport QrCodeScannerIcon from '@mui/icons-material/QrCodeScanner';\nimport { makeStyles } from '@material-ui/styles';\nimport { useTheme, useMediaQuery } from '@mui/material'\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport { InputLabel } from '@mui/material';\n\nconst useStyles = (theme) => makeStyles({\n    paper: {\n      position: 'absolute',\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3)\n    }\n  })\nconst ModalqrisComp = (props) => {\n    const {doPayQris,setOpenQrModal,setCloseQrModal,isOpenQr} = props\n    const [isLoading,setIsLoading] = React.useState(false)\n    const theme = useTheme()\n    const classes = useStyles(theme)\n\n    const [device,setDevice] = React.useState({});\n    const [devices,setDevices] = React.useState([]);\n    var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n\n    const handleChangeDevice = (event) => {\n      const cam = devices[event.target.value]\n      setDevice(cam);\n    };\n    \n    \n    const handleClose = () =>{\n      setCloseQrModal()\n    }\n    const handleOpen = () =>{\n      setOpenQrModal()\n    }\n    const previewStyle = {\n      height: '100%',\n      width: '100%',\n    }\n\n    React.useEffect(()=>{\n      // if (!navigator.enumerateDevices && window.MediaStreamTrack && window.MediaStreamTrack.getSources) {\n      //   console.log('loaded 1')\n      //   navigator.enumerateDevices = window.MediaStreamTrack.getSources.bind(window.MediaStreamTrack);\n      // }\n\n      // if (!navigator.enumerateDevices && navigator.enumerateDevices) {\n      //   console.log('loaded 2')\n      //     navigator.enumerateDevices = navigator.enumerateDevices.bind(navigator);\n      // }\n\n      // if (!navigator.enumerateDevices) {\n      //     console.log('loaded 3')\n      //     return;\n      // }\n      navigator.mediaDevices.enumerateDevices().then(devices=>{\n        const cameras = devices.filter(r=>r.kind === 'videoinput')\n        return cameras\n      }).then(cameras=>{\n        setDevices(cameras)\n        setDevice(cameras[0])\n      })\n\n      \n    },[])\n\n    return (\n      <>\n        <Button variant='outlined' onClick={handleOpen}  startIcon={<QrCodeScannerIcon/>} >Scan</Button>\n        <Dialog onClose={handleClose} open={isOpenQr}>\n          {/* <QrReader\n            delay={3000}\n            style={previewStyle}\n            onError={handleError}\n            onScan={handleScan}\n            facingmode={'rear'}\n            showViewFinder={true}\n            choosedeviceid={device.deviceId}\n          /> */}\n          <QrReader\n            onResult={(result, error) => {\n                if(result != null || result !=  undefined){\n                    doPayQris({qrisData:result.text})\n                }\n                // console.error(error)\n            }}\n            style={{ width: '100%',height:'100%'}}\n            scanDelay={900}\n            constraints={{ facingMode: 'environment' }}\n            containerStyle={{width:'70vh',height:'70vh'}}\n            videoStyle={{width:'fit-content'}}\n          />\n          <DialogActions>\n              <Grid container>\n                  <Grid item xs={6}>\n                  {/* {devices.length > 0 && \n                      <FormControl fullWidth size='small'>\n                          <InputLabel id=\"demo-simple-select-label\">Select Camera Device</InputLabel>\n                          <Select\n                            labelId=\"demo-simple-select-label\"\n                            id=\"demo-simple-select\"\n                            value={device.deviceId}\n                            label=\"Select Camera Device\"\n                            onChange={handleChangeDevice}\n                          >\n                              {devices.map((r,i)=><MenuItem key={i} value={r.deviceId}>{r.label}</MenuItem>)}\n                          </Select>\n                      </FormControl>} */}\n                  </Grid>\n                  <Grid item xs={6} textAlign=\"right\">\n                      <Button autoFocus onClick={handleClose}>Tutup</Button>\n                  </Grid>\n              </Grid>\n          </DialogActions>\n        </Dialog>\n      </>\n    )\n}\n\nexport default ModalqrisComp","import React from 'react'\nimport ModalqrisComp from '../components/ModalqrisComp'\nimport SimulorActions from '../redux'\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n      loadingVa: state.simulator.loadingVa,\n      loadingQr: state.simulator.loadingQr,\n      isOpenQr:state.simulator.isOpenModalQr,\n      statusVa:state.simulator.statusVa,\n      statusQr:state.simulator.statusQr\n    }\n  }\n  const mapDispatchToProps = dispatch => {\n    return {\n      setOpenQrModal: data => dispatch(SimulorActions.setOpenQrModal()),\n      setCloseQrModal: data => dispatch(SimulorActions.setCloseQrModal()),\n      doPayQris: data => dispatch(SimulorActions.doPayQris(data)),\n    }\n  }\n  export default connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(ModalqrisComp)\n  ","import React from 'react'\nimport Dialog from '@mui/material/Dialog';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { DialogContent, Typography } from '@mui/material';\nimport SendIcon from '@mui/icons-material/Send';\nimport { Grid } from '@mui/material';\nimport { makeStyles } from '@material-ui/styles';\nimport { useTheme, useMediaQuery } from '@mui/material'\n\n\nconst useStyles = (theme) => makeStyles({\n   overlayContent:{\n       flexDirection:'row',\n       padding:'2rem',\n       background: theme.palette.info.main\n   }\n})\nexport default function OverlayOnPaying(props) {\n    const {open} = props\n    const theme = useTheme()\n    const classes = useStyles(theme)\n    const [counter,setCounter] = React.useState(0)\n    const [dots,setDots] = React.useState([])\n    \n    React.useEffect(()=>{\n        setTimeout(()=>{\n            if(counter > 3){    \n                setDots([])\n                setCounter(0)\n            }else{\n                setDots([...dots,'.'])\n                setCounter(counter+1)\n            } \n        },500)\n    },[counter])\n    return (\n        <Dialog open={open}>\n            <DialogContent className={classes.overlayContent}>\n                <Grid>\n                    <Typography variant='h6'>Memproses Pembayaran{dots.join('')}</Typography>\n                </Grid>\n            </DialogContent>\n        </Dialog>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport Typography from '@mui/material/Typography'\nimport Box from '@mui/material/Box'\nimport Grid from '@mui/material/Grid'\nimport Button from '@mui/material/Button'\nimport ButtonGroup from '@mui/material/ButtonGroup'\nimport Card from '@mui/material/Card'\nimport CardHeader from '@mui/material/CardHeader'\nimport CardContent from '@mui/material/CardContent'\nimport CardActions from '@mui/material/CardActions'\nimport TextField from '@mui/material/TextField'\nimport FormControl from '@mui/material/FormControl'\nimport ContentWrapper from 'core/Components/Layout/ContentWrapper'\nimport AppConfig from 'core/Config/AppConfig'\nimport SimulorActions from 'features/Simulator/redux'\nimport CurrencyTextField from '@unicef/material-ui-currency-textfield'\nimport { makeStyles } from '@material-ui/core/styles'\nimport ModalqrisCon from 'features/Simulator/containers/ModalqrisCon'\nimport OverlayOnPaying from 'features/Simulator/components/OverlayOnPaying'\nimport _ from 'lodash'\nconst useStyles = makeStyles((theme) => ({\n    cardHeader:{\n      background:`linear-gradient(to right bottom, ${theme.palette.primary.main},${theme.palette.info.main})`,\n    },\n    titleHeader:{\n      color:'#fff',\n      fontWeight:500\n    }\n}))\n\n\nfunction Comp (props) {\n  const {  reload,loadingVa,loadingQr,doPayVirtualAccount,isOpenQr,statusVa,statusQr} = props\n  const initialVa = {vaNumber:''}\n  const classes = useStyles()\n\n  const [payloadVa,setPayloadVa] = React.useState(initialVa)\n\n  const handleChangeVa = props => event =>{\n    setPayloadVa({...payloadVa,[props]:event.target.value})\n  }\n  \n  const handleSubmitVa = () =>{\n    doPayVirtualAccount(payloadVa)\n  }\n\n  const formValidation = (obj,customValidation = null) =>{\n    var isValid = false\n    for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            if(obj[key] === undefined || obj[key] === undefined==='null' || obj[key] === ''){\n              isValid = false\n            }else{\n              isValid = true\n            }\n        }\n    }\n    return !isValid\n  }\n  React.useEffect(()=>{\n      setPayloadVa(initialVa)\n  },[reload])\n\n  return (\n    <>\n      <OverlayOnPaying open={loadingQr||loadingVa}/>\n      <ContentWrapper\n        pageTitle='Simulator'\n        breadcrumb={[{ title: 'Beranda', link: AppConfig.appHomePage }, { title: 'Simulator', link: null, isActive: true }]}\n        contentHeaderTitle='Simulator'\n        isNeedLoggedin\n      >\n        <Box sx={{ flexGrow: 1 }}>\n          <Grid container spacing={1}>\n            <Grid container item spacing={3}>\n              <Grid item xs={12} sm={12} md={6}lg={6} xl={6}>\n                <Card elevation={12} >\n                  <CardHeader\n                    className={classes.cardHeader}\n                    title={\n                      <Typography  variant='h6' className={classes.titleHeader}>Virtual Account</Typography>\n                    }\n                  />\n                  <CardContent>\n                    <Box\n                      component='form'\n                      sx={{\n                        '& .MuiTextField-root': { m: 1 }\n                      }}\n                      noValidate\n                      autoComplete='off'\n                    >\n                      <FormControl size='small' fullWidth>\n                        <TextField size='small' value={payloadVa.vaNumber} onChange={handleChangeVa('vaNumber')} fullWidth label=\"No. VA\" sx={{margin:0}} />\n                        {/* <CurrencyTextField\n                            sx={{margin:0,marginTop:'0.5rem'}}\n                            fullWidth\n                            variant='outlined'\n                            currencySymbol='Rp'\n                            outputFormat='number'\n                            textAlign='left'\n                            decimalCharacter=','\n                            digitGroupSeparator='.'\n                            label=\"Nominal Pembayaran\"\n                            minimumValue={'0'}\n                            // decimalPlaces={'0'}\n                        /> */}\n                      </FormControl>\n                    </Box>\n                  </CardContent>\n                  <CardActions sx={{marginLeft:2}}>\n                    <ButtonGroup disableElevation variant='contained'>\n                      <Button\n                      disabled={loadingVa || formValidation(payloadVa)}\n                      onClick={handleSubmitVa}\n                      >{ loadingVa ? `Membayar...` : `Bayar`}\n                      </Button>\n                    </ButtonGroup>\n                  </CardActions>\n                </Card>\n              </Grid>\n              <Grid item xs={12} sm={12} md={6}lg={6} xl={6}>\n                <Card elevation={6}>\n                  <CardHeader\n                    className={classes.cardHeader}\n                    title={\n                      <Typography variant='h6' className={classes.titleHeader}>QRIS</Typography>\n                    }\n                  />\n                  <CardContent>\n                      <Box\n                        component='form'\n                        sx={{\n                          '& .MuiTextField-root': { m: 1 },\n                          display:'flex',\n                          alignItems:'center',\n                          justifyContent:'center'\n                        }}\n                        noValidate\n                        autoComplete='off'\n                      >\n                        <ModalqrisCon/>\n                    </Box>\n                  </CardContent>\n                </Card>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Box>\n      </ContentWrapper>\n    </>\n  )\n}\nexport default connect((state, ownProps) => {\n  return ({\n    loadingVa: state.simulator.isloadingVa,\n    loadingQr: state.simulator.isloadingQr,\n    isOpenQr:state.simulator.isOpenModalQr,\n    statusVa:state.simulator.statusVa,\n    statusQr:state.simulator.statusQr,\n    reload:state.simulator.reload\n  })\n}, dispatch => ({\n  doPayVirtualAccount: data => dispatch(SimulorActions.doPayVirtualAccount(data)),\n}))(Comp)\n"],"names":["props","doPayQris","setOpenQrModal","setCloseQrModal","isOpenQr","React","theme","makeStyles","paper","position","border","boxShadow","shadows","padding","spacing","useStyles","useTheme","setDevice","setDevices","handleClose","test","navigator","userAgent","mediaDevices","enumerateDevices","then","devices","filter","r","kind","cameras","Button","variant","onClick","startIcon","QrCodeScanner","Dialog","onClose","open","onResult","result","error","undefined","qrisData","text","style","width","height","scanDelay","constraints","facingMode","containerStyle","videoStyle","DialogActions","Grid","container","item","xs","textAlign","autoFocus","connect","state","ownProps","loadingVa","simulator","loadingQr","isOpenModalQr","statusVa","statusQr","dispatch","data","SimulorActions","ModalqrisComp","OverlayOnPaying","classes","overlayContent","flexDirection","background","palette","info","main","counter","setCounter","dots","setDots","setTimeout","DialogContent","className","Typography","join","cardHeader","primary","titleHeader","color","fontWeight","isloadingVa","isloadingQr","reload","doPayVirtualAccount","initialVa","vaNumber","payloadVa","setPayloadVa","ContentWrapper","pageTitle","breadcrumb","title","link","AppConfig","isActive","contentHeaderTitle","isNeedLoggedin","Box","sx","flexGrow","sm","md","lg","xl","Card","elevation","CardHeader","CardContent","component","m","noValidate","autoComplete","FormControl","size","fullWidth","TextField","value","onChange","event","target","handleChangeVa","label","margin","CardActions","marginLeft","ButtonGroup","disableElevation","disabled","obj","isValid","key","hasOwnProperty","formValidation","display","alignItems","justifyContent","ModalqrisCon"],"sourceRoot":""}